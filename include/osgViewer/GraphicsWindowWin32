/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

/* Note, elements of GraphicsWindowX11 have used Prodcer/RenderSurface_X11.cpp as both
 * a guide to use of X11/GLX and copiying directly in the case of setBorder().
 * These elements are license under OSGPL as above, with Copyright (C) 2001-2004  Don Burns.
 */

#ifndef OSGVIEWER_GRAPHICSWINDOWWIN32
#define OSGVIEWER_GRAPHICSWINDOWIN32 1

#include <osgViewer/GraphicsWindow>

namespace osgViewer
{

class GraphicsWindowWin32 : public osgViewer::GraphicsWindow
{
    public:

        GraphicsWindowWin32(osg::GraphicsContext::Traits* traits):
            _valid(false),
            _initialized(false),
            _realized(false)
        {
            _traits = traits;

            init();
            
            if (valid())
            {
                setState( new osg::State );
                getState()->setContextID( osg::GraphicsContext::createNewContextID() );
            }
        }
    
        virtual bool valid() const { return _valid; }

        /** Realise the GraphicsContext.*/
        virtual bool realizeImplementation();

        /** Return true if the graphics context has been realised and is ready to use.*/
        virtual bool isRealizedImplementation() const { return _realized; }

        /** Close the graphics context.*/
        virtual void closeImplementation();

        /** Make this graphics context current.*/
        virtual void makeCurrentImplementation();

        /** Swap the front and back buffers.*/
        virtual void swapBuffersImplementation();
        
        /** Check to see if any events have been generated.*/
        virtual void checkEvents();

        /** Set Window decoration.*/
        virtual void setWindowDecoration(bool flag);

        /** Get focus.*/
        virtual void grabFocus();
        
        /** Get focus on if the pointer is in this window.*/
        virtual void grabFocusIfPointerInWindow();

    protected:
    
        void init();
        
        void transformMouseXY(float& x, float& y);

        bool            _valid;
        bool            _initialized;
        bool            _realized;
};

}

#endif
