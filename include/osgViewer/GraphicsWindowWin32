/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

/* Note, elements of GraphicsWindowX11 have used Prodcer/RenderSurface_X11.cpp as both
 * a guide to use of X11/GLX and copiying directly in the case of setBorder().
 * These elements are license under OSGPL as above, with Copyright (C) 2001-2004  Don Burns.
 */

#ifndef OSGVIEWER_GRAPHICSWINDOWWIN32
#define OSGVIEWER_GRAPHICSWINDOWIN32 1

#include <osgViewer/GraphicsWindow>

#ifndef _WIN32_WINNT
#define _WIN32_WINNT    0x0500
#endif
#include <windows.h>

namespace osgViewer
{

class GraphicsWindowWin32 : public osgViewer::GraphicsWindow
{
    public:

        GraphicsWindowWin32(osg::GraphicsContext::Traits* traits);
        
        ~GraphicsWindowWin32();
    
        virtual bool valid() const { return _valid; }

        /** Realise the GraphicsContext.*/
        virtual bool realizeImplementation();

        /** Return true if the graphics context has been realised and is ready to use.*/
        virtual bool isRealizedImplementation() const { return _realized; }

        /** Close the graphics context.*/
        virtual void closeImplementation();

        /** Make this graphics context current.*/
        virtual bool makeCurrentImplementation();

        /** Release the graphics context.*/
        virtual bool releaseContextImplementation();

        /** Swap the front and back buffers.*/
        virtual void swapBuffersImplementation();
        
        /** Check to see if any events have been generated.*/
        virtual void checkEvents();

        /** Set Window decoration.*/
        virtual void setWindowDecoration(bool flag);

        /** Get focus.*/
        virtual void grabFocus();
        
        /** Get focus on if the pointer is in this window.*/
        virtual void grabFocusIfPointerInWindow();
        
        /** Override from GUIActionAdapter.*/
        virtual void requestWarpPointer(float x,float y);
        
        /** Switch on/off the cursor.*/
        virtual void useCursor(bool /*cursorOn*/);
        
        /** Handle a native (Win32) windowing event as received from the system */
        virtual LRESULT handleNativeWindowingEvent( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
        
    protected:
    
        void init();
        
        void registerWindowClass();
        
        HWND createWindow();
        void destroyWindow( bool deleteNativeWindow = true );
        void recreateWindow();
        
        bool determineWindowPositionAndStyle( bool decorated, int& x, int& y, unsigned int& w, unsigned int& h, unsigned int& style, unsigned int& extendedStyle );
        
        bool setPixelFormat();
        
        void adaptKey( WPARAM wParam, LPARAM lParam, int& keySymbol, unsigned int& modifierMask );
                
        void transformMouseXY(float& x, float& y);
        
        int getScreenNumberContainingWindow( int& _screenOriginX, int& _screenOriginY );
        
        HWND            _hwnd;
        HDC             _hdc;
        HGLRC           _hglrc;
        
        double          _timeOfLastCheckEvents;
        
        int             _screenOriginX;
        int             _screenOriginY;
        unsigned int    _screenWidth;
        unsigned int    _screenHeight;
        
        int             _windowOriginXToRealize;
        int             _windowOriginYToRealize;
        unsigned int    _windowWidthToRealize;
        unsigned int    _windowHeightToRealize;
               
        bool            _initialized;
        bool            _valid;
        bool            _realized;
        
        bool            _recreateWindow;
        bool            _destroying;
};

}

#endif
