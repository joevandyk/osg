/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//osgIntrospection - Copyright (C) 2005 Marco Jez

#ifndef OSGINTROSPECTION_CONSTRUCTORINFO_
#define OSGINTROSPECTION_CONSTRUCTORINFO_

#include <osgIntrospection/Export>
#include <osgIntrospection/Type>
#include <osgIntrospection/ParameterInfo>
#include <osgIntrospection/CustomAttributeProvider>

namespace osgIntrospection
{

    class OSGINTROSPECTION_EXPORT ConstructorInfo: public CustomAttributeProvider
    {
    public:
        ConstructorInfo(const Type& decltype, const ParameterInfoList& params, std::string briefHelp = std::string(), std::string detailedHelp = std::string())
        :   _decltype(decltype),
        _params(params),
            _briefHelp(briefHelp),
            _detailedHelp(detailedHelp)
        {
        }

        virtual ~ConstructorInfo()
        {
            for (ParameterInfoList::iterator i=_params.begin(); i!=_params.end(); ++i)
                delete *i;
        }

        /// Returns the brief help of the reflected construtor.
        inline virtual const std::string& getBriefHelp() const
        {
            return _briefHelp;
        }

        /// Returns the detailed help of the reflected contructor.
        inline virtual const std::string& getDetailedHelp() const
        {
            return _detailedHelp;
        }

        /// Returns the Type object associated to the type that
        /// declares the reflected constructor.
        inline const Type& getDeclaringType() const
        {
            return _decltype;
        }
 
        /// Returns a list of objects that describe the reflected
        /// constructor's parameters.
        inline const ParameterInfoList& getParameters() const
        {
            return _params;
        }

        /// Invokes the reflected constructor dynamically passing it the 
        /// arguments as a list of Value objects.
        virtual Value createInstance(ValueList& args) const = 0;
        
    protected:
        virtual void getInheritedProviders(CustomAttributeProviderList& providers) const;
        
    private:
        const Type& _decltype;
        ParameterInfoList _params;

        std::string _briefHelp;
        std::string _detailedHelp;
    };

}

#endif
