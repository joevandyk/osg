/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGGA_DRIVEMANIPULATOR
#define OSGGA_DRIVEMANIPULATOR 1 

#include <osgGA/CameraManipulator>

namespace osgGA{

/**
DriveManipulator is a camera manipulator which provides drive-like
functionality. By default, the left mouse button accelerates, the right
mouse button decelerates, and the middle mouse button (or left and
right simultaneously) stops dead.
*/

class OSGGA_EXPORT DriveManipulator : public CameraManipulator
{
    public:

        DriveManipulator();

        virtual ~DriveManipulator();

        virtual void setNode(osg::Node*);

        virtual const osg::Node* getNode() const;

        virtual osg::Node* getNode();

        virtual void home(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual void init(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual bool handle(const GUIEventAdapter& ea,GUIActionAdapter& us);

    protected:

        /** Reset the internal GUIEvent stack.*/
        void flushMouseEventStack();

        /** Add the current mouse GUIEvent to internal stack.*/
        void addMouseEvent(const GUIEventAdapter& ea);

        void computeLocalDataFromCamera();

        void computeCameraFromLocalData();
        void computeCameraFromLocalData(const osg::Vec3& lv,const osg::Vec3& up);

        /** For the give mouse movement calculate the movement of the camera.
        Return true is camera has moved and a redraw is required.*/
        bool calcMovement();

        // Internal event stack comprising last three mouse events.
        osg::ref_ptr<const GUIEventAdapter> _ga_t1;
        osg::ref_ptr<const GUIEventAdapter> _ga_t0;

        osg::ref_ptr<osg::Node>       _node;

        float _modelScale;
        float _velocity;
        float _height;
        float _buffer;

        enum SpeedControlMode {
                USE_MOUSE_Y_FOR_SPEED,
                USE_MOUSE_BUTTONS_FOR_SPEED
        };

        SpeedControlMode _speedMode;

        osg::Vec3   _eye;
        osg::Quat   _rotation;
        float       _distance;
};

}

#endif
