/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGGA_GEOSTATE_MANIPULATOR
#define OSGGA_GEOSTATE_MANIPULATOR 1

#include <osgGA/Export>
#include <osgGA/GUIEventAdapter>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventHandler>

#include <osg/StateSet>

namespace osgGA{

/**
Experimental class, not been looked at for a while, but which will
be returned to at some point :-\
*/
class OSGGA_EXPORT StateSetManipulator : public GUIEventHandler
{
public:

        StateSetManipulator();
        virtual ~StateSetManipulator();

        virtual const char* className() { return "StateSetManipulator"; }

        /** attach a geostate to the manipulator to be used for specifying view.*/
        virtual void setStateSet(osg::StateSet*);

        /** get the attached a geostate.*/
        virtual osg::StateSet * getStateSet();

        /** get the attached a geostate.*/
        virtual const osg::StateSet * getStateSet() const;

        /** Handle events, return true if handled, false otherwise.*/
        virtual bool handle(const GUIEventAdapter& ea,GUIActionAdapter& us);        

        /** Handle visitations */
        virtual void accept(GUIEventHandlerVisitor&);

        /** Get the keyboard and mouse usage of this manipulator.*/
        virtual void getUsage(osg::ApplicationUsage& usage) const;

protected:

        // Reference pointer to a geostate
        osg::ref_ptr<osg::StateSet> _drawState;

        bool _backface;
        bool _lighting;
        bool _texture;
};

}

#endif
