//C++ header - Open Scene Graph - Copyright (C) 1998-2002 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSGGA_FLIGHTMANIPULATOR
#define OSGGA_FLIGHTMANIPULATOR 1

#include <osgGA/CameraManipulator>

namespace osgGA{

/**
FlightManipulator is a CameraManipulator which provides flight simulator-like
updating of the camera position & orientation. By default, the left mouse
button accelerates, the right mouse button decelerates, and the middle mouse
button (or left and right simultaneously) stops dead.
*/

class OSGGA_EXPORT FlightManipulator : public CameraManipulator
{
    public:

        FlightManipulator();
        virtual ~FlightManipulator();

        virtual void setNode(osg::Node*);

        virtual const osg::Node* getNode() const;

        virtual osg::Node* getNode();

        virtual void home(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual void init(const GUIEventAdapter& ea,GUIActionAdapter& us);

        virtual bool handle(const GUIEventAdapter& ea,GUIActionAdapter& us);

        enum YawControlMode {
                YAW_AUTOMATICALLY_WHEN_BANKED,
                NO_AUTOMATIC_YAW
        };

        /**        Configure the Yaw control for the flight model.        */
        void setYawControlMode(YawControlMode ycm) { _yawMode = ycm; }

    protected:

        /** Reset the internal GUIEvent stack.*/
        void flushMouseEventStack();
        /** Add the current mouse GUIEvent to internal stack.*/
        void addMouseEvent(const GUIEventAdapter& ea);

        void computeLocalDataFromCamera();

        void computeCameraFromLocalData();

        /** For the give mouse movement calculate the movement of the camera.
            Return true is camera has moved and a redraw is required.*/
        bool calcMovement();


        // Internal event stack comprising last three mouse events.
        osg::ref_ptr<const GUIEventAdapter> _ga_t1;
        osg::ref_ptr<const GUIEventAdapter> _ga_t0;

        osg::ref_ptr<osg::Node>       _node;

        float _modelScale;
        float _velocity;

        YawControlMode _yawMode;
        
        osg::Vec3   _eye;
        osg::Quat   _rotation;
        float       _distance;

};

}

#endif

