//C++ header - Open Scene Graph - Copyright (C) 1998-2001 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSGDB_READERWRITER
#define OSGDB_READERWRITER 1

#include <osg/Referenced>
#include <osg/Image>
#include <osg/Node>

#include <string>

namespace osgDB {


/** pure virtual base class for reading and writing of non native formats. */
class OSGDB_EXPORT ReaderWriter : public osg::Referenced
{
    public:
        virtual ~ReaderWriter() {}
        virtual const char* className() = 0;
        virtual bool acceptsExtension(const std::string& /*extension*/) { return false; }

        class Options : public osg::Referenced
        {
            public:

                Options() {}
                Options(const std::string& str):_str(str) {}
                
                void setOptionString(const std::string& str) { _str = str; }
                const std::string& getOptionString() const { return _str; }

            protected:

                virtual ~Options() {}

                std::string _str;

        };


        virtual osg::Object* readObject(const std::string& /*fileName*/,const Options* =NULL) { return NULL; }
        virtual osg::Image* readImage(const std::string& /*fileName*/,const Options* =NULL) { return NULL; }
        virtual osg::Node* readNode(const std::string& /*fileName*/,const Options* =NULL) { return NULL; }

        virtual bool writeObject(const osg::Object& /*obj*/,const std::string& /*fileName*/,const Options* =NULL) {return false; }
        virtual bool writeImage(const osg::Image& /*image*/,const std::string& /*fileName*/,const Options* =NULL) {return false; }
        virtual bool writeNode(const osg::Node& /*node*/,const std::string& /*fileName*/,const Options* =NULL) { return false; }
};


};

#endif // OSG_READERWRITER
