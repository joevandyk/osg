/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGDB_READFILE
#define OSGDB_READFILE 1

#include <osg/Node>
#include <osg/Image>

#include <osgDB/Export>

#include <string>

namespace osgDB {

/** Read an osg::Object from file. 
  * Return valid osg::Object on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Object* readObjectFile(const std::string& filename);

/** Read an osg::Image from file. 
  * Return valid osg::Image on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Image*  readImageFile(const std::string& filename);

/** Read an osg::Node from file. 
  * Return valid osg::Node on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Node*  readNodeFile(const std::string& filename);

/** Read an osg::Node subgraph from files, creating a osg::Group to contain the nodes if more
  * than one subgraph has been loaded.*/
extern OSGDB_EXPORT osg::Node* readNodeFiles(std::vector<std::string>& commandLine);

}

#endif
