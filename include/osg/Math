//C++ header - Open Scene Graph - Copyright (C) 1998-2001 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef __OSG_MATH
#define __OSG_MATH

#include <math.h>

#if defined(WIN32) || defined (macintosh)
    #include <float.h>
#if !defined(__CYGWIN__)
    #define M_E             2.7182818284590452354
    #define M_LOG2E         1.4426950408889634074
    #define M_LOG10E        0.43429448190325182765
    #define M_LN2           0.69314718055994530942
    #define M_LN10          2.30258509299404568402
    #define M_PI            3.14159265358979323846
    #define M_PI_2          1.57079632679489661923
    #define M_PI_4          0.78539816339744830962
    #define M_1_PI          0.31830988618379067154
    #define M_2_PI          0.63661977236758134308
    #define M_2_SQRTPI      1.12837916709551257390
    #define M_SQRT2         1.41421356237309504880
    #define M_SQRT1_2       0.70710678118654752440
#endif // __CYGWIN__
#endif

// PJA MAC OSX
// This appears to be the simplest way to get these defined under MACOSX
// where they arent in math.h

#ifndef acosf
#define acosf (float)acos
#endif

#ifndef asinf
#define asinf (float)asin
#endif

#ifndef cosf
#define cosf (float)cos
#endif

#ifndef sinf
#define sinf (float)sin
#endif

#ifndef logf
#define logf (float)log
#endif

#ifndef floorf
#define floorf (float)floor
#endif

#ifndef powf
#define powf (float)pow
#endif

#ifndef sqrtf
#define sqrtf (float)sqrt
#endif



namespace osg {

inline double inDegrees(double angle) { return angle*M_PI/180.0; }
inline double inRadians(double angle) { return angle; }

inline double DegreesToRadians(double angle) { return angle*M_PI/180.0; }
inline double RadiansToDegrees(double angle) { return angle*180.0/M_PI; }

#if defined(WIN32) && !defined(__CYGWIN__)
    inline bool isNaN(float v) { return _isnan(v)!=0; }
    inline bool isNaN(double v) { return _isnan(v)!=0; }
#elif __sgi
    inline bool isNaN(float v) { return isnan(v); }
    inline bool isNaN(double v) { return isnan(v); }
#else
    inline bool isNaN(float v) { return isnan(v); }
    inline bool isNaN(double v) { return isnan(v); }
#endif

};

#endif  // __OSG_MATH
