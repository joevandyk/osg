//C++ header - Open Scene Graph - Copyright (C) 1998-2002 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_POLYGONOFFSET
#define OSG_POLYGONOFFSET 1

#include <osg/StateAttribute>

namespace osg {

/** PolygonOffset - encapsulates the OpenGL glPolygonOffset state.*/
class SG_EXPORT PolygonOffset : public StateAttribute
{
    public :

        PolygonOffset();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        PolygonOffset(const PolygonOffset& po,const CopyOp& copyop=CopyOp::SHALLOW_COPY):
            StateAttribute(po,copyop),
            _factor(po._factor),
            _units(po._units) {}

        META_StateAttribute(osg, PolygonOffset, POLYGONOFFSET);

        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(PolygonOffset,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_factor)
            COMPARE_StateAttribute_Parameter(_units)

            return 0; // passed all the above comparison macro's, must be equal.
        }

        virtual void getAssociatedModes(std::vector<GLMode>& modes) const 
        {
            modes.push_back(GL_POLYGON_OFFSET_FILL);
            modes.push_back(GL_POLYGON_OFFSET_LINE);
            modes.push_back(GL_POLYGON_OFFSET_POINT);
        }

        inline void setFactor(const float factor) { _factor = factor; }
        inline const float getFactor() const { return _factor; }
        
        inline void setUnits(const float units) { _units = units; }
        inline const float getUnits() const { return _units; }

        virtual void apply(State& state) const;

    protected :

        virtual ~PolygonOffset();

        float       _factor;
        float       _units;

};

}

#endif
