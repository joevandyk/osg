/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_TEXTURERECTANGLE
#define OSG_TEXTURERECTANGLE 1

#include <osg/Texture>

#ifndef GL_TEXTURE_RECTANGLE_NV
#define GL_TEXTURE_RECTANGLE_NV           0x84F5
#endif

namespace osg {

/** Texture state class which encapsulates OpenGL texture functionality.*/
class SG_EXPORT TextureRectangle : public Texture
{

    public :

        TextureRectangle();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        TextureRectangle(const TextureRectangle& text,const CopyOp& copyop=CopyOp::SHALLOW_COPY);

        META_StateAttribute(osg, TextureRectangle, TEXTURE);

        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& rhs) const;

        virtual void getAssociatedModes(std::vector<GLMode>& modes) const 
        {
            modes.push_back(GL_TEXTURE_RECTANGLE_NV);
        }

        /** Set the texture image. */
        void setImage(Image* image);

        /** Get the texture image. */
        Image* getImage() { return _image.get(); }

        /** Get the const texture image. */
        inline const Image* getImage() const { return _image.get(); }

        inline unsigned int& getModifiedTag(unsigned int contextID) const
        {
            // get the modified tag for the current contextID.
            return _modifiedTag[contextID];
        }

        /** Set the texture width and height. If width or height are zero then
          * the repsective size value is calculated from the source image sizes. */
        inline void setTextureSize(int width, int height) const
        {
            _textureWidth = width;
            _textureHeight = height;
        }

        /** Get the texture subload width. */
        inline void getTextureSize(int& width, int& height) const
        {
            width = _textureWidth;
            height = _textureHeight;
        }

        class SubloadCallback : public Referenced
        {
        public:
            virtual void load(const TextureRectangle&, State&) const = 0;
            virtual void subload(const TextureRectangle&, State&) const = 0;
        };

        void setSubloadCallback(SubloadCallback* cb) { _subloadCallback = cb;; }
        SubloadCallback* getSubloadCallback() { return _subloadCallback.get(); }
        const SubloadCallback* getSubloadCallback() const { return _subloadCallback.get(); }

        /** On first apply (unless already compiled), create and bind the 
          * texture, subsequent apply will simple bind to texture.*/
        virtual void apply(State& state) const;

    protected :

        virtual ~TextureRectangle();

        virtual void computeInternalFormat() const;

        void applyTexParameters(GLenum target, State& state) const;

        void applyTexImage_load(GLenum target, Image* image, State& state, GLsizei& inwidth, GLsizei& inheight) const;
        void applyTexImage_subload(GLenum target, Image* image, State& state, GLsizei& inwidth, GLsizei& inheight, GLint& inInternalFormat) const;

        // not ideal that _image is mutable, but its required since
        // Image::ensureDimensionsArePowerOfTwo() can only be called
        // in a valid OpenGL context, a therefore within an Texture::apply
        // which is const...
        mutable ref_ptr<Image> _image;

        // subloaded images can have different texture and image sizes.
        mutable GLsizei _textureWidth, _textureHeight;
        
        ref_ptr<SubloadCallback> _subloadCallback;

        typedef buffered_value<unsigned int> ImageModifiedTag;
        mutable ImageModifiedTag _modifiedTag;
};

}

#endif
