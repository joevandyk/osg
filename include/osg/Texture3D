/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_TEXTURE3D
#define OSG_TEXTURE3D 1

#include <osg/Texture>

namespace osg {

/** Texture state class which encapsulates OpenGl 3D texture functionality.*/
class SG_EXPORT Texture3D : public Texture
{

    public :
        
        Texture3D();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        Texture3D(const Texture3D& text,const CopyOp& copyop=CopyOp::SHALLOW_COPY);
        
        META_StateAttribute(osg, Texture3D,TEXTURE);

        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& rhs) const;

        virtual bool getModeUsage(ModeUsage& usage) const
        {
            usage.usesTextureMode(GL_TEXTURE_3D);
            return true;
        }

        /** Set the texture image. */
        void setImage(Image* image);

        /** Get the texture image. */
        Image* getImage() { return _image.get(); }

        /** Get the const texture image. */
        inline const Image* getImage() const { return _image.get(); }

        inline unsigned int& getModifiedTag(unsigned int contextID) const
        {
            // get the modified tag for the current contextID.
            return _modifiedTag[contextID];
        }

        /** Set the texture width and height. If width or height are zero then
          * the repsective size value is calculated from the source image sizes. */
        inline void setTextureSize(int width, int height, int depth) const
        {
            _textureWidth = width;
            _textureHeight = height;
            _textureDepth = depth;
        }

        /** Get the texture subload width. */
        inline void getTextureSize(int& width, int& height, int& depth) const
        {
            width = _textureWidth;
            height = _textureHeight;
            depth = _textureDepth;
        }


        class SG_EXPORT SubloadCallback : public Referenced
        {
            public:
                virtual void load(const Texture3D& texture,State& state) const = 0;
                virtual void subload(const Texture3D& texture,State& state) const = 0;
        };
        
        void setSubloadCallback(SubloadCallback* cb) { _subloadCallback = cb;; }
        
        SubloadCallback* getSubloadCallback() { return _subloadCallback.get(); }

        const SubloadCallback* getSubloadCallback() const { return _subloadCallback.get(); }


        /** Set the number of mip map levels the the texture has been created with,
            should only be called within an osg::Texuture::apply() and custom OpenGL texture load.*/
        void setNumMipmapLevels(unsigned int num) const { _numMipmapLevels=num; }

        /** Get the number of mip map levels the the texture has been created with.*/
        unsigned int getNumMipmapLevels() const { return _numMipmapLevels; }
        

        /** Copy a two-dimensional texture subimage. As per glCopyTexSubImage2D.
          * Updates portion of an existing OpenGL texture object from the current OpenGL background
          * framebuffer contents at pos \a x, \a y with width \a width and
          * height \a height. */
        void copyTexSubImage3D(State& state, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);


        /** On first apply (unless already compiled), create the minmapped 
          * texture and bind it, subsequent apply will simple bind to texture.*/
        virtual void apply(State& state) const;
        

        /** Extensions class which encapsulates the querring of extensions and
          * associated function pointers, and provide convinience wrappers to 
          * check for the extensions or use the associated functions.*/        
        class SG_EXPORT Extensions : public osg::Referenced
        {
            public:
                Extensions();

                Extensions(const Extensions& rhs);
                
                void lowestCommonDenominator(const Extensions& rhs);
                
                void setupGLExtenions();

                void setTexture3DSupported(bool flag) { _isTexture3DSupported=flag; }
                bool isTexture3DSupported() const { return _isTexture3DSupported; }
                
                void setTexture3DFast(bool flag) { _isTexture3DFast=flag; }
                bool isTexture3DFast() const { return _isTexture3DFast; }

                void setMaxTexture3DSize(GLint maxsize) { _maxTexture3DSize=maxsize; }
                GLint maxTexture3DSize() const { return _maxTexture3DSize; }

                void setTexImage3DProc(void* ptr) { _glTexImage3D = ptr; }
                void glTexImage3D( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) const;

                void setTexSubImage3DProc(void* ptr) { _glTexSubImage3D = ptr; }
                void glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) const;
                
                void setCopyTexSubImage3DProc(void* ptr) { _glCopyTexSubImage3D = ptr; }
                void glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) const;
                
                void setBuild3DMipmapsProc(void* ptr) { _gluBuild3DMipmaps = ptr; }
                void gluBuild3DMipmaps( GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data) const;

            protected:

                ~Extensions() {}
                
                bool    _isTexture3DSupported;
                bool    _isTexture3DFast;
                GLint   _maxTexture3DSize;

                void*   _glTexImage3D;
                void*   _glTexSubImage3D;
                void*   _glCopyTexSubImage3D;
                void*   _gluBuild3DMipmaps;

        };
        
        /** Function to call to get the extension of a specified context.
          * If the Exentsion object for that context has not yet been created then 
          * and the 'createIfNotInitalized' flag been set to false then returns NULL.
          * If 'createIfNotInitalized' is true then the Extensions object is 
          * automatically created.  However, in this case the extension object 
          * only be created with the graphics context associated with ContextID..*/
        static Extensions* getExtensions(unsigned int contextID,bool createIfNotInitalized);

        /** setExtensions allows users to override the extensions across graphics contexts.
          * typically used when you have different extensions supported across graphics pipes
          * but need to ensure that they all use the same low common denominator extensions.*/
        static void setExtensions(unsigned int contextID,Extensions* extensions);

    protected :

        virtual ~Texture3D();

        virtual void computeInternalFormat() const;

        void applyTexImage3D(GLenum target, Image* image, State& state, GLsizei& inwidth, GLsizei& inheight, GLsizei& indepth, GLsizei& numMipmapLevels) const;

        // not ideal that _image is mutable, but its required since
        // Image::ensureDimensionsArePowerOfTwo() can only be called
        // in a valid OpenGL context, a therefore within an Texture::apply
        // which is const...
        mutable ref_ptr<Image> _image;

        // subloaded images can have different texture and image sizes.
        mutable GLsizei _textureWidth, _textureHeight, _textureDepth;
        
        // number of mip map levels the the texture has been created with,        
        mutable GLsizei _numMipmapLevels;

        ref_ptr<SubloadCallback> _subloadCallback;

        typedef buffered_value<unsigned int> ImageModifiedTag;
        mutable ImageModifiedTag _modifiedTag;

};

}

#endif
