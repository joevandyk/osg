/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_LINESTIPPLE
#define OSG_LINESTIPPLE 1

#include <osg/StateAttribute>

namespace osg {

class SG_EXPORT LineStipple : public StateAttribute
{
    public :

        LineStipple();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        LineStipple(const LineStipple& lw,const CopyOp& copyop=CopyOp::SHALLOW_COPY):
          StateAttribute(lw,copyop),
          _factor(lw._factor),
          _pattern(lw._pattern) {}

        META_StateAttribute(osg, LineStipple, LINESTIPPLE);

        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(LineStipple,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_factor)
            COMPARE_StateAttribute_Parameter(_pattern)

            return 0; // passed all the above comparison macro's, must be equal.
        }
        
        virtual void getAssociatedModes(std::vector<GLMode>& modes) const 
        {
            modes.push_back(GL_LINE_STIPPLE);
        }

        void setFactor(GLint factor);
        inline GLint getFactor() const { return _factor; }

        void setPattern(GLushort pattern);
        inline GLushort getPattern() const { return _pattern; }

        virtual void apply(State& state) const;


    protected :

        virtual ~LineStipple();

        GLint           _factor;
        GLushort	_pattern;

};

}

#endif
