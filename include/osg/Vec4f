/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_VEC4F
#define OSG_VEC4F 1

#include <osg/Vec3f>

#include <ostream>

namespace osg {

/** General purpose float quad, uses include representation
    of colour coordinates.
    No support yet added for float * Vec4f - is it necessary?
    Need to define a non-member non-friend operator*  etc.
   			     Vec4f * float is okay
*/
class Vec4f
{
    public:

        typedef float value_type;

        value_type _v[4];

	// Methods are defined here so that they are implicitly inlined

        Vec4f() { _v[0]=0.0; _v[1]=0.0; _v[2]=0.0; _v[3]=0.0;}
        
        Vec4f(value_type x, value_type y, value_type z, value_type w)
        {
            _v[0]=x;
            _v[1]=y;
            _v[2]=z;
            _v[3]=w;
        }

        Vec4f(const Vec3f& v3,value_type w)
        {
            _v[0]=v3[0];
            _v[1]=v3[1];
            _v[2]=v3[2];
            _v[3]=w;
        }
            
        inline bool operator == (const Vec4f& v) const { return _v[0]==v._v[0] && _v[1]==v._v[1] && _v[2]==v._v[2] && _v[3]==v._v[3]; }

        inline bool operator != (const Vec4f& v) const { return _v[0]!=v._v[0] || _v[1]!=v._v[1] || _v[2]!=v._v[2] || _v[3]!=v._v[3]; }

        inline bool operator <  (const Vec4f& v) const
        {
            if (_v[0]<v._v[0]) return true;
            else if (_v[0]>v._v[0]) return false;
            else if (_v[1]<v._v[1]) return true;
            else if (_v[1]>v._v[1]) return false;
            else if (_v[2]<v._v[2]) return true;
            else if (_v[2]>v._v[2]) return false;
            else return (_v[3]<v._v[3]);
        }

        inline value_type* ptr() { return _v; }
        inline const value_type* ptr() const { return _v; }

        inline void set( value_type x, value_type y, value_type z, value_type w)
        {
            _v[0]=x; _v[1]=y; _v[2]=z; _v[3]=w;
        }

        inline value_type& operator [] (unsigned int i) { return _v[i]; }
        inline value_type  operator [] (unsigned int i) const { return _v[i]; }

        inline value_type& x() { return _v[0]; }
        inline value_type& y() { return _v[1]; }
        inline value_type& z() { return _v[2]; }
        inline value_type& w() { return _v[3]; }

        inline value_type x() const { return _v[0]; }
        inline value_type y() const { return _v[1]; }
        inline value_type z() const { return _v[2]; }
        inline value_type w() const { return _v[3]; }

        inline unsigned long asABGR() const
        {
            return (unsigned long)clampTo((_v[0]*255.0f),0.0f,255.0f)<<24 |
                   (unsigned long)clampTo((_v[1]*255.0f),0.0f,255.0f)<<16 |
                   (unsigned long)clampTo((_v[2]*255.0f),0.0f,255.0f)<<8  |
                   (unsigned long)clampTo((_v[3]*255.0f),0.0f,255.0f);
        }

        inline unsigned long asRGBA() const
        {
            return (unsigned long)clampTo((_v[3]*255.0f),0.0f,255.0f)<<24 |
                   (unsigned long)clampTo((_v[2]*255.0f),0.0f,255.0f)<<16 |
                   (unsigned long)clampTo((_v[1]*255.0f),0.0f,255.0f)<<8  |
                   (unsigned long)clampTo((_v[0]*255.0f),0.0f,255.0f);
        }

        inline bool valid() const { return !isNaN(); }
        inline bool isNaN() const { return osg::isNaN(_v[0]) || osg::isNaN(_v[1]) || osg::isNaN(_v[2]) || osg::isNaN(_v[3]); }

        /// dot product
        inline value_type operator * (const Vec4f& rhs) const
        {
            return _v[0]*rhs._v[0]+
	           _v[1]*rhs._v[1]+
	           _v[2]*rhs._v[2]+
	           _v[3]*rhs._v[3] ;
        }

        /// multiply by scalar
        inline Vec4f operator * (value_type rhs) const
        {
            return Vec4f(_v[0]*rhs, _v[1]*rhs, _v[2]*rhs, _v[3]*rhs);
        }

        /// unary multiply by scalar
        inline Vec4f& operator *= (value_type rhs)
        {
            _v[0]*=rhs;
            _v[1]*=rhs;
            _v[2]*=rhs;
            _v[3]*=rhs;
            return *this;
        }

        /// divide by scalar
        inline Vec4f operator / (value_type rhs) const
        {
            return Vec4f(_v[0]/rhs, _v[1]/rhs, _v[2]/rhs, _v[3]/rhs);
        }

        /// unary divide by scalar
        inline Vec4f& operator /= (value_type rhs)
        {
            _v[0]/=rhs;
            _v[1]/=rhs;
            _v[2]/=rhs;
            _v[3]/=rhs;
            return *this;
        }

        /// binary vector add
        inline Vec4f operator + (const Vec4f& rhs) const
        {
            return Vec4f(_v[0]+rhs._v[0], _v[1]+rhs._v[1],
		        _v[2]+rhs._v[2], _v[3]+rhs._v[3]);
        }

        /** unary vector add.  Slightly more efficient because no temporary
            intermediate object*/
        inline Vec4f& operator += (const Vec4f& rhs)
        {
            _v[0] += rhs._v[0];
            _v[1] += rhs._v[1];
            _v[2] += rhs._v[2];
            _v[3] += rhs._v[3];
            return *this;
        }

        /// binary vector subtract
        inline Vec4f operator - (const Vec4f& rhs) const
        {
            return Vec4f(_v[0]-rhs._v[0], _v[1]-rhs._v[1],
		        _v[2]-rhs._v[2], _v[3]-rhs._v[3] );
        }

        /// unary vector subtract
        inline Vec4f& operator -= (const Vec4f& rhs)
        {
            _v[0]-=rhs._v[0];
            _v[1]-=rhs._v[1];
            _v[2]-=rhs._v[2];
            _v[3]-=rhs._v[3];
            return *this;
        }

        /// negation operator.  Returns the negative of the Vec4f
        inline const Vec4f operator - () const
        {
            return Vec4f (-_v[0], -_v[1], -_v[2], -_v[3]);
        }

        /// Length of the vector = sqrt( vec . vec )
        inline value_type length() const
        {
            return sqrtf( _v[0]*_v[0] + _v[1]*_v[1] + _v[2]*_v[2] + _v[3]*_v[3]);
        }

        /// Length squared of the vector = vec . vec
        inline value_type length2() const
        {
            return _v[0]*_v[0] + _v[1]*_v[1] + _v[2]*_v[2] + _v[3]*_v[3];
        }

        /** normalize the vector so that it has length unity
            returns the previous length of the vector*/
        inline value_type normalize()
        {
            value_type norm = Vec4f::length();
            if (norm>0.0f)
            {
                value_type inv = 1.0f/norm;
                _v[0] *= inv;
                _v[1] *= inv;
                _v[2] *= inv;
                _v[3] *= inv;
            }
            return( norm );
        }

        friend inline std::ostream& operator << (std::ostream& output, const Vec4f& vec)
        {
	    output << vec._v[0] << " "
                   << vec._v[1] << " "
                   << vec._v[2] << " "
                   << vec._v[3];
	    return output; 	// to enable cascading
	}

};	// end of class Vec4f


/** Compute the dot product of a (Vec3,1.0) and a Vec4f.*/
inline Vec4f::value_type operator * (const Vec3f& lhs,const Vec4f& rhs)
{
    return lhs[0]*rhs[0]+lhs[1]*rhs[1]+lhs[2]*rhs[2]+rhs[3];
}

/** Compute the dot product of a Vec4f and a (Vec3,1.0).*/
inline Vec4f::value_type operator * (const Vec4f& lhs,const Vec3f& rhs)
{
    return lhs[0]*rhs[0]+lhs[1]*rhs[1]+lhs[2]*rhs[2]+lhs[3];
}

}	// end of namespace osg

#endif
