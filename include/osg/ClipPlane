/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_CLIPPLANE
#define OSG_CLIPPLANE 1

#include <osg/Plane>
#include <osg/StateAttribute>

namespace osg {

/** Encapsulates OpenGL glClipPlane().
*/
class SG_EXPORT ClipPlane : public StateAttribute
{
    public :

        ClipPlane();
        inline ClipPlane(unsigned int no,const Vec4& plane)    { setClipPlaneNum(no); setClipPlane(plane); }
        inline ClipPlane(unsigned int no,const Plane& plane)   { setClipPlaneNum(no); setClipPlane(plane); }
        inline ClipPlane(unsigned int no,double a,double b,double c,double d)  { setClipPlaneNum(no); setClipPlane(a,b,c,d); }

        /** Copy constructor using CopyOp to manage deep vs shallow copy. */
        ClipPlane(const ClipPlane& cp,const CopyOp& copyop=CopyOp::SHALLOW_COPY):
            StateAttribute(cp,copyop)
        {
            _clipPlane[0]=cp._clipPlane[0];
            _clipPlane[1]=cp._clipPlane[1];
            _clipPlane[2]=cp._clipPlane[2];
            _clipPlane[3]=cp._clipPlane[3];
            _clipPlaneNum=cp._clipPlaneNum;
        }
        
        META_StateAttribute(osg, ClipPlane, CLIPPLANE);
        
        /** Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. */
        virtual int compare(const StateAttribute& sa) const
        {
            // Check for equal types, then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macros below.
            COMPARE_StateAttribute_Types(ClipPlane,sa)

            // Compare each parameter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_clipPlaneNum)
            COMPARE_StateAttribute_Parameter(_clipPlane[0])
            COMPARE_StateAttribute_Parameter(_clipPlane[1])
            COMPARE_StateAttribute_Parameter(_clipPlane[2])
            COMPARE_StateAttribute_Parameter(_clipPlane[3])

            return 0; // Passed all the above comparison macros, so must be equal.
        }

        virtual unsigned int getMember() { return _clipPlaneNum; }

        virtual bool getModeUsage(ModeUsage& usage) const
        {
            usage.usesMode((GLMode)(GL_CLIP_PLANE0+_clipPlaneNum));
            return true;
        }


        /** Defines the clip plane with the given Vec4. */
        void setClipPlane(const Vec4& plane);

        /** Defines this plane with the given Plane. */
        void setClipPlane(const Plane& plane);

        /** Defines the clip plane with the given double[4]. */
        void setClipPlane(const double* plane);

        /** Defines the plane as [ a b c d ]. */
        void setClipPlane(double a,double b,double c,double d)
        {
            _clipPlane[0]=a;_clipPlane[1]=b;_clipPlane[2]=c;_clipPlane[3]=d;
        }

        /** Gets the clip plane as a Vec4. */
        void getClipPlane(Vec4& plane) const;

        /** Gets the clip plane as a Plane. */
        void getClipPlane(Plane& plane) const;

        /** Gets the clip plane as an array of doubles. */
        void getClipPlane(double* plane) const;

        /** Sets the clip plane number. */
        void setClipPlaneNum(unsigned int num);

        /** Gets the clip plane number. */
        unsigned int getClipPlaneNum() const;

        /** Applies the clip plane's state to the OpenGL state machine. */
        virtual void apply(State& state) const;

    protected :
    
        virtual ~ClipPlane();
        
        double              _clipPlane[4];
        unsigned int        _clipPlaneNum;

};

}

#endif
