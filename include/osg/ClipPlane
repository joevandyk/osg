//C++ header - Open Scene Graph - Copyright (C) 1998-2001 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_CLIPPLANE
#define OSG_CLIPPLANE 1

#include <osg/Plane>
#include <osg/StateAttribute>
#include <osg/StateSet>

namespace osg {

/** ClipPlane state class which encapsulates OpenGL glClipPlane() functionality.*/
class SG_EXPORT ClipPlane : public StateAttribute
{
    public :

        ClipPlane();

        /** Copy constructor using Cloner to manage deep vs shallow copy.*/
        ClipPlane(const ClipPlane& cp,const Cloner& cloner=ShallowCopy()):
            StateAttribute(cp,cloner)
        {
            _clipPlane[0]=cp._clipPlane[0];
            _clipPlane[1]=cp._clipPlane[1];
            _clipPlane[2]=cp._clipPlane[2];
            _clipPlane[3]=cp._clipPlane[3];
            _clipPlaneNum=cp._clipPlaneNum;
        }
        
        META_StateAttribute(ClipPlane, (Type)(CLIPPLANE+_clipPlaneNum));
        
        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(ClipPlane,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_clipPlaneNum)
            COMPARE_StateAttribute_Parameter(_clipPlane[0])
            COMPARE_StateAttribute_Parameter(_clipPlane[1])
            COMPARE_StateAttribute_Parameter(_clipPlane[2])
            COMPARE_StateAttribute_Parameter(_clipPlane[3])

            return 0; // passed all the above comparison macro's, must be equal.
        }

        virtual void setStateSetModes(StateSet& ds,const GLModeValue value) const
        {
            ds.setMode((GLMode)(GL_CLIP_PLANE0+_clipPlaneNum),value);
        }


	/** Set the clip plane, using a Vec4 to define plane. */
        void setClipPlane(const Vec4& plane);

	/** Set the clip plane, using a Plane to define plane. */
        void setClipPlane(const Plane& plane);

	/** Set the clip plane, using a double[4] to define plane. */
        void setClipPlane(const double* plane);

	/** Get the clip plane, values entered into a Vec4 passed to the getClipPlane. */
        void getClipPlane(Vec4& plane) const;

	/** Get the clip plane, values entered into a Plane passed to the getClipPlane. */
        void getClipPlane(Plane& plane) const;

	/** Get the clip plane, values entered into a double[4] passed to the getClipPlane. */
        void getClipPlane(double* plane) const;

	/** Set the clip plane number. */
        void setClipPlaneNum(const unsigned int num);

	/** Get the clip plane number. */
        const unsigned int getClipPlaneNum() const;

	/** Apply the clip plane's state to the OpenGL state machine. */
        virtual void apply(State& state) const;

    protected :
    
        virtual ~ClipPlane();
        
        double              _clipPlane[4];
        unsigned int        _clipPlaneNum;

};

};

#endif
