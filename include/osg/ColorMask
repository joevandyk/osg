//C++ header - Open Scene Graph - Copyright (C) 1998-2002 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_COLORMASK
#define OSG_COLORMASK 1

#include <osg/Export>
#include <osg/StateAttribute>
#include <osg/Types>

namespace osg {

/** Encapsulate OpenGL glColorMaskFunc/Op/Mask functions.
*/     
class SG_EXPORT ColorMask : public StateAttribute
{
    public :
    
    
        ColorMask();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        ColorMask(const ColorMask& cm,const CopyOp& copyop=CopyOp::SHALLOW_COPY):
            StateAttribute(cm,copyop),
            _red(cm._red),
            _green(cm._green),
            _blue(cm._blue),
            _alpha(cm._alpha) {}
        
        META_StateAttribute(osg, ColorMask, COLORMASK);
        
        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(ColorMask,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_red)
            COMPARE_StateAttribute_Parameter(_green)
            COMPARE_StateAttribute_Parameter(_blue)
            COMPARE_StateAttribute_Parameter(_alpha)

            return 0; // passed all the above comparison macro's, must be equal.
        }

        inline void setMask(bool red,bool green,bool blue,bool alpha)
        {
            _red = red;
            _green = green;
            _blue = blue;
            _alpha = alpha;
            
        }
        
        inline const bool getRedMask() const { return _red; }

        inline const bool getGreenMask() const { return _green; }

        inline const bool getBlueMask() const { return _blue; }
        
        inline const bool getAlphaMask() const { return _alpha; }

        virtual void apply(State& state) const;

    protected:
    
        virtual ~ColorMask();

        bool                _red;
        bool                _green;
        bool                _blue;
        bool                _alpha;

};

}

#endif
