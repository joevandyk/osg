#ifndef OSG_VEC3
#define OSG_VEC3 1

#include <osg/Export>
#include <math.h>

#ifdef OSG_USE_IO_DOT_H
#include <iostream.h>
#else
#include <iostream>
using namespace std;
#endif

namespace osg {

/** General purpose float triple for use as vertices, vectors and normals.
    Provides general maths operations from addition through to cross products.
    No support yet added for float * Vec3 - is it necessary?
    Need to define a non-member non-friend operator*  etc.
   			     Vec3 * float is okay
*/
class Vec3
{
    public:

        Vec3() {} // no operations done to maintain speed
        Vec3(float x,float y,float z) { _v[0]=x; _v[1]=y; _v[2]=z; }

        float _v[3];

	bool operator == (const Vec3& v) const { return _v[0]==v._v[0] && _v[1]==v._v[1] && _v[2]==v._v[2]; }

        inline float* ptr() { return _v; }
        inline const float* ptr() const { return _v; }

        inline void set( float x, float y, float z)
        {
            _v[0]=x; _v[1]=y; _v[2]=z;
        }

        inline float& operator [] (int i) { return _v[i]; }
        inline float  operator [] (int i) const { return _v[i]; }

        inline float& x() { return _v[0]; }
        inline float& y() { return _v[1]; }
        inline float& z() { return _v[2]; }

        inline float x() const { return _v[0]; }
        inline float y() const { return _v[1]; }
        inline float z() const { return _v[2]; }

        /// dot product
        inline float operator * (const Vec3& rhs) const
        {
            return _v[0]*rhs._v[0]+_v[1]*rhs._v[1]+_v[2]*rhs._v[2];
        }

        /// cross product
        inline Vec3 operator ^ (const Vec3& rhs) const
        {
            return Vec3(_v[1]*rhs._v[2]-_v[2]*rhs._v[1],
                _v[2]*rhs._v[0]-_v[0]*rhs._v[2] ,
                _v[0]*rhs._v[1]-_v[1]*rhs._v[0]);
        }

        /// multiply by scalar
        inline Vec3 operator * (const float& rhs) const
        {
            return Vec3(_v[0]*rhs, _v[1]*rhs, _v[2]*rhs);
        }

        /// unary multiply by scalar
        inline Vec3& operator *= (const float& rhs)
        {
            _v[0]*=rhs;
            _v[1]*=rhs;
            _v[2]*=rhs;
            return *this;
        }

        /// divide by scalar
        inline Vec3 operator / (const float& rhs) const
        {
            return Vec3(_v[0]/rhs, _v[1]/rhs, _v[2]/rhs);
        }

        /// unary divide by scalar
        inline Vec3& operator /= (const float& rhs)
        {
            _v[0]/=rhs;
            _v[1]/=rhs;
            _v[2]/=rhs;
            return *this;
        }

        /// binary vector add
        inline Vec3 operator + (const Vec3& rhs) const
        {
            return Vec3(_v[0]+rhs._v[0], _v[1]+rhs._v[1], _v[2]+rhs._v[2]);
        }

        /** unary vector add.  Slightly more efficient because no temporary
            intermediate object*/
        inline Vec3& operator += (const Vec3& rhs)
        {
            _v[0] += rhs._v[0];
            _v[1] += rhs._v[1];
            _v[2] += rhs._v[2];
            return *this;
        }

        /// binary vector subract
        inline Vec3 operator - (const Vec3& rhs) const
        {
            return Vec3(_v[0]-rhs._v[0], _v[1]-rhs._v[1], _v[2]-rhs._v[2]);
        }

        /// unary vector subract
        inline Vec3& operator -= (const Vec3& rhs)
        {
            _v[0]-=rhs._v[0];
            _v[1]-=rhs._v[1];
            _v[2]-=rhs._v[2];
            return *this;
        }

        /// negation operator.  Returns the negative of the Vec3
        inline Vec3 operator - () const
        {
            return Vec3 (-_v[0], -_v[1], -_v[2]);
        }

        /// Length of the vector = sqrt( vec . vec )
        inline float length( void ) const
        {
            return sqrtf( _v[0]*_v[0] + _v[1]*_v[1] + _v[2]*_v[2] );
        }

        /// Length squared of the vector = vec . vec
        inline float length2( void ) const
        {
            return _v[0]*_v[0] + _v[1]*_v[1] + _v[2]*_v[2];
        }

        /** normalize the vector so that it has length unity
            returns the previous length of the vector*/
        inline float normalize()
        {
            float norm = Vec3::length();
            _v[0] /= norm;
            _v[1] /= norm;
            _v[2] /= norm;
            return( norm );
        }

	friend inline ostream& operator << (ostream& output, const Vec3& vec)
	{
	    output << vec._v[0] << " "
                   << vec._v[1] << " "
                   << vec._v[2];
	    return output; 	// to enable cascading
	}

};	// end of class Vec3

}	// end of namespace osg

#endif
