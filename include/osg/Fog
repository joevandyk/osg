//C++ header - Open Scene Graph - Copyright (C) 1998-2002 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_FOG
#define OSG_FOG 1

#include <osg/StateAttribute>
#include <osg/Types>
#include <osg/Vec4>

#ifndef GL_FOG_COORDINATE
    #define GL_FOG_COORDINATE   0x8451
#endif
#ifndef GL_FRAGMENT_DEPTH
    #define GL_FRAGMENT_DEPTH   0x8452
#endif

namespace osg {


/** Fog - encapsulates OpenGL fog state. */ 
class SG_EXPORT Fog : public StateAttribute
{
    public :

        Fog();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        Fog(const Fog& fog,const CopyOp& copyop=CopyOp::SHALLOW_COPY):
            StateAttribute(fog,copyop),
            _mode(fog._mode),
            _density(fog._density),
            _start(fog._start),
            _end(fog._end),
            _color(fog._color),
            _fogCoordinateSource(fog._fogCoordinateSource) {}

        META_StateAttribute(osg, Fog,FOG);
        
        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(Fog,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_mode)
            COMPARE_StateAttribute_Parameter(_density)
            COMPARE_StateAttribute_Parameter(_start)
            COMPARE_StateAttribute_Parameter(_end)
            COMPARE_StateAttribute_Parameter(_color)
            COMPARE_StateAttribute_Parameter(_fogCoordinateSource)

            return 0; // passed all the above comparison macro's, must be equal.
        }

        virtual void getAssociatedModes(std::vector<GLMode>& modes) const 
        {
            modes.push_back(GL_FOG);
        }

        enum Mode {
            LINEAR = GL_LINEAR,
            EXP    = GL_EXP,
            EXP2   = GL_EXP2
        };

        inline void  setMode( Mode mode )         { _mode = mode; }
        inline Mode getMode() const                     { return _mode; }

        inline void  setDensity( float density )  { _density = density; }
        inline float getDensity() const           { return _density; }

        inline void  setStart( float start )      { _start = start; }
        inline float getStart() const             { return _start; }

        inline void  setEnd( float end )          { _end = end; }
        inline float getEnd() const               { return _end; }

        inline void  setColor( const Vec4 &color )      { _color = color; }
        inline const Vec4& getColor() const             { return _color; }
        
        enum FogCoordinateSource
        {
            FOG_COORDINATE = GL_FOG_COORDINATE,
            FRAGMENT_DEPTH = GL_FRAGMENT_DEPTH
        };
        
        inline void setFogCoordinateSource(GLint source) { _fogCoordinateSource = source; }
        inline GLint getFogCoordinateSource() const { return _fogCoordinateSource; }

        virtual void apply(State& state) const;

    protected :

        virtual ~Fog();

        Mode    _mode;
        float   _density;
        float   _start;
        float   _end;
        Vec4    _color;
        GLint   _fogCoordinateSource;
};

}

#endif
