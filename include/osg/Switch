#ifndef OSG_SWITCH
#define OSG_SWITCH 1

#include <osg/Group>

namespace osg {

/** Switch is a Group node which allows switching between children.
    Typical uses would be for objects which might need to be rendered
    differently at different times, for instance a switch could be used 
    to represent the different states of a traffic light.
*/
class SG_EXPORT Switch : public Group
{
    public :
        
	/**
	 * Special mode values for the Switch. Use these if you want to
	 * turn on/off all child nodes.
	 */
        enum SwitchType {
                /** Turn on all children. */
		ALL_CHILDREN_ON=-1,
                /** Turn off all children. */
		ALL_CHILDREN_OFF=-2
        };

        Switch();

        virtual Object* clone() const { return new Switch(); }
        virtual bool isSameKindAs(const Object* obj) const { return dynamic_cast<const Switch*>(obj)!=NULL; }
        virtual const char* className() const { return "Switch"; }
        virtual void accept(NodeVisitor& nv) { nv.apply(*this); }
        virtual void traverse(NodeVisitor& nv);
        
	/**
	 * Selects the active child Node or enables a special
	 * SwitchType mode. 
         * @param value the number of the active child
	 * (first child == number 0) or SwitchType. Invalid values
	 * will be ignored.
	 */
        inline void setValue(const int value) { _value = value; }
	/**
	 * Returns the number of the active child Node or the SwitchType.
	 */
        inline const int getValue() const { return _value; }

    protected :
    
        virtual ~Switch() {}
        
        /** The current Switch value. */
        int _value;  
};

};

#endif
