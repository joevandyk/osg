/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_PagedLOD
#define OSG_PagedLOD 1

#include <osg/LOD>

namespace osg {

/** PagedLOD.
*/
class SG_EXPORT PagedLOD : public LOD
{
    public :
    
        PagedLOD();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        PagedLOD(const PagedLOD&,const CopyOp& copyop=CopyOp::SHALLOW_COPY);

        META_Node(osg, PagedLOD);
        
        

        virtual void traverse(NodeVisitor& nv);
        
        virtual bool addChild(Node *child);

        virtual bool addChild(Node *child, float min, float max);

        virtual bool addChild(Node *child, float min, float max,const std::string& filename, float priorityOffset=0.0f, float priorityScale=1.0f);

        virtual bool removeChild(Node *child);
        
        
        struct PerRangeData
        {
            PerRangeData():
                _priorityOffset(0.0f),
                _priorityScale(0.0f),
                _timeStamp(0.0f) {}
        
            PerRangeData(const PerRangeData& prd):
                _filename(prd._filename),
                _priorityOffset(prd._priorityOffset),
                _priorityScale(prd._priorityScale),
                _timeStamp(prd._timeStamp) {}

            PerRangeData& operator = (const PerRangeData& prd)
            {
                if (this==&prd) return *this;
                _filename = prd._filename;
                _priorityOffset = prd._priorityOffset;
                _priorityScale = prd._priorityScale;
                _timeStamp = prd._timeStamp;
            }


            std::string _filename;
            float       _priorityOffset;
            float       _priorityScale;
            double      _timeStamp;
        };

        typedef std::vector<PerRangeData> PerRangeDataList;

        void setFileName(unsigned int childNo, const std::string& filename) { expandPerRangeDataTo(childNo); _perRangeDataList[childNo]._filename=filename; }
        const std::string& getFileName(unsigned int childNo) const { return _perRangeDataList[childNo]._filename; }
        unsigned int getNumFileNames() const { return _perRangeDataList.size(); }


        void setPriorityOffset(unsigned int childNo, float priorityOffset) { expandPerRangeDataTo(childNo); _perRangeDataList[childNo]._priorityOffset=priorityOffset; }
        float getPriorityOffset(unsigned int childNo) const { return _perRangeDataList[childNo]._priorityOffset; }
        unsigned int getNumPriorityOffsets() const { return _perRangeDataList.size(); }

        void setPriorityScale(unsigned int childNo, float priorityScale) { expandPerRangeDataTo(childNo); _perRangeDataList[childNo]._priorityScale=priorityScale; }
        float getPriorityScale(unsigned int childNo) const { return _perRangeDataList[childNo]._priorityScale; }
        unsigned int getNumPriorityScales() const { return _perRangeDataList.size(); }


        void setTimeStamp(unsigned int childNo, double timeStamp) { expandPerRangeDataTo(childNo); _perRangeDataList[childNo]._timeStamp=timeStamp; }
        double getTimeStamp(unsigned int childNo) const { return _perRangeDataList[childNo]._timeStamp; }
        unsigned int getNumTimeStamps() const { return _perRangeDataList.size(); }


        /** Set the object-space reference radius of the volume enclosed by the PagedLOD. 
          * Used to detmine the bounding sphere of the PagedLOD in the absense of any children.*/
        inline void setRadius(float radius) { _radius = radius; }
        
        /** Get the object-space radius of the volume enclosed by the PagedLOD.*/
        inline float getRadius() const { return _radius; }


        /** Set the number of children that the PagedLOD must keep around, even if thay are older than their expiry time.*/
        inline void setNumChildrenThatCannotBeExpired(unsigned int num) { _numChildrenThatCannotBeExpired = num; }

        /** Get the number of children that the PagedLOD must keep around, even if thay are older than their expiry time.*/
        unsigned int getNumChildrenThatCannotBeExpired() const { return _numChildrenThatCannotBeExpired; }

        /** Remove the children from the PagedLOD which haven't be visited since specified expiry time.
            The removed children are added the removeChildren list passed into the method,
            this allows the children to be deleted later at the callers discression.*/
        virtual void removeExpiredChildren(double expiryTime,NodeList& removedChildren);

    protected :
    
        virtual ~PagedLOD() {}

        virtual bool computeBound() const;

        virtual void childRemoved(unsigned int pos, unsigned int numChildrenToRemove);
        virtual void childInserted(unsigned int pos);

        virtual void rangeRemoved(unsigned int pos, unsigned int numChildrenToRemove);
        virtual void rangeInserted(unsigned int pos);
        
        void expandPerRangeDataTo(unsigned int pos);

        float           _radius;
        unsigned int    _numChildrenThatCannotBeExpired;

        PerRangeDataList    _perRangeDataList;
};

}

#endif
