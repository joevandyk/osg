//C++ header - Open Scene Graph - Copyright (C) 1998-2001 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_VIEWPORT
#define OSG_VIEWPORT 1

#include <osg/StateAttribute>
#include <osg/StateSet>
#include <osg/Types>

namespace osg {

/** Encapsulte OpenGL glViewport.
*/     
class SG_EXPORT Viewport : public StateAttribute
{
    public :
    
    
        Viewport();

        META_StateAttribute(Viewport,VIEWPORT);
        
        /** return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.*/
        virtual int compare(const StateAttribute& sa) const
        {
            // check the types are equal and then create the rhs variable
            // used by the COMPARE_StateAttribute_Paramter macro's below.
            COMPARE_StateAttribute_Types(Viewport,sa)

            // compare each paramter in turn against the rhs.
            COMPARE_StateAttribute_Parameter(_x)
            COMPARE_StateAttribute_Parameter(_y)
            COMPARE_StateAttribute_Parameter(_width)
            COMPARE_StateAttribute_Parameter(_height)
            
            return 0; // passed all the above comparison macro's, must be equal.
        }

        inline void setViewport(const int x,const int y,const int width,const int height)
        {
            _x = x;
            _y = y;
            _width = width;
            _height = height;
        }
        
        void getViewport(int& x,int& y,int& width,int& height)
        {
            x = _x;
            y = _y;
            width = _width;
            height = _height;
        }

        inline const int x() const { return _x; }
        inline const int y() const { return _y; }
        inline const int width() const { return _width; }
        inline const int height() const { return _height; }

        /** return the aspcetRatio of the viewport, which is equal to width/height.*/
        inline const float aspectRatio() const { return (float)_width/(float)_height; }

        virtual void apply(State& state) const;

    protected:
    
        virtual ~Viewport();

        int _x;
        int _y;
        int _width;
        int _height;

};

};

#endif
