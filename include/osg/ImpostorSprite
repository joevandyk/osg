//C++ header - Open Scene Graph - Copyright (C) 1998-2002 Robert Osfield
//Distributed under the terms of the GNU Library General Public License (LGPL)
//as published by the Free Software Foundation.

#ifndef OSG_ImpostorSprite
#define OSG_ImpostorSprite 1

#include <osg/Vec2>
#include <osg/BoundingSphere>
#include <osg/Drawable>
#include <osg/ImpostorSprite>
#include <osg/AlphaFunc>
#include <osg/TexEnv>

namespace osg {

class Texture2D;
class Impostor;
class ImpostorSpriteManager;

/** An ImposterSprite is a textured quad which is rendered in place a 
  * 3D geometry.  The ImposterSprite is generated by rendering the original
  * 3D geometry to a texture as an image cache. The ImpostorSprite is
  * automatically generated by the osgUtil::CullVisitor so it not
  * necessary to deal with it directly.
  */
class SG_EXPORT ImpostorSprite : public Drawable
{
    public:

        ImpostorSprite();

        /** Clone an object of the same type as an ImpostorSprite.*/
        virtual Object* cloneType() const { return new ImpostorSprite(); }

        /** Clone on ImpostorSprite just returns a clone of type, 
          * since it is not appropriate to share data of an ImpostorSprite.*/
        virtual Object* clone(const CopyOp&) const { return new ImpostorSprite(); }
        virtual bool isSameKindAs(const Object* obj) const { return dynamic_cast<const ImpostorSprite*>(obj)!=NULL; }
        virtual const char* libraryName() const { return "osg"; }
        virtual const char* className() const { return "ImpostorSprite"; }

        /** Set the parent, which must be an Impostor. 
          * Unlike conventional Drawables, ImpostorSprite's can only ever have
          * one parent.
          */
        void setParent(Impostor* parent) { _parent = parent; }

        /** Get the parent, which is an Impostor. */
        Impostor* getParent() { return _parent; }

        /** Get the const parent, which is an Impostor. */
        const Impostor* getParent() const { return _parent; }

        /** Set the eye point for when the ImpsotorSprite was snapped.*/
        inline void setStoredLocalEyePoint(const Vec3& v) { _storedLocalEyePoint=v; }

        /** Get the eye point for when the ImpsotorSprite was snapped.*/
        inline const Vec3& getStoredLocalEyePoint() const { return _storedLocalEyePoint; }
        
        /** Set the frame number for when the ImpostorSprite was last used in rendering.*/
        inline void setLastFrameUsed(int frameNumber) { _lastFrameUsed = frameNumber; }
        
        /** Get the frame number for when the ImpostorSprite was last used in rendering.*/
        inline int getLastFrameUsed() const { return _lastFrameUsed; }
        

        /** Get the coordinates of the corners of the quad.
          * Stored in the order, [0] - top_left, [1] - bottom_left, [2] - bottom_right, [3] - top_left.
          */
        inline Vec3* getCoords() { return _coords; }
        
        /** Get the const coordinates of the corners of the quad.
          */
        inline const Vec3* getCoords() const { return _coords; }



        /** Get the texture coordinates of the corners of the quad.
          * Stored in the order, [0] - top_left, [1] - bottom_left, [2] - bottom_right, [3] - top_left.
          */
        inline Vec2* getTexCoords() { return _texcoords; }
        
        /** Get the const texture coordinates of the corners of the quad.*/
        inline const Vec2* getTexCoords() const { return _texcoords; }

        /** Get the control coordinates of the corners of the quad.
          * The control coordinates are the corners of the quad projected
          * out onto the front face of bounding box which enclosed the impostor
          * geometry when it was pre-rendered into the impostor sprite's texture.
          * At the point of creation/or update of the impostor sprite the control
          * coords will lie on top of the corners of the quad in screen space - with a pixel error
          * or zero.  Once the camera moves relative to the impostor sprite the
          * control coords will no longer lie on top of the corners of the quad in
          * screen space - a pixel error will have accumulated. This pixel error
          * can then be used to determine whether the impostor needs to be updated.
          * Stored in the order, [0] - top_left, [1] - bottom_left, [2] - bottom_right, [3] - top_left.
          */
        inline Vec3* getControlCoords() { return _controlcoords; }
        
        /** Get the const control coordinates of the corners of the quad.*/
        inline const Vec3* getControlCoords() const { return _controlcoords; }


        /** calculate the pixel error value for passing in the ModelViewProjectionWindow transform,
          * which transform local coords into screen space.*/
        float calcPixelError(const Matrix& MVPW) const;

        void setTexture(Texture2D* tex,int s,int t);

        Texture2D* getTexture() { return _texture; }
        const Texture2D* getTexture() const { return _texture; }
        int s() const { return _s; }
        int t() const { return _t; }

        /** draw ImpostorSprite directly. */
        virtual void drawImplementation(State& state) const;

        /** return true, osg::ImpostorSprite does support accept(AttributeFunctor&).*/
        virtual bool supports(AttributeFunctor&) const { return true; }

        /** accept an AttributeFunctor and call its methods to tell it about the interal attributes that this Drawable has.*/
        virtual void accept(AttributeFunctor& af);

        /** return true, osg::ImpostorSprite does support accept(ConstAttributeFunctor&).*/
        virtual bool supports(ConstAttributeFunctor&) const { return true; }

        /** accept an ConstAttributeFunctor and call its methods to tell it about the interal attributes that this Drawable has.*/
        virtual void accept(ConstAttributeFunctor& af) const;

        /** return true, osg::ImpostorSprite does support accept(PrimitiveFunctor&) .*/
        virtual bool supports(PrimitiveFunctor&) const { return true; }

        /** accept a PrimtiveFunctor and call its methods to tell it about the interal primtives that this Drawable has.*/
        virtual void accept(PrimitiveFunctor& pf) const;


    protected:

        ImpostorSprite(const ImpostorSprite&):Drawable() {}
        ImpostorSprite& operator = (const ImpostorSprite&) { return *this;}

        virtual ~ImpostorSprite();

        virtual bool computeBound() const;

        Impostor* _parent;

        friend class osg::ImpostorSpriteManager;

        // support for a double linked list managed by the
        // ImposotorSpriteManager.
        ImpostorSpriteManager*  _ism;
        ImpostorSprite*         _previous;
        ImpostorSprite*         _next;
        
        int _lastFrameUsed;

        Vec3 _storedLocalEyePoint;
        
        Vec3 _coords[4];
        Vec2 _texcoords[4];
        Vec3 _controlcoords[4];
        
        Texture2D* _texture;
        int _s;
        int _t;
        
        
};

/** Helper class for managing the reuse of ImpostorSprite resources.*/
class SG_EXPORT ImpostorSpriteManager : public Referenced
{
    public:
    
        ImpostorSpriteManager();
        
        bool empty() const { return _first==0; }

        ImpostorSprite* first() { return _first; }
        
        ImpostorSprite* last() { return _last; }
        
        void push_back(ImpostorSprite* is);
        
        void remove(ImpostorSprite* is);
        
        ImpostorSprite* createOrReuseImpostorSprite(int s,int t,int frameNumber);
    
    
    protected:


        ~ImpostorSpriteManager();

        ref_ptr<TexEnv>     _texenv;
        ref_ptr<AlphaFunc>  _alphafunc;

        ImpostorSprite*     _first;
        ImpostorSprite*     _last;


};

}

#endif
