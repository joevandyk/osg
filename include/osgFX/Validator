/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
//osgFX - Copyright (C) 2003 Marco Jez

#ifndef OSGFX_VALIDATOR_
#define OSGFX_VALIDATOR_

#include <osgFX/Export>

#include <osg/ref_ptr>
#include <osg/StateAttribute>

#include <vector>

namespace osgFX
{

    // forward declaration
    class Effect;

    /**
     This class is used internally by osgFX::Effect to choose between different
     techniques dynamically. The apply() method will call each technique's
     validate() method and store the results in a buffered array. The Effect
     class will then choose the first technique that could be validated in all
     active rendering contexts.
     */
    class OSGFX_EXPORT Validator: public osg::StateAttribute {
    public:
        Validator();
        Validator(Effect *effect);
        Validator(const Validator &copy, const osg::CopyOp &copyop = osg::CopyOp::SHALLOW_COPY);

        META_StateAttribute(osgFX, Validator, 0x56616C69);

        void apply(osg::State &state) const;

        inline int compare(const osg::StateAttribute &sa) const;

    protected:
        virtual ~Validator() {}
        Validator &operator=(const Validator &) { return *this; }

    private:
        mutable osg::ref_ptr<Effect> effect_;
    };

    // INLINE METHODS

    inline int Validator::compare(const osg::StateAttribute &sa) const
    {
        const Validator *v = dynamic_cast<const Validator *>(&sa);
        if (!v) return -1;

        if (effect_.get() < v->effect_.get()) return -1;
        if (effect_.get() > v->effect_.get()) return 1;

        return 0;
    }

}

#endif
