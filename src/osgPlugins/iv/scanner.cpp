#line 2 "scanner.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

#if !defined(_MSC_VER)
    #include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
static yyconst short int yy_accept[254] =
    {   0,
       33,   33,    0,    0,   33,   33,   36,   35,    1,    2,
        1,   33,   35,   25,   33,    1,   33,   29,   33,   33,
       33,   33,   33,   33,   33,   31,   21,   33,   33,   33,
       33,   33,   33,   31,   35,   30,    0,    0,   33,    0,
       34,   25,   25,   25,   33,   29,   26,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   32,   33,   33,
       33,   33,   33,   33,   30,   20,   25,   25,   26,   33,
        0,   33,   33,    3,   33,   33,   33,   33,   33,   33,
       22,   33,   33,   33,   33,   33,   33,   25,   25,    0,
       33,   28,   28,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   25,   25,   27,
       27,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   15,   33,   33,   25,   25,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   14,   33,   33,   19,
       25,   25,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   25,   25,   33,   33,   33,    7,   33,
       33,    5,   33,   33,   13,   33,   33,   33,   25,   25,
       33,   33,   33,   33,    6,   33,   11,   33,   33,   33,
       25,   25,   33,   33,   33,   33,   33,   16,   33,   33,
       25,   25,    4,   33,   33,   33,   33,   18,   33,   25,

       25,   33,   33,   33,   33,   33,   25,   25,   33,   33,
       33,   33,   33,   25,    0,   25,    8,   33,   33,   33,
       33,   25,    0,   25,   33,   12,   33,   33,   25,    0,
       23,   33,   33,   33,   25,    0,   33,   33,   17,   25,
        0,   33,   10,   25,    0,   33,   24,   24,   33,   33,
       33,    9,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    1,    1,    1,
        1,    9,   10,   11,   12,   13,    1,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,    1,    1,    1,
        1,    1,    1,    1,    9,    9,   19,   20,   21,   22,
        9,    9,   23,    9,    9,   24,   25,    9,    9,    9,
        9,   26,   27,   28,   29,   30,    9,    9,    9,    9,
       31,    1,   32,    1,    9,    1,   33,    9,   34,   35,

       36,   37,   38,    9,   39,    9,    9,   40,   41,   42,
       43,   44,    9,   45,   46,   47,   48,   49,   50,   51,
        9,    9,   52,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    2,    3,    4,    5,    1,    1,    5,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1
    } ;

static yyconst short int yy_base[261] =
    {   0,
        0,    0,   51,  102,  154,  206,  236, 1405, 1405, 1405,
       53,    0,  227,   34,   65, 1405,  254,   59,   68,   81,
       84,  116,  132,  138,  119,  187, 1405,  135,  166,  187,
      189,  216,  218, 1405,  225,  247,   54,  183,    0,  205,
     1405,    0,  163,  178,  122,   87,  259,  276,  278,  222,
      220,  287,  291,  293,  297,  306,  310, 1405,  320,  333,
      337,  342,  347,  352,  373,  378,  154,  176,  385,   65,
      393,  398,  412,  366,  414,  417,  423,  427,  429,  446,
      433,  462,  473,  475,  477,  479,  489,  162,  172,  482,
      497,  507,  513,  527,  529,  532,  542,  538,  544,  548,

      559,  565,  580,  582,  596,  599,  601,  149,  185,  606,
      619,  633,  635,  644,  646,  648,  657,  663,  679,  685,
      690,  699,  712,  714,  718,  142,  157,  723,  727,  742,
      729,  761,  763,  766,  775,  772,  785,  799,  812,  814,
      141,  167,  818,  828,  823,  833,  852,  855,  867,  871,
      876,  886,  891,  136,  167,  888,  903,  908,  918,  924,
      920,  935,  937,  941,  939,  954,  956,  958,  172,  162,
      968,  971,  987,  990, 1002, 1004, 1006, 1017, 1023, 1033,
      145,  168, 1036, 1038, 1050, 1060, 1065, 1074, 1080, 1084,
      154,  134, 1089, 1094, 1103, 1113, 1117, 1122, 1127,  147,

      106, 1133, 1136, 1150, 1155, 1160,  138,  105, 1165, 1171,
     1174, 1184, 1193,  131,  126,   91, 1203, 1208, 1212, 1217,
     1223,   77,   76,   62, 1232, 1236, 1251, 1255,   52,   47,
        0, 1264, 1266, 1268,   58,   57, 1270, 1287, 1283,   49,
       40, 1299, 1303,   37,   22, 1315,    0, 1405, 1318, 1320,
     1330, 1334, 1405, 1377, 1382,   55, 1387, 1392, 1394, 1399
    } ;

static yyconst short int yy_def[261] =
    {   0,
      253,    1,  254,  254,  255,  255,  253,  253,  253,  253,
      253,  256,  257,  258,  259,  253,  259,   17,  259,  259,
      259,  259,  259,  259,  259,  253,  253,  259,  259,  259,
      259,  259,  259,  253,  253,  253,  253,  253,  256,  257,
      253,  258,  258,  258,  259,   17,  256,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  253,  259,  259,
      259,  259,  259,  259,  253,  253,  258,  258,  256,  256,
      253,   17,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  258,  258,  253,
      256,  253,   17,  259,  259,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  258,  258,  253,
      256,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  258,  258,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  258,  258,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  258,  258,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  259,
      258,  258,  259,  259,  259,  259,  259,  259,  259,  258,

      258,  259,  259,  259,  259,  259,  260,  258,  259,  259,
      259,  259,  259,  258,  253,  258,  259,  259,  259,  259,
      259,  258,  253,  258,  259,  259,  259,  259,  258,  253,
      258,  259,  259,  259,  258,  253,  259,  259,  259,  258,
      253,  259,  259,  258,  253,  259,  258,  253,  259,  259,
      259,  259,    0,  253,  253,  253,  253,  253,  253,  253
    } ;

static yyconst short int yy_nxt[1458] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,    8,
       16,   17,   12,   18,   18,   18,   18,   18,   19,   20,
       15,   15,   21,   15,   22,   15,   23,   24,   25,   15,
       26,   27,   15,   28,   15,   15,   15,   15,   15,   15,
       29,   30,   15,   31,   15,   15,   32,   15,   33,   15,
       15,   34,    9,   10,    9,    9,   43,   37,   37,   39,
      248,   16,   35,   44,   36,   36,   36,   36,   36,   37,
       39,   47,   37,   39,   90,  247,   91,   39,  245,   48,
       39,   34,   27,   38,   38,   37,   39,  244,   37,   39,
      241,  240,  236,   39,   48,   38,   39,  235,   38,   47,

      231,   50,   34,    9,   10,    9,    9,   48,  230,  229,
       49,   38,   16,   35,   38,   36,   36,   36,   36,   36,
       37,   39,   48,   37,   39,   51,   37,   39,   39,  224,
      223,   39,   34,   27,   39,  222,   37,   39,  216,   37,
       39,  215,   37,   39,   39,   57,   38,   39,   52,   38,
       39,  208,   38,   34,    8,    8,    8,    8,    8,  207,
        8,    8,   38,    8,    8,   38,  201,   53,   38,  200,
       37,   39,  192,   54,  191,  182,  181,   59,   39,  170,
      169,  155,   55,  154,    8,    8,  142,   56,  141,  127,
      126,   37,   39,   37,   39,  109,   38,  108,   60,   39,

       89,   39,   88,   68,   67,    8,    8,    8,    8,    8,
        8,   41,    8,    8,   58,    8,    8,   38,   58,   38,
       37,   39,   37,   39,   37,   39,   37,   39,   39,   61,
       39,   62,   39,   41,   39,  253,    8,    8,   65,   66,
       65,   65,   65,   74,  253,  253,   38,  253,   38,  253,
       38,   63,   38,   64,   75,  253,  253,    8,   37,   39,
       65,   65,   65,   65,   65,  253,   39,   46,   46,   46,
       46,   46,   69,   69,   69,   69,   69,  253,  253,   70,
       37,   39,   37,   39,   38,   71,  253,   72,   39,  253,
       39,   37,   39,  253,   70,   37,   39,   37,   39,   39,

      253,   37,   39,   39,  253,   39,   38,  253,   38,   39,
       37,   39,  253,  253,   37,   39,  253,   38,   39,  253,
       73,   38,   39,   38,   37,   39,  253,   38,  253,   79,
       81,  253,   39,   76,   77,  253,   38,   37,   39,  253,
       38,   37,   39,   78,  253,   39,   37,   39,   80,   39,
       38,   37,   39,  253,   39,  253,   37,   39,  253,   39,
      253,  253,   82,   38,   39,  253,  253,   38,  253,  253,
       37,   39,   38,  253,  253,  253,  253,   38,   39,   83,
       85,   84,   38,  253,  253,   87,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   38,   86,   69,   69,

       69,   69,   69,  253,  253,   70,   92,   92,   92,   92,
       92,   93,   93,   93,   93,   93,   37,   39,   37,   39,
       70,   37,   39,  253,   39,  253,   39,   37,   39,   39,
      253,   37,   39,   37,   39,   39,  253,   37,   39,   39,
      253,   39,   38,  253,   38,   39,  253,   38,  253,   95,
       37,   39,   96,   38,  253,   98,   94,   38,   39,   38,
      253,   97,  253,   38,  253,  253,   37,   39,  253,  253,
      100,  253,  101,   99,   39,  253,   38,   37,   39,   37,
       39,   37,   39,   37,   39,   39,  253,   39,  253,   39,
      253,   39,   38,   37,   39,  110,  110,  110,  110,  110,

      253,   39,  253,   38,  253,   38,  102,   38,  253,   38,
      111,  111,  111,  111,  111,  104,  253,  103,  105,   38,
       92,   92,   92,   92,   92,  106,   93,   93,   93,   93,
       93,   37,   39,   37,   39,  107,   37,   39,  253,   39,
      253,   39,   37,   39,   39,  253,   37,   39,   37,   39,
       39,  253,   37,   39,   39,  253,   39,   38,  253,   38,
       39,  112,   38,   37,   39,  253,  253,  253,   38,   37,
       39,   39,   38,  253,   38,  253,  114,   39,   38,  113,
      115,  253,  116,  253,   37,   39,   37,   39,  253,   38,
      253,  117,   39,  118,   39,   38,  253,  119,  253,  120,

       37,   39,  253,   37,   39,   37,   39,  253,   39,  253,
       38,   39,   38,   39,  122,  253,  253,  253,  121,  110,
      110,  110,  110,  110,  253,  253,   38,  253,  253,   38,
      253,   38,  111,  111,  111,  111,  111,   37,   39,   37,
       39,  253,  123,  125,  253,   39,  124,   39,   37,   39,
       37,   39,   37,   39,  253,  253,   39,  253,   39,  253,
       39,   37,   39,   38,  253,   38,  253,   37,   39,   39,
      129,  128,  253,  253,   38,   39,   38,  253,   38,  253,
      132,  253,  130,   37,   39,  253,  253,   38,  253,   37,
       39,   39,  253,   38,   37,   39,  131,   39,  253,  134,

      253,  133,   39,   37,   39,  253,  253,  136,  253,   38,
      253,   39,  253,  135,  253,   38,   37,   39,   37,   39,
       38,  253,   37,   39,   39,  253,   39,   37,   39,   38,
       39,   37,   39,   37,   39,   39,  253,  253,  138,   39,
      137,   39,   38,  253,   38,  253,   37,   39,   38,  253,
      253,  253,  253,   38,   39,  253,  146,   38,  139,   38,
      253,  144,  140,  253,  143,   37,   39,   37,   39,  253,
       37,   39,   38,   39,  145,   39,   37,   39,   39,   37,
       39,  253,  253,  253,   39,  253,  253,   39,  253,   37,
       39,   38,  253,   38,  253,  253,   38,   39,  148,  253,

      253,  253,   38,   37,   39,   38,  253,  147,  149,  253,
      150,   39,  253,  151,  253,   38,   37,   39,   37,   39,
      253,  152,   37,   39,   39,  253,   39,   37,   39,   38,
       39,  253,   37,   39,  253,   39,  253,   37,   39,  253,
       39,  253,   38,  253,   38,   39,  253,  153,   38,  157,
      156,  253,  253,   38,  253,  158,   37,   39,   38,   37,
       39,  253,  159,   38,   39,  253,  253,   39,  253,  253,
      162,   37,   39,  163,  253,   37,   39,  160,  253,   39,
       37,   39,   38,   39,  253,   38,  253,  253,   39,  253,
       37,   39,   37,   39,  161,   37,   39,   38,   39,  253,

       39,   38,  253,   39,  253,  165,   38,   37,   39,  168,
      166,  164,   37,   39,  253,   39,   38,  253,   38,  253,
       39,   38,   37,   39,   37,   39,  253,  167,   37,   39,
       39,  253,   39,   38,  171,  172,   39,  253,   38,   37,
       39,   37,   39,   37,   39,   37,   39,   39,   38,   39,
       38,   39,  173,   39,   38,  253,  174,  253,   37,   39,
       37,   39,   37,   39,  175,   38,   39,   38,   39,   38,
       39,   38,   37,   39,  253,   37,   39,  253,  253,  176,
       39,  177,  253,   39,   38,  253,   38,  253,   38,  178,
      179,   37,   39,  253,   37,   39,  253,  253,   38,   39,

      180,   38,   39,  183,  184,  253,   37,   39,   37,   39,
       37,   39,  253,  253,   39,  253,   39,   38,   39,  253,
       38,   37,   39,  253,  253,  185,  253,   37,   39,   39,
      253,  186,   38,  253,   38,   39,   38,   37,   39,  253,
       37,   39,   37,   39,  253,   39,  187,   38,   39,  253,
       39,  253,  193,   38,   37,   39,  253,  253,  189,  253,
      253,  253,   39,   38,   37,   39,   38,  188,   38,   37,
       39,  253,   39,  194,  253,  190,  253,   39,   37,   39,
       38,  253,  195,  253,   37,   39,   39,  253,   37,   39,
       38,  253,   39,   37,   39,   38,   39,  253,   37,   39,

      253,   39,  253,  253,   38,  196,   39,   37,   39,  197,
       38,  253,  253,  253,   38,   39,  253,   37,   39,   38,
      202,   37,   39,  253,   38,   39,   37,   39,  199,   39,
      198,   37,   39,   38,   39,  253,  253,   37,   39,   39,
       37,   39,  253,   38,  203,   39,  253,   38,   39,  204,
      253,  205,   38,  253,   37,   39,  253,   38,  253,   37,
       39,  206,   39,   38,   37,   39,   38,   39,  209,   37,
       39,  253,   39,  210,  253,   37,   39,   39,   37,   39,
       38,  253,  213,   39,  253,   38,   39,  253,   37,   39,
       38,  253,  211,  212,  253,   38,   39,   37,   39,  253,

      253,   38,  253,  253,   38,   39,  253,   37,   39,  253,
      218,  217,   37,   39,   38,   39,   37,   39,  219,  253,
       39,   37,   39,   38,   39,  220,  253,   37,   39,   39,
      253,  253,  253,   38,  221,   39,   37,   39,   38,  253,
       37,   39,   38,  225,   39,  253,  253,   38,   39,  227,
      253,  253,  226,   38,  253,   37,   39,  228,  232,   37,
       39,  253,   38,   39,  253,  253,   38,   39,   37,   39,
       37,   39,   37,   39,   37,   39,   39,  253,   39,  253,
       39,   38,   39,  253,  253,   38,  253,   37,   39,  253,
      234,   37,   39,  253,   38,   39,   38,  233,   38,   39,

       38,  238,  243,   37,   39,  253,  253,   37,   39,  253,
      237,   39,  253,   38,  242,   39,  253,   38,  239,   37,
       39,  253,   37,   39,   37,   39,  253,   39,  253,   38,
       39,  253,   39,   38,   37,   39,  253,  246,   37,   39,
      253,  253,   39,  253,  250,   38,   39,  253,   38,  253,
       38,  253,  253,  253,  253,  251,  253,  253,  249,  253,
       38,  253,  253,  253,   38,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  252,    8,    8,    8,
        8,    8,   12,   12,   12,   12,   12,   40,   40,   40,
       40,   40,   42,  253,  253,   42,   42,   45,   45,  214,

      253,  214,  214,  214,    7,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253
    } ;

static yyconst short int yy_chk[1458] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,   14,   11,   37,  256,
      245,    3,    3,   14,    3,    3,    3,    3,    3,   15,
       15,   18,   19,   19,   70,  244,   70,   15,  241,   18,
       19,    3,    3,   11,   37,   20,   20,  240,   21,   21,
      236,  235,  230,   20,   18,   15,   21,  229,   19,   46,

      224,   20,    3,    4,    4,    4,    4,   46,  223,  222,
       19,   20,    4,    4,   21,    4,    4,    4,    4,    4,
       22,   22,   46,   25,   25,   21,   45,   45,   22,  216,
      215,   25,    4,    4,   45,  214,   23,   23,  208,   28,
       28,  207,   24,   24,   23,   25,   22,   28,   22,   25,
       24,  201,   45,    4,    5,    5,    5,    5,    5,  200,
        5,    5,   23,    5,    5,   28,  192,   23,   24,  191,
       29,   29,  182,   24,  181,  170,  169,   28,   29,  155,
      154,  142,   24,  141,    5,    5,  127,   24,  126,  109,
      108,   30,   30,   31,   31,   89,   29,   88,   29,   30,

       68,   31,   67,   44,   43,    5,    6,    6,    6,    6,
        6,   40,    6,    6,   38,    6,    6,   30,   26,   31,
       32,   32,   33,   33,   51,   51,   50,   50,   32,   30,
       33,   31,   51,   13,   50,    7,    6,    6,   35,   35,
       35,   35,   35,   50,    0,    0,   32,    0,   33,    0,
       51,   32,   50,   33,   51,    0,    0,    6,   17,   17,
       36,   36,   36,   36,   36,    0,   17,   17,   17,   17,
       17,   17,   47,   47,   47,   47,   47,    0,    0,   47,
       48,   48,   49,   49,   17,   48,    0,   48,   48,    0,
       49,   52,   52,    0,   47,   53,   53,   54,   54,   52,

        0,   55,   55,   53,    0,   54,   48,    0,   49,   55,
       56,   56,    0,    0,   57,   57,    0,   52,   56,    0,
       49,   53,   57,   54,   59,   59,    0,   55,    0,   55,
       57,    0,   59,   52,   53,    0,   56,   60,   60,    0,
       57,   61,   61,   54,    0,   60,   62,   62,   56,   61,
       59,   63,   63,    0,   62,    0,   64,   64,    0,   63,
        0,    0,   59,   60,   64,    0,    0,   61,    0,    0,
       74,   74,   62,    0,    0,    0,    0,   63,   74,   60,
       62,   61,   64,    0,    0,   64,   65,   65,   65,   65,
       65,   66,   66,   66,   66,   66,   74,   63,   69,   69,

       69,   69,   69,    0,    0,   69,   71,   71,   71,   71,
       71,   72,   72,   72,   72,   72,   73,   73,   75,   75,
       69,   76,   76,    0,   73,    0,   75,   77,   77,   76,
        0,   78,   78,   79,   79,   77,    0,   81,   81,   78,
        0,   79,   73,    0,   75,   81,    0,   76,    0,   75,
       80,   80,   76,   77,    0,   77,   73,   78,   80,   79,
        0,   76,    0,   81,    0,    0,   82,   82,    0,    0,
       79,    0,   80,   78,   82,    0,   80,   83,   83,   84,
       84,   85,   85,   86,   86,   83,    0,   84,    0,   85,
        0,   86,   82,   87,   87,   90,   90,   90,   90,   90,

        0,   87,    0,   83,    0,   84,   82,   85,    0,   86,
       91,   91,   91,   91,   91,   84,    0,   83,   85,   87,
       92,   92,   92,   92,   92,   86,   93,   93,   93,   93,
       93,   94,   94,   95,   95,   87,   96,   96,    0,   94,
        0,   95,   98,   98,   96,    0,   97,   97,   99,   99,
       98,    0,  100,  100,   97,    0,   99,   94,    0,   95,
      100,   94,   96,  101,  101,    0,    0,    0,   98,  102,
      102,  101,   97,    0,   99,    0,   96,  102,  100,   95,
       97,    0,   98,    0,  103,  103,  104,  104,    0,  101,
        0,   99,  103,  100,  104,  102,    0,  101,    0,  102,

      105,  105,    0,  106,  106,  107,  107,    0,  105,    0,
      103,  106,  104,  107,  104,    0,    0,    0,  103,  110,
      110,  110,  110,  110,    0,    0,  105,    0,    0,  106,
        0,  107,  111,  111,  111,  111,  111,  112,  112,  113,
      113,    0,  105,  107,    0,  112,  106,  113,  114,  114,
      115,  115,  116,  116,    0,    0,  114,    0,  115,    0,
      116,  117,  117,  112,    0,  113,    0,  118,  118,  117,
      113,  112,    0,    0,  114,  118,  115,    0,  116,    0,
      116,    0,  114,  119,  119,    0,    0,  117,    0,  120,
      120,  119,    0,  118,  121,  121,  115,  120,    0,  118,

        0,  117,  121,  122,  122,    0,    0,  120,    0,  119,
        0,  122,    0,  119,    0,  120,  123,  123,  124,  124,
      121,    0,  125,  125,  123,    0,  124,  128,  128,  122,
      125,  129,  129,  131,  131,  128,    0,    0,  122,  129,
      121,  131,  123,    0,  124,    0,  130,  130,  125,    0,
        0,    0,    0,  128,  130,    0,  131,  129,  124,  131,
        0,  129,  125,    0,  128,  132,  132,  133,  133,    0,
      134,  134,  130,  132,  130,  133,  136,  136,  134,  135,
      135,    0,    0,    0,  136,    0,    0,  135,    0,  137,
      137,  132,    0,  133,    0,    0,  134,  137,  133,    0,

        0,    0,  136,  138,  138,  135,    0,  132,  134,    0,
      135,  138,    0,  136,    0,  137,  139,  139,  140,  140,
        0,  138,  143,  143,  139,    0,  140,  145,  145,  138,
      143,    0,  144,  144,    0,  145,    0,  146,  146,    0,
      144,    0,  139,    0,  140,  146,    0,  139,  143,  144,
      143,    0,    0,  145,    0,  144,  147,  147,  144,  148,
      148,    0,  145,  146,  147,    0,    0,  148,    0,    0,
      148,  149,  149,  148,    0,  150,  150,  146,    0,  149,
      151,  151,  147,  150,    0,  148,    0,    0,  151,    0,
      152,  152,  156,  156,  147,  153,  153,  149,  152,    0,

      156,  150,    0,  153,    0,  150,  151,  157,  157,  153,
      151,  149,  158,  158,    0,  157,  152,    0,  156,    0,
      158,  153,  159,  159,  161,  161,    0,  152,  160,  160,
      159,    0,  161,  157,  156,  157,  160,    0,  158,  162,
      162,  163,  163,  165,  165,  164,  164,  162,  159,  163,
      161,  165,  158,  164,  160,    0,  160,    0,  166,  166,
      167,  167,  168,  168,  161,  162,  166,  163,  167,  165,
      168,  164,  171,  171,    0,  172,  172,    0,    0,  163,
      171,  164,    0,  172,  166,    0,  167,    0,  168,  166,
      167,  173,  173,    0,  174,  174,    0,    0,  171,  173,

      168,  172,  174,  171,  172,    0,  175,  175,  176,  176,
      177,  177,    0,    0,  175,    0,  176,  173,  177,    0,
      174,  178,  178,    0,    0,  173,    0,  179,  179,  178,
        0,  174,  175,    0,  176,  179,  177,  180,  180,    0,
      183,  183,  184,  184,    0,  180,  176,  178,  183,    0,
      184,    0,  183,  179,  185,  185,    0,    0,  179,    0,
        0,    0,  185,  180,  186,  186,  183,  178,  184,  187,
      187,    0,  186,  184,    0,  180,    0,  187,  188,  188,
      185,    0,  185,    0,  189,  189,  188,    0,  190,  190,
      186,    0,  189,  193,  193,  187,  190,    0,  194,  194,

        0,  193,    0,    0,  188,  186,  194,  195,  195,  187,
      189,    0,    0,    0,  190,  195,    0,  196,  196,  193,
      194,  197,  197,    0,  194,  196,  198,  198,  190,  197,
      189,  199,  199,  195,  198,    0,    0,  202,  202,  199,
      203,  203,    0,  196,  195,  202,    0,  197,  203,  196,
        0,  197,  198,    0,  204,  204,    0,  199,    0,  205,
      205,  199,  204,  202,  206,  206,  203,  205,  202,  209,
      209,    0,  206,  203,    0,  210,  210,  209,  211,  211,
      204,    0,  206,  210,    0,  205,  211,    0,  212,  212,
      206,    0,  204,  205,    0,  209,  212,  213,  213,    0,

        0,  210,    0,    0,  211,  213,    0,  217,  217,    0,
      210,  209,  218,  218,  212,  217,  219,  219,  211,    0,
      218,  220,  220,  213,  219,  212,    0,  221,  221,  220,
        0,    0,    0,  217,  213,  221,  225,  225,  218,    0,
      226,  226,  219,  218,  225,    0,    0,  220,  226,  220,
        0,    0,  219,  221,    0,  227,  227,  221,  225,  228,
      228,    0,  225,  227,    0,    0,  226,  228,  232,  232,
      233,  233,  234,  234,  237,  237,  232,    0,  233,    0,
      234,  227,  237,    0,    0,  228,    0,  239,  239,    0,
      228,  238,  238,    0,  232,  239,  233,  227,  234,  238,

      237,  233,  238,  242,  242,    0,    0,  243,  243,    0,
      232,  242,    0,  239,  237,  243,    0,  238,  234,  246,
      246,    0,  249,  249,  250,  250,    0,  246,    0,  242,
      249,    0,  250,  243,  251,  251,    0,  242,  252,  252,
        0,    0,  251,    0,  249,  246,  252,    0,  249,    0,
      250,    0,    0,    0,    0,  250,    0,    0,  246,    0,
      251,    0,    0,    0,  252,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  251,  254,  254,  254,
      254,  254,  255,  255,  255,  255,  255,  257,  257,  257,
      257,  257,  258,    0,    0,  258,  258,  259,  259,  260,

        0,  260,  260,  260,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define INITIAL 0
#line 2 "scanner.l"
/*
 * osgDB::wrl - a VRML 1.0 loader for OpenSceneGraph
 * Copyright (C) 2002 Ruben Lopez <ryu@gpul.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#include "mynode.h"
#include "geometry.h"
#include "parser.hpp"
#include <string.h>
int yyline=1;
#define cindex 1

#define def 2

#line 798 "scanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp=NULL, *yy_bp=NULL;
	register int yy_act;

#line 30 "scanner.l"

#line 962 "scanner.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 254 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1405 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "scanner.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "scanner.l"
{ yyline++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 33 "scanner.l"
{ BEGIN def;return DEF; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 34 "scanner.l"
{ return COORDINATE3; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 35 "scanner.l"
{ return TEXTURE2; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 36 "scanner.l"
{ return SEPARATOR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 37 "scanner.l"
{ return UN_MATERIAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 38 "scanner.l"
{ return INDEXED_FACE_SET; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 39 "scanner.l"
{ return INDEXED_TRIANGLE_STRIP_SET; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 40 "scanner.l"
{ return TEXTURE_COORDINATE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 41 "scanner.l"
{ return TRANSFORM; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 "scanner.l"
{ return MATRIX_TRANSFORM; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 43 "scanner.l"
{ return TWO_SIDED; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 44 "scanner.l"
{ return MATRIX; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 45 "scanner.l"
{ return A_POINT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 46 "scanner.l"
{ BEGIN cindex;return COORD_INDEX; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "scanner.l"
{ BEGIN cindex;return TEXTURE_COORD_INDEX; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "scanner.l"
{ BEGIN cindex;return NORMAL_INDEX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "scanner.l"
{ return VECTOR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "scanner.l"
{ return FINPOLY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "scanner.l"
{ BEGIN INITIAL; return ']'; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "scanner.l"
{ BEGIN def;return USE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "scanner.l"
{ return VRML_HEADER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "scanner.l"
{ return VRML_HEADER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "scanner.l"

	YY_BREAK
case 26:
YY_RULE_SETUP
#line 56 "scanner.l"
{
    yylval.f_value=strtod(yytext,NULL);
    return FLOAT;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 60 "scanner.l"
{
    yylval.f_value=strtod(yytext,NULL);
    return FLOAT;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 64 "scanner.l"
{
    yylval.f_value=strtod(yytext,NULL);
    return FLOAT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 68 "scanner.l"
{
    yylval.f_value=(float)strtol(yytext,NULL,10);
    return FLOAT;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "scanner.l"
{
    yylval.i_value=strtol(yytext,NULL,10);
    return INT;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "scanner.l"
{ return yytext[0]; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "scanner.l"

	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "scanner.l"
{ BEGIN INITIAL;yylval.s_value=strdup(yytext);return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "scanner.l"
{ yylval.s_value=strdup(yytext+1);yylval.s_value[strlen(yylval.s_value)-1]=0;return QUOTED_STRING; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 81 "scanner.l"
ECHO;
	YY_BREAK
#line 1235 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(cindex):
case YY_STATE_EOF(def):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 254 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 254 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 253);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 81 "scanner.l"


int yywrap(void)
{
return (1);
}
