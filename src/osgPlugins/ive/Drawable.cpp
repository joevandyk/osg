/**********************************************************************
 *
 *	FILE:			Drawable.cpp
 *
 *	DESCRIPTION:	Read/Write osg::Drawable in binary format to disk.
 *
 *	CREATED BY:		Auto generated by iveGenerated
 *					and later modified by Rune Schmidt Jensen.
 *
 *	HISTORY:		Created 18.3.2003
 *
 *	Copyright 2003 VR-C
 **********************************************************************/

#include "Exception.h"
#include "Drawable.h"
#include "Object.h"
#include "StateSet.h"


using namespace ive;

void Drawable::write(DataOutputStream* out){
	// Write Drawable's identification.
	out->writeInt(IVEDRAWABLE);
	// If the osg class is inherited by any other class we should also write this to file.
	osg::Object*  obj = dynamic_cast<osg::Object*>(this);
	if(obj){
		((ive::Object*)(obj))->write(out);
	}
	else
		throw Exception("Drawable::write(): Could not cast this osg::Drawable to an osg::Object.");

	// Write Drawable's properties.
	
	// Write stateset.
	out->writeInt((int)getStateSet());
	if(getStateSet())
		out->writeStateSet(getStateSet());
 
	// Write shape
	out->writeInt((int)getShape());
    if (getShape()){
		//static_cast<Shape*>(getShape())->write(out);
	}

	// Write support display list.
	out->writeBool(getSupportsDisplayList());

	// Write use display list.
	out->writeBool(getUseDisplayList());

}

void Drawable::read(DataInputStream* in){
	// Read Drawable's identification.
	int id = in->peekInt();
	if(id == IVEDRAWABLE){
		// Code to read Drawable's properties.
		id = in->readInt();
		// If the osg class is inherited by any other class we should also read this from file.
		osg::Object*  obj = dynamic_cast<osg::Object*>(this);
		if(obj){
			((ive::Object*)(obj))->read(in);
		}
		else
			throw Exception("Drawable::read(): Could not cast this osg::Drawable to an osg::Object.");

		// Read in drawable's properties

		// Read stateset if any
		if(in->readInt()){
			setStateSet(in->readStateSet());
		}

		// Read shape if any
		if(in->readInt()){
			//osg::Shape* shape = new osg::Shape();
			//static_cast<Shape*>(shape)->read(in);
			//setShape(shape);
		}

		// Read support display list
		setSupportsDisplayList(in->readBool());

		// Read use display list
		setUseDisplayList(in->readBool());

	}
	else{
		throw Exception("Drawable::read(): Expected Drawable identification.");
	}
}
