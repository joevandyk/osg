/**********************************************************************
 *
 *    FILE:            ProxyNode.cpp
 *
 *    DESCRIPTION:    Read/Write osg::ProxyNode in binary format to disk.
 *
 *    CREATED BY:        Auto generated by iveGenerate
 *                    and later modified by Rune Schmidt Jensen.
 *
 *    HISTORY:        Created 24.3.2003
 *
 *    Copyright 2003 VR-C
 **********************************************************************/

#include <osgDB/WriteFile>
#include <osgDB/ReadFile>
#include <osgDB/FileNameUtils>

#include "Exception.h"
#include "ProxyNode.h"
#include "Group.h"

using namespace ive;


void ProxyNode::write(DataOutputStream* out)
{
    // Write ProxyNode's identification.
    out->writeInt(IVEPROXYNODE);

    // If the osg class is inherited by any other class we should also write this to file.
    osg::Group* node = dynamic_cast<osg::Group*>(this);
    if(node)
    {
        static_cast<ive::Group*>(node)->write(out);
    }
    else throw Exception("PagedLOD::write(): Could not cast this osg::PagedLOD to an osg::LOD.");

    if ( out->getVersion() > VERSION_0006 ) 
    {
        out->writeString(getDatabasePath());
    }

    out->writeFloat(getRadius());
    out->writeInt(getCenterMode());
    out->writeVec3(getCenter());

    if(out->getIncludeExternalReferences()) // inlined mode
    {
        out->writeUInt(getNumChildren());
        unsigned int i;
        for(i=0; i<getNumChildren(); i++)
        {
            out->writeNode(getChild(i));
        }
        out->writeUInt(getNumFileNames());
        for(i=0; i<getNumFileNames(); i++)
        {
            out->writeString(getFileName(i));
        }
    }
    else //no inlined mode
    {
        unsigned int numChildrenToWriteOut = 0;
        unsigned int i;
        for(i=0; i<getNumFileNames();++i)
        {
            if (getFileName(i).empty())
            {
                ++numChildrenToWriteOut;
            }
        }

        out->writeUInt(numChildrenToWriteOut);
        for(i=0; i<getNumChildren(); i++)
        {
            if (getFileName(i).empty())
            {
                out->writeNode(getChild(i));
            }
        }

        out->writeUInt(getNumFileNames());
        for(i=0; i<getNumFileNames(); i++)
        {
            if(out->getUseOriginalExternalReferences())
            {
                out->writeString(getFileName(i));
            }
            else
            {
                std::string ivename = osgDB::getFilePath(getFileName(i)) +"/"+ osgDB::getStrippedName(getFileName(i)) +".ive";
                out->writeString(ivename);

                if(out->getWriteExternalReferenceFiles())
                {
                    std::string path = getDatabasePath();
                    if (path.empty() && out->getOptions() && !out->getOptions()->getDatabasePathList().empty())
                        path = out->getOptions()->getDatabasePathList().front();
                    if(!path.empty()) path += "/";
                    ivename = path + ivename;
                    osgDB::writeNodeFile(*getChild(i), ivename);
                }
            }
        }
    }
}

void ProxyNode::read(DataInputStream* in)
{
    // Peek on ProxyNode's identification.
    int id = in->peekInt();
    if(id == IVEPROXYNODE)
    {
        // Read ProxyNode's identification.
        id = in->readInt();
        // If the osg class is inherited by any other class we should also read this from file.
        osg::Group* node = dynamic_cast<osg::Group*>(this);
        if(node)
        {
            ((ive::Group*)(node))->read(in);
        }
        else
            throw Exception("Group::read(): Could not cast this osg::Group to an osg::Node.");


        if ( in->getVersion() > VERSION_0006 ) 
        {
            setDatabasePath(in->readString());
        }

        if (getDatabasePath().empty() && in->getOptions() && !in->getOptions()->getDatabasePathList().empty())
        {
            const std::string& path = in->getOptions()->getDatabasePathList().front();
            if (!path.empty()) 
            {
                setDatabasePath(path);
            }
        }

        setRadius(in->readFloat());
        setCenterMode((osg::ProxyNode::CenterMode)in->readInt());
        setCenter(in->readVec3());

        // Read groups properties.
        // Read number of children.
        unsigned int size = in->readUInt();
        // Read children.
        unsigned int i;
        for(i=0; i<size; i++)
        {
            addChild(in->readNode());            
        }

        size = in->readUInt();
        for(i=0;i<size;i++)
        {
            //setFileName(i, in->readString());
            std::string filename = in->readString();
            osg::Node *node = osgDB::readNodeFile(getDatabasePath() + filename); // If filename is flt, will need getDatabasePath()
            if(node)
                addChild(node, filename);
        }
    }
    else
    {
        throw Exception("ProxyNode::read(): Expected ProxyNode identification.");
    	}
}
