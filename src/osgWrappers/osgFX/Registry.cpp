// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgFX/Effect>
#include <osgFX/Registry>

TYPE_NAME_ALIAS(std::map< std::string COMMA  osg::ref_ptr< const osgFX::Effect > >, osgFX::Registry::EffectMap);

BEGIN_OBJECT_REFLECTOR(osgFX::Registry)
	BaseType(osg::Referenced);
	Method1(void, registerEffect, IN, const osgFX::Effect *, effect);
	Method0(const osgFX::Registry::EffectMap &, getEffectMap);
	ReadOnlyProperty(const osgFX::Registry::EffectMap &, EffectMap);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgFX::Registry::Proxy)
	Constructor1(IN, const osgFX::Effect *, effect);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< const osgFX::Effect >)
	Constructor0();
	Constructor1(IN, const osgFX::Effect *, t);
	Constructor1(IN, const osg::ref_ptr< const osgFX::Effect > &, rp);
	Method0(bool, valid);
	Method0(const osgFX::Effect *, get);
	Method0(const const osgFX::Effect *, get);
	Method0(const osgFX::Effect *, take);
	Method0(const osgFX::Effect *, release);
	ReadOnlyProperty(const osgFX::Effect *, );
END_REFLECTOR

STD_MAP_REFLECTOR(std::map< std::string COMMA  osg::ref_ptr< const osgFX::Effect > >);

