// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgIntrospection/Comparator>
#include <osgIntrospection/ConstructorInfo>
#include <osgIntrospection/MethodInfo>
#include <osgIntrospection/PropertyInfo>
#include <osgIntrospection/ReaderWriter>
#include <osgIntrospection/Type>
#include <osgIntrospection/Value>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgIntrospection::Type)
	I_BaseType(osgIntrospection::CustomAttributeProvider);
	I_Method0(const std::type_info &, getStdTypeInfo);
	I_Method0(bool, isDefined);
	I_Method0(const std::string &, getName);
	I_Method0(const std::string &, getNamespace);
	I_Method0(std::string, getQualifiedName);
	I_Method1(bool, matchesName, IN, const std::string &, name);
	I_Method0(int, getNumBaseTypes);
	I_Method1(const osgIntrospection::Type &, getBaseType, IN, int, i);
	I_Method0(int, getNumAliases);
	I_Method1(const std::string &, getAlias, IN, int, i);
	I_Method0(bool, isAbstract);
	I_Method0(bool, isAtomic);
	I_Method0(bool, isEnum);
	I_Method0(bool, isVoid);
	I_Method0(bool, isPointer);
	I_Method0(bool, isConstPointer);
	I_Method0(bool, isNonConstPointer);
	I_Method0(const osgIntrospection::Type &, getPointedType);
	I_Method0(const osgIntrospection::PropertyInfoList &, getProperties);
	I_Method1(void, getAllProperties, IN, osgIntrospection::PropertyInfoList &, props);
	I_Method0(const osgIntrospection::ConstructorInfoList &, getConstructors);
	I_Method0(const osgIntrospection::MethodInfoList &, getMethods);
	I_Method1(void, getAllMethods, IN, osgIntrospection::MethodInfoList &, methods);
	I_Method0(const osgIntrospection::EnumLabelMap &, getEnumLabels);
	I_Method1(const osgIntrospection::ConstructorInfo *, getCompatibleConstructor, IN, const osgIntrospection::ValueList &, values);
	I_Method1(const osgIntrospection::ConstructorInfo *, getConstructor, IN, const osgIntrospection::ParameterInfoList &, params);
	I_Method3(const osgIntrospection::MethodInfo *, getCompatibleMethod, IN, const std::string &, name, IN, const osgIntrospection::ValueList &, values, IN, bool, inherit);
	I_Method3(const osgIntrospection::MethodInfo *, getMethod, IN, const std::string &, name, IN, const osgIntrospection::ParameterInfoList &, params, IN, bool, inherit);
	I_Method4(const osgIntrospection::PropertyInfo *, getProperty, IN, const std::string &, name, IN, const osgIntrospection::Type &, ptype, IN, const osgIntrospection::ParameterInfoList &, indices, IN, bool, inherit);
	I_Method4(osgIntrospection::Value, invokeMethod, IN, const std::string &, name, IN, const osgIntrospection::Value &, instance, IN, osgIntrospection::ValueList &, args, IN, bool, inherit);
	I_Method4(osgIntrospection::Value, invokeMethod, IN, const std::string &, name, IN, osgIntrospection::Value &, instance, IN, osgIntrospection::ValueList &, args, IN, bool, inherit);
	I_Method1(bool, isSubclassOf, IN, const osgIntrospection::Type &, type);
	I_Method0(const osgIntrospection::ReaderWriter *, getReaderWriter);
	I_Method0(const osgIntrospection::Comparator *, getComparator);
	I_Method1(osgIntrospection::Value, createInstance, IN, osgIntrospection::ValueList &, args);
	I_Method0(osgIntrospection::Value, createInstance);
	I_ArrayProperty_G(const std::string &, Alias, Aliases, int, void);
	I_ArrayProperty_G(const osgIntrospection::Type &, BaseType, BaseTypes, int, void);
	I_ReadOnlyProperty(const osgIntrospection::Comparator *, Comparator);
	I_ReadOnlyProperty(const osgIntrospection::ConstructorInfoList &, Constructors);
	I_ReadOnlyProperty(const osgIntrospection::EnumLabelMap &, EnumLabels);
	I_ReadOnlyProperty(const osgIntrospection::MethodInfoList &, Methods);
	I_ReadOnlyProperty(const std::string &, Name);
	I_ReadOnlyProperty(const std::string &, Namespace);
	I_ReadOnlyProperty(const osgIntrospection::Type &, PointedType);
	I_ReadOnlyProperty(const osgIntrospection::PropertyInfoList &, Properties);
	I_ReadOnlyProperty(std::string, QualifiedName);
	I_ReadOnlyProperty(const osgIntrospection::ReaderWriter *, ReaderWriter);
	I_ReadOnlyProperty(const std::type_info &, StdTypeInfo);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< const osgIntrospection::MethodInfo * >, osgIntrospection::MethodInfoList);

TYPE_NAME_ALIAS(std::vector< const osgIntrospection::PropertyInfo * >, osgIntrospection::PropertyInfoList);

TYPE_NAME_ALIAS(std::vector< const osgIntrospection::ParameterInfo * >, osgIntrospection::ParameterInfoList);

TYPE_NAME_ALIAS(std::vector< const osgIntrospection::ConstructorInfo * >, osgIntrospection::ConstructorInfoList);

TYPE_NAME_ALIAS(std::map< int COMMA  std::string >, osgIntrospection::EnumLabelMap);

STD_MAP_REFLECTOR(std::map< int COMMA  std::string >);

STD_VECTOR_REFLECTOR(std::vector< const osgIntrospection::ConstructorInfo * >);

STD_VECTOR_REFLECTOR(std::vector< const osgIntrospection::MethodInfo * >);

STD_VECTOR_REFLECTOR(std::vector< const osgIntrospection::ParameterInfo * >);

STD_VECTOR_REFLECTOR(std::vector< const osgIntrospection::PropertyInfo * >);

