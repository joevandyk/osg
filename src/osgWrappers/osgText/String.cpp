// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgText/String>

BEGIN_ENUM_REFLECTOR(osgText::String::Encoding)
	EnumLabel(osgText::String::ENCODING_UNDEFINED);
	EnumLabel(osgText::String::ENCODING_ASCII);
	EnumLabel(osgText::String::ENCODING_UTF8);
	EnumLabel(osgText::String::ENCODING_UTF16);
	EnumLabel(osgText::String::ENCODING_UTF16_BE);
	EnumLabel(osgText::String::ENCODING_UTF16_LE);
	EnumLabel(osgText::String::ENCODING_UTF32);
	EnumLabel(osgText::String::ENCODING_UTF32_BE);
	EnumLabel(osgText::String::ENCODING_UTF32_LE);
	EnumLabel(osgText::String::ENCODING_SIGNATURE);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgText::String)
	BaseType(osg::Referenced);
	Constructor0();
	Constructor1(IN, const osgText::String &, str);
	Constructor1(IN, const std::string &, str);
	Constructor1(IN, const wchar_t *, text);
	Constructor2(IN, const std::string &, text, IN, osgText::String::Encoding, encoding);
	Method1(void, set, IN, const std::string &, str);
	Method1(void, set, IN, const wchar_t *, text);
	Method2(void, set, IN, const std::string &, text, IN, osgText::String::Encoding, encoding);
	Method0(std::string, createUTF8EncodedString);
	WriteOnlyProperty(const wchar_t *, );
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< unsigned int >, osgText::VectorUInt);

