// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrix>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Program>
#include <osg/StateSet>
#include <osg/Uniform>
#include <osg/Vec2>
#include <osg/Vec3>
#include <osg/Vec4>

TYPE_NAME_ALIAS(std::vector< osg::StateSet * >, osg::Uniform::ParentList);

BEGIN_ENUM_REFLECTOR(osg::Uniform::Type)
	EnumLabel(osg::Uniform::FLOAT);
	EnumLabel(osg::Uniform::FLOAT_VEC2);
	EnumLabel(osg::Uniform::FLOAT_VEC3);
	EnumLabel(osg::Uniform::FLOAT_VEC4);
	EnumLabel(osg::Uniform::INT);
	EnumLabel(osg::Uniform::INT_VEC2);
	EnumLabel(osg::Uniform::INT_VEC3);
	EnumLabel(osg::Uniform::INT_VEC4);
	EnumLabel(osg::Uniform::BOOL);
	EnumLabel(osg::Uniform::BOOL_VEC2);
	EnumLabel(osg::Uniform::BOOL_VEC3);
	EnumLabel(osg::Uniform::BOOL_VEC4);
	EnumLabel(osg::Uniform::FLOAT_MAT2);
	EnumLabel(osg::Uniform::FLOAT_MAT3);
	EnumLabel(osg::Uniform::FLOAT_MAT4);
	EnumLabel(osg::Uniform::SAMPLER_1D);
	EnumLabel(osg::Uniform::SAMPLER_2D);
	EnumLabel(osg::Uniform::SAMPLER_3D);
	EnumLabel(osg::Uniform::SAMPLER_CUBE);
	EnumLabel(osg::Uniform::SAMPLER_1D_SHADOW);
	EnumLabel(osg::Uniform::SAMPLER_2D_SHADOW);
	EnumLabel(osg::Uniform::UNDEFINED);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Uniform)
	BaseType(osg::Object);
	Constructor0();
	Constructor2(IN, osg::Uniform::Type, type, IN, const std::string &, name);
	ConstructorWithDefaults2(IN, const osg::Uniform &, rhs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(bool, setType, IN, osg::Uniform::Type, t);
	Method1(bool, setName, IN, const std::string &, name);
	Method0(const std::string &, getName);
	Method0(const osg::Uniform::Type, getType);
	Constructor2(IN, const char *, name, IN, float, f);
	Constructor2(IN, const char *, name, IN, int, i);
	Constructor2(IN, const char *, name, IN, bool, b);
	Constructor2(IN, const char *, name, IN, const osg::Vec2 &, v2);
	Constructor2(IN, const char *, name, IN, const osg::Vec3 &, v3);
	Constructor2(IN, const char *, name, IN, const osg::Vec4 &, v4);
	Constructor2(IN, const char *, name, IN, const osg::Matrix &, m4);
	Constructor3(IN, const char *, name, IN, int, i0, IN, int, i1);
	Constructor4(IN, const char *, name, IN, int, i0, IN, int, i1, IN, int, i2);
	Constructor5(IN, const char *, name, IN, int, i0, IN, int, i1, IN, int, i2, IN, int, i3);
	Constructor3(IN, const char *, name, IN, bool, b0, IN, bool, b1);
	Constructor4(IN, const char *, name, IN, bool, b0, IN, bool, b1, IN, bool, b2);
	Constructor5(IN, const char *, name, IN, bool, b0, IN, bool, b1, IN, bool, b2, IN, bool, b3);
	Method1(int, compare, IN, const osg::Uniform &, rhs);
	Method1(int, compareData, IN, const osg::Uniform &, rhs);
	Method1(void, copyData, IN, const osg::Uniform &, rhs);
	Method0(const osg::Uniform::ParentList &, getParents);
	Method0(osg::Uniform::ParentList, getParents);
	Method1(osg::StateSet *, getParent, IN, unsigned int, i);
	Method1(const osg::StateSet *, getParent, IN, unsigned int, i);
	Method0(unsigned int, getNumParents);
	Method1(bool, set, IN, float, f);
	Method1(bool, set, IN, int, i);
	Method1(bool, set, IN, bool, b);
	Method1(bool, set, IN, const osg::Vec2 &, v2);
	Method1(bool, set, IN, const osg::Vec3 &, v3);
	Method1(bool, set, IN, const osg::Vec4 &, v4);
	Method1(bool, set, IN, const osg::Matrix &, m4);
	Method2(bool, set, IN, int, i0, IN, int, i1);
	Method3(bool, set, IN, int, i0, IN, int, i1, IN, int, i2);
	Method4(bool, set, IN, int, i0, IN, int, i1, IN, int, i2, IN, int, i3);
	Method2(bool, set, IN, bool, b0, IN, bool, b1);
	Method3(bool, set, IN, bool, b0, IN, bool, b1, IN, bool, b2);
	Method4(bool, set, IN, bool, b0, IN, bool, b1, IN, bool, b2, IN, bool, b3);
	Method1(bool, get, IN, float &, f);
	Method1(bool, get, IN, int &, i);
	Method1(bool, get, IN, bool &, b);
	Method1(bool, get, IN, osg::Vec2 &, v2);
	Method1(bool, get, IN, osg::Vec3 &, v3);
	Method1(bool, get, IN, osg::Vec4 &, v4);
	Method1(bool, get, IN, osg::Matrix &, m4);
	Method2(bool, get, IN, int &, i0, IN, int &, i1);
	Method3(bool, get, IN, int &, i0, IN, int &, i1, IN, int &, i2);
	Method4(bool, get, IN, int &, i0, IN, int &, i1, IN, int &, i2, IN, int &, i3);
	Method2(bool, get, IN, bool &, b0, IN, bool &, b1);
	Method3(bool, get, IN, bool &, b0, IN, bool &, b1, IN, bool &, b2);
	Method4(bool, get, IN, bool &, b0, IN, bool &, b1, IN, bool &, b2, IN, bool &, b3);
	Method1(void, setUpdateCallback, IN, osg::Uniform::Callback *, uc);
	Method0(osg::Uniform::Callback *, getUpdateCallback);
	Method0(const osg::Uniform::Callback *, getUpdateCallback);
	Method1(void, setEventCallback, IN, osg::Uniform::Callback *, ec);
	Method0(osg::Uniform::Callback *, getEventCallback);
	Method0(const osg::Uniform::Callback *, getEventCallback);
	Method0(void, dirty);
	Method1(void, setModifiedCount, IN, unsigned int, mc);
	Method0(unsigned int, getModifiedCount);
	Method2(void, apply, IN, const osg::GL2Extensions *, ext, IN, GLint, location);
	WriteOnlyPropertyWithReturnType(bool, , bool);
	Property(osg::Uniform::Callback *, EventCallback);
	Property(unsigned int, ModifiedCount);
	PropertyWithReturnType(const std::string &, Name, bool);
	ArrayProperty_G(osg::StateSet *, Parent, Parents, unsigned int, void);
	ReadOnlyProperty(osg::Uniform::ParentList, Parents);
	WriteOnlyPropertyWithReturnType(osg::Uniform::Type, Type, bool);
	Property(osg::Uniform::Callback *, UpdateCallback);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Uniform::Callback)
	VirtualBaseType(osg::Object);
	Constructor0();
	Constructor2(IN, const osg::Uniform::Callback &, x, IN, const osg::CopyOp &, x);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
END_REFLECTOR

