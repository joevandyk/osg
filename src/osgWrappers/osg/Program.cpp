// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osg/Program>
#include <osg/Shader>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/Uniform>

TYPE_NAME_ALIAS(std::map< std::string COMMA  GLuint >, osg::Program::AttribBindingList);

TYPE_NAME_ALIAS(std::map< std::string COMMA  std::pair< GLint COMMA  GLenum > >, osg::Program::NameInfoMap);

BEGIN_OBJECT_REFLECTOR(osg::Program)
	BaseType(osg::StateAttribute);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Program &, rhs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::StateAttribute::Type, getType);
	Method1(int, compare, IN, const osg::StateAttribute &, sa);
	Method1(void, apply, IN, osg::State &, state);
	Method1(void, compileGLObjects, IN, osg::State &, state);
	MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, state, 0);
	Method0(void, dirtyProgram);
	Method1(bool, addShader, IN, osg::Shader *, shader);
	Method0(unsigned int, getNumShaders);
	Method1(osg::Shader *, getShader, IN, unsigned int, i);
	Method1(const osg::Shader *, getShader, IN, unsigned int, i);
	Method1(bool, removeShader, IN, osg::Shader *, shader);
	Method2(void, addBindAttribLocation, IN, const std::string &, name, IN, GLuint, index);
	Method1(void, removeBindAttribLocation, IN, const std::string &, name);
	Method0(const osg::Program::AttribBindingList &, getAttribBindingList);
	Method0(bool, isFixedFunction);
	Method2(bool, getGlProgramInfoLog, IN, unsigned int, contextID, IN, std::string &, log);
	Method1(void, setName, IN, const std::string &, name);
	Method1(void, setName, IN, const char *, name);
	Method0(const std::string &, getName);
	Method1(const osg::Program::NameInfoMap &, getActiveUniforms, IN, unsigned int, contextID);
	Method1(const osg::Program::NameInfoMap &, getActiveAttribs, IN, unsigned int, contextID);
	Method1(osg::Program::PerContextProgram *, getPCP, IN, unsigned int, contextID);
	ReadOnlyProperty(const osg::Program::AttribBindingList &, AttribBindingList);
	Property(const std::string &, Name);
	ArrayProperty_GA(osg::Shader *, Shader, Shaders, unsigned int, bool);
	ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Program::PerContextProgram)
	BaseType(osg::Referenced);
	Constructor2(IN, const osg::Program *, program, IN, unsigned int, contextID);
	Method0(GLuint, getHandle);
	Method0(void, requestLink);
	Method0(void, linkProgram);
	Method0(bool, needsLink);
	Method0(bool, isLinked);
	Method1(bool, getInfoLog, IN, std::string &, infoLog);
	Method0(void, useProgram);
	Method0(void, resetAppliedUniforms);
	Method1(void, apply, IN, const osg::Uniform &, uniform);
	Method0(const osg::Program::NameInfoMap &, getActiveUniforms);
	Method0(const osg::Program::NameInfoMap &, getActiveAttribs);
	Method1(GLint, getUniformLocation, IN, const std::string &, name);
	Method1(GLint, getAttribLocation, IN, const std::string &, name);
	ReadOnlyProperty(const osg::Program::NameInfoMap &, ActiveAttribs);
	ReadOnlyProperty(const osg::Program::NameInfoMap &, ActiveUniforms);
	ReadOnlyProperty(GLuint, Handle);
END_REFLECTOR

STD_MAP_REFLECTOR(std::map< std::string COMMA  GLuint >);

STD_MAP_REFLECTOR(std::map< std::string COMMA  std::pair< GLint COMMA  GLenum > >);

STD_PAIR_REFLECTOR(std::pair< GLint COMMA  GLenum >);

