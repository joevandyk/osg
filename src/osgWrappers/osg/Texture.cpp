// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Texture>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::Texture::Extensions)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Texture::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Texture::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtensions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtensions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setMultiTexturingSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setMultiTexturingSupported__bool,
	          "",
	          "");
	I_Method0(bool, isMultiTexturingSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isMultiTexturingSupported,
	          "",
	          "");
	I_Method1(void, setTextureFilterAnisotropicSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureFilterAnisotropicSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureFilterAnisotropicSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureFilterAnisotropicSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionARBSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionARBSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionARBSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionARBSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionS3TCSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionS3TCSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionS3TCSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionS3TCSupported,
	          "",
	          "");
	I_Method1(void, setTextureMirroredRepeatSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureMirroredRepeatSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureMirroredRepeatSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureMirroredRepeatSupported,
	          "",
	          "");
	I_Method1(void, setTextureEdgeClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureEdgeClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureEdgeClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureEdgeClampSupported,
	          "",
	          "");
	I_Method1(void, setTextureBorderClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureBorderClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureBorderClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureBorderClampSupported,
	          "",
	          "");
	I_Method1(void, setGenerateMipMapSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setGenerateMipMapSupported__bool,
	          "",
	          "");
	I_Method0(bool, isGenerateMipMapSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isGenerateMipMapSupported,
	          "",
	          "");
	I_Method1(void, setShadowSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowSupported,
	          "",
	          "");
	I_Method1(void, setShadowAmbientSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowAmbientSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowAmbientSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowAmbientSupported,
	          "",
	          "");
	I_Method1(void, setMaxTextureSize, IN, GLint, maxsize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxTextureSize__GLint,
	          "",
	          "");
	I_Method0(GLint, maxTextureSize,
	          Properties::NON_VIRTUAL,
	          __GLint__maxTextureSize,
	          "",
	          "");
	I_Method1(void, setNumTextureUnits, IN, GLint, nunits,
	          Properties::NON_VIRTUAL,
	          __void__setNumTextureUnits__GLint,
	          "",
	          "");
	I_Method0(GLint, numTextureUnits,
	          Properties::NON_VIRTUAL,
	          __GLint__numTextureUnits,
	          "",
	          "");
	I_Method0(bool, isCompressedTexImage2DSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isCompressedTexImage2DSupported,
	          "",
	          "");
	I_Method1(void, setCompressedTexImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexImage2DProc__void_P1,
	          "",
	          "");
	I_Method8(void, glCompressedTexImage2D, IN, GLenum, target, IN, GLint, level, IN, GLenum, internalformat, IN, GLsizei, width, IN, GLsizei, height, IN, GLint, border, IN, GLsizei, imageSize, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexImage2D__GLenum__GLint__GLenum__GLsizei__GLsizei__GLint__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setCompressedTexSubImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexSubImage2DProc__void_P1,
	          "",
	          "");
	I_Method9(void, glCompressedTexSubImage2D, IN, GLenum, target, IN, GLint, level, IN, GLint, xoffset, IN, GLint, yoffset, IN, GLsizei, width, IN, GLsizei, height, IN, GLenum, format, IN, GLsizei, type, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexSubImage2D__GLenum__GLint__GLint__GLint__GLsizei__GLsizei__GLenum__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setGetCompressedTexImageProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setGetCompressedTexImageProc__void_P1,
	          "",
	          "");
	I_Method3(void, glGetCompressedTexImage, IN, GLenum, target, IN, GLint, level, IN, GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glGetCompressedTexImage__GLenum__GLint__GLvoid_P1,
	          "",
	          "");
	I_Method0(bool, isClientStorageSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isClientStorageSupported,
	          "",
	          "");
	I_Method1(bool, isNonPowerOfTwoTextureSupported, IN, GLenum, filter,
	          Properties::NON_VIRTUAL,
	          __bool__isNonPowerOfTwoTextureSupported__GLenum,
	          "",
	          "");
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Texture::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Texture::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtensions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtensions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setMultiTexturingSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setMultiTexturingSupported__bool,
	          "",
	          "");
	I_Method0(bool, isMultiTexturingSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isMultiTexturingSupported,
	          "",
	          "");
	I_Method1(void, setTextureFilterAnisotropicSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureFilterAnisotropicSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureFilterAnisotropicSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureFilterAnisotropicSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionARBSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionARBSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionARBSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionARBSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionS3TCSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionS3TCSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionS3TCSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionS3TCSupported,
	          "",
	          "");
	I_Method1(void, setTextureMirroredRepeatSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureMirroredRepeatSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureMirroredRepeatSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureMirroredRepeatSupported,
	          "",
	          "");
	I_Method1(void, setTextureEdgeClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureEdgeClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureEdgeClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureEdgeClampSupported,
	          "",
	          "");
	I_Method1(void, setTextureBorderClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureBorderClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureBorderClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureBorderClampSupported,
	          "",
	          "");
	I_Method1(void, setGenerateMipMapSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setGenerateMipMapSupported__bool,
	          "",
	          "");
	I_Method0(bool, isGenerateMipMapSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isGenerateMipMapSupported,
	          "",
	          "");
	I_Method1(void, setShadowSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowSupported,
	          "",
	          "");
	I_Method1(void, setShadowAmbientSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowAmbientSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowAmbientSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowAmbientSupported,
	          "",
	          "");
	I_Method1(void, setMaxTextureSize, IN, GLint, maxsize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxTextureSize__GLint,
	          "",
	          "");
	I_Method0(GLint, maxTextureSize,
	          Properties::NON_VIRTUAL,
	          __GLint__maxTextureSize,
	          "",
	          "");
	I_Method1(void, setNumTextureUnits, IN, GLint, nunits,
	          Properties::NON_VIRTUAL,
	          __void__setNumTextureUnits__GLint,
	          "",
	          "");
	I_Method0(GLint, numTextureUnits,
	          Properties::NON_VIRTUAL,
	          __GLint__numTextureUnits,
	          "",
	          "");
	I_Method0(bool, isCompressedTexImage2DSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isCompressedTexImage2DSupported,
	          "",
	          "");
	I_Method1(void, setCompressedTexImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexImage2DProc__void_P1,
	          "",
	          "");
	I_Method8(void, glCompressedTexImage2D, IN, GLenum, target, IN, GLint, level, IN, GLenum, internalformat, IN, GLsizei, width, IN, GLsizei, height, IN, GLint, border, IN, GLsizei, imageSize, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexImage2D__GLenum__GLint__GLenum__GLsizei__GLsizei__GLint__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setCompressedTexSubImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexSubImage2DProc__void_P1,
	          "",
	          "");
	I_Method9(void, glCompressedTexSubImage2D, IN, GLenum, target, IN, GLint, level, IN, GLint, xoffset, IN, GLint, yoffset, IN, GLsizei, width, IN, GLsizei, height, IN, GLenum, format, IN, GLsizei, type, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexSubImage2D__GLenum__GLint__GLint__GLint__GLsizei__GLsizei__GLenum__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setGetCompressedTexImageProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setGetCompressedTexImageProc__void_P1,
	          "",
	          "");
	I_Method3(void, glGetCompressedTexImage, IN, GLenum, target, IN, GLint, level, IN, GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glGetCompressedTexImage__GLenum__GLint__GLvoid_P1,
	          "",
	          "");
	I_Method0(bool, isClientStorageSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isClientStorageSupported,
	          "",
	          "");
	I_Method1(bool, isNonPowerOfTwoTextureSupported, IN, GLenum, filter,
	          Properties::NON_VIRTUAL,
	          __bool__isNonPowerOfTwoTextureSupported__GLenum,
	          "",
	          "");
	I_SimpleProperty(void *, CompressedTexImage2DProc, 
	                 0, 
	                 __void__setCompressedTexImage2DProc__void_P1);
	I_SimpleProperty(void *, CompressedTexSubImage2DProc, 
	                 0, 
	                 __void__setCompressedTexSubImage2DProc__void_P1);
	I_SimpleProperty(bool, GenerateMipMapSupported, 
	                 0, 
	                 __void__setGenerateMipMapSupported__bool);
	I_SimpleProperty(void *, GetCompressedTexImageProc, 
	                 0, 
	                 __void__setGetCompressedTexImageProc__void_P1);
	I_SimpleProperty(GLint, MaxTextureSize, 
	                 0, 
	                 __void__setMaxTextureSize__GLint);
	I_SimpleProperty(bool, MultiTexturingSupported, 
	                 0, 
	                 __void__setMultiTexturingSupported__bool);
	I_SimpleProperty(GLint, NumTextureUnits, 
	                 0, 
	                 __void__setNumTextureUnits__GLint);
	I_SimpleProperty(bool, ShadowAmbientSupported, 
	                 0, 
	                 __void__setShadowAmbientSupported__bool);
	I_SimpleProperty(bool, ShadowSupported, 
	                 0, 
	                 __void__setShadowSupported__bool);
	I_SimpleProperty(bool, TextureBorderClampSupported, 
	                 0, 
	                 __void__setTextureBorderClampSupported__bool);
	I_SimpleProperty(bool, TextureCompressionARBSupported, 
	                 0, 
	                 __void__setTextureCompressionARBSupported__bool);
	I_SimpleProperty(bool, TextureCompressionS3TCSupported, 
	                 0, 
	                 __void__setTextureCompressionS3TCSupported__bool);
	I_SimpleProperty(bool, TextureEdgeClampSupported, 
	                 0, 
	                 __void__setTextureEdgeClampSupported__bool);
	I_SimpleProperty(bool, TextureFilterAnisotropicSupported, 
	                 0, 
	                 __void__setTextureFilterAnisotropicSupported__bool);
	I_SimpleProperty(bool, TextureMirroredRepeatSupported, 
	                 0, 
	                 __void__setTextureMirroredRepeatSupported__bool);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Texture::Extensions)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Texture::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Texture::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtensions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtensions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setMultiTexturingSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setMultiTexturingSupported__bool,
	          "",
	          "");
	I_Method0(bool, isMultiTexturingSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isMultiTexturingSupported,
	          "",
	          "");
	I_Method1(void, setTextureFilterAnisotropicSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureFilterAnisotropicSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureFilterAnisotropicSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureFilterAnisotropicSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionARBSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionARBSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionARBSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionARBSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionS3TCSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionS3TCSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionS3TCSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionS3TCSupported,
	          "",
	          "");
	I_Method1(void, setTextureMirroredRepeatSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureMirroredRepeatSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureMirroredRepeatSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureMirroredRepeatSupported,
	          "",
	          "");
	I_Method1(void, setTextureEdgeClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureEdgeClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureEdgeClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureEdgeClampSupported,
	          "",
	          "");
	I_Method1(void, setTextureBorderClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureBorderClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureBorderClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureBorderClampSupported,
	          "",
	          "");
	I_Method1(void, setGenerateMipMapSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setGenerateMipMapSupported__bool,
	          "",
	          "");
	I_Method0(bool, isGenerateMipMapSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isGenerateMipMapSupported,
	          "",
	          "");
	I_Method1(void, setShadowSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowSupported,
	          "",
	          "");
	I_Method1(void, setShadowAmbientSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowAmbientSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowAmbientSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowAmbientSupported,
	          "",
	          "");
	I_Method1(void, setMaxTextureSize, IN, GLint, maxsize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxTextureSize__GLint,
	          "",
	          "");
	I_Method0(GLint, maxTextureSize,
	          Properties::NON_VIRTUAL,
	          __GLint__maxTextureSize,
	          "",
	          "");
	I_Method1(void, setNumTextureUnits, IN, GLint, nunits,
	          Properties::NON_VIRTUAL,
	          __void__setNumTextureUnits__GLint,
	          "",
	          "");
	I_Method0(GLint, numTextureUnits,
	          Properties::NON_VIRTUAL,
	          __GLint__numTextureUnits,
	          "",
	          "");
	I_Method0(bool, isCompressedTexImage2DSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isCompressedTexImage2DSupported,
	          "",
	          "");
	I_Method1(void, setCompressedTexImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexImage2DProc__void_P1,
	          "",
	          "");
	I_Method8(void, glCompressedTexImage2D, IN, GLenum, target, IN, GLint, level, IN, GLenum, internalformat, IN, GLsizei, width, IN, GLsizei, height, IN, GLint, border, IN, GLsizei, imageSize, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexImage2D__GLenum__GLint__GLenum__GLsizei__GLsizei__GLint__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setCompressedTexSubImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexSubImage2DProc__void_P1,
	          "",
	          "");
	I_Method9(void, glCompressedTexSubImage2D, IN, GLenum, target, IN, GLint, level, IN, GLint, xoffset, IN, GLint, yoffset, IN, GLsizei, width, IN, GLsizei, height, IN, GLenum, format, IN, GLsizei, type, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexSubImage2D__GLenum__GLint__GLint__GLint__GLsizei__GLsizei__GLenum__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setGetCompressedTexImageProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setGetCompressedTexImageProc__void_P1,
	          "",
	          "");
	I_Method3(void, glGetCompressedTexImage, IN, GLenum, target, IN, GLint, level, IN, GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glGetCompressedTexImage__GLenum__GLint__GLvoid_P1,
	          "",
	          "");
	I_Method0(bool, isClientStorageSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isClientStorageSupported,
	          "",
	          "");
	I_Method1(bool, isNonPowerOfTwoTextureSupported, IN, GLenum, filter,
	          Properties::NON_VIRTUAL,
	          __bool__isNonPowerOfTwoTextureSupported__GLenum,
	          "",
	          "");
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Texture::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Texture::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtensions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtensions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setMultiTexturingSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setMultiTexturingSupported__bool,
	          "",
	          "");
	I_Method0(bool, isMultiTexturingSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isMultiTexturingSupported,
	          "",
	          "");
	I_Method1(void, setTextureFilterAnisotropicSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureFilterAnisotropicSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureFilterAnisotropicSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureFilterAnisotropicSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionARBSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionARBSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionARBSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionARBSupported,
	          "",
	          "");
	I_Method1(void, setTextureCompressionS3TCSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureCompressionS3TCSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureCompressionS3TCSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureCompressionS3TCSupported,
	          "",
	          "");
	I_Method1(void, setTextureMirroredRepeatSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureMirroredRepeatSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureMirroredRepeatSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureMirroredRepeatSupported,
	          "",
	          "");
	I_Method1(void, setTextureEdgeClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureEdgeClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureEdgeClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureEdgeClampSupported,
	          "",
	          "");
	I_Method1(void, setTextureBorderClampSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setTextureBorderClampSupported__bool,
	          "",
	          "");
	I_Method0(bool, isTextureBorderClampSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isTextureBorderClampSupported,
	          "",
	          "");
	I_Method1(void, setGenerateMipMapSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setGenerateMipMapSupported__bool,
	          "",
	          "");
	I_Method0(bool, isGenerateMipMapSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isGenerateMipMapSupported,
	          "",
	          "");
	I_Method1(void, setShadowSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowSupported,
	          "",
	          "");
	I_Method1(void, setShadowAmbientSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setShadowAmbientSupported__bool,
	          "",
	          "");
	I_Method0(bool, isShadowAmbientSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isShadowAmbientSupported,
	          "",
	          "");
	I_Method1(void, setMaxTextureSize, IN, GLint, maxsize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxTextureSize__GLint,
	          "",
	          "");
	I_Method0(GLint, maxTextureSize,
	          Properties::NON_VIRTUAL,
	          __GLint__maxTextureSize,
	          "",
	          "");
	I_Method1(void, setNumTextureUnits, IN, GLint, nunits,
	          Properties::NON_VIRTUAL,
	          __void__setNumTextureUnits__GLint,
	          "",
	          "");
	I_Method0(GLint, numTextureUnits,
	          Properties::NON_VIRTUAL,
	          __GLint__numTextureUnits,
	          "",
	          "");
	I_Method0(bool, isCompressedTexImage2DSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isCompressedTexImage2DSupported,
	          "",
	          "");
	I_Method1(void, setCompressedTexImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexImage2DProc__void_P1,
	          "",
	          "");
	I_Method8(void, glCompressedTexImage2D, IN, GLenum, target, IN, GLint, level, IN, GLenum, internalformat, IN, GLsizei, width, IN, GLsizei, height, IN, GLint, border, IN, GLsizei, imageSize, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexImage2D__GLenum__GLint__GLenum__GLsizei__GLsizei__GLint__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setCompressedTexSubImage2DProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setCompressedTexSubImage2DProc__void_P1,
	          "",
	          "");
	I_Method9(void, glCompressedTexSubImage2D, IN, GLenum, target, IN, GLint, level, IN, GLint, xoffset, IN, GLint, yoffset, IN, GLsizei, width, IN, GLsizei, height, IN, GLenum, format, IN, GLsizei, type, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glCompressedTexSubImage2D__GLenum__GLint__GLint__GLint__GLsizei__GLsizei__GLenum__GLsizei__C5_GLvoid_P1,
	          "",
	          "");
	I_Method1(void, setGetCompressedTexImageProc, IN, void *, ptr,
	          Properties::NON_VIRTUAL,
	          __void__setGetCompressedTexImageProc__void_P1,
	          "",
	          "");
	I_Method3(void, glGetCompressedTexImage, IN, GLenum, target, IN, GLint, level, IN, GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glGetCompressedTexImage__GLenum__GLint__GLvoid_P1,
	          "",
	          "");
	I_Method0(bool, isClientStorageSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isClientStorageSupported,
	          "",
	          "");
	I_Method1(bool, isNonPowerOfTwoTextureSupported, IN, GLenum, filter,
	          Properties::NON_VIRTUAL,
	          __bool__isNonPowerOfTwoTextureSupported__GLenum,
	          "",
	          "");
	I_SimpleProperty(void *, CompressedTexImage2DProc, 
	                 0, 
	                 __void__setCompressedTexImage2DProc__void_P1);
	I_SimpleProperty(void *, CompressedTexSubImage2DProc, 
	                 0, 
	                 __void__setCompressedTexSubImage2DProc__void_P1);
	I_SimpleProperty(bool, GenerateMipMapSupported, 
	                 0, 
	                 __void__setGenerateMipMapSupported__bool);
	I_SimpleProperty(void *, GetCompressedTexImageProc, 
	                 0, 
	                 __void__setGetCompressedTexImageProc__void_P1);
	I_SimpleProperty(GLint, MaxTextureSize, 
	                 0, 
	                 __void__setMaxTextureSize__GLint);
	I_SimpleProperty(bool, MultiTexturingSupported, 
	                 0, 
	                 __void__setMultiTexturingSupported__bool);
	I_SimpleProperty(GLint, NumTextureUnits, 
	                 0, 
	                 __void__setNumTextureUnits__GLint);
	I_SimpleProperty(bool, ShadowAmbientSupported, 
	                 0, 
	                 __void__setShadowAmbientSupported__bool);
	I_SimpleProperty(bool, ShadowSupported, 
	                 0, 
	                 __void__setShadowSupported__bool);
	I_SimpleProperty(bool, TextureBorderClampSupported, 
	                 0, 
	                 __void__setTextureBorderClampSupported__bool);
	I_SimpleProperty(bool, TextureCompressionARBSupported, 
	                 0, 
	                 __void__setTextureCompressionARBSupported__bool);
	I_SimpleProperty(bool, TextureCompressionS3TCSupported, 
	                 0, 
	                 __void__setTextureCompressionS3TCSupported__bool);
	I_SimpleProperty(bool, TextureEdgeClampSupported, 
	                 0, 
	                 __void__setTextureEdgeClampSupported__bool);
	I_SimpleProperty(bool, TextureFilterAnisotropicSupported, 
	                 0, 
	                 __void__setTextureFilterAnisotropicSupported__bool);
	I_SimpleProperty(bool, TextureMirroredRepeatSupported, 
	                 0, 
	                 __void__setTextureMirroredRepeatSupported__bool);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Texture::TextureObject)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor2(IN, GLuint, id, IN, GLenum, target,
	               ____TextureObject__GLuint__GLenum,
	               "",
	               "");
	I_Constructor8(IN, GLuint, id, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	               ____TextureObject__GLuint__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	               "",
	               "");
	I_Method7(bool, match, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __bool__match__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(void, bind,
	          Properties::NON_VIRTUAL,
	          __void__bind,
	          "",
	          "");
	I_MethodWithDefaults1(void, setAllocated, IN, bool, allocated, true,
	                      Properties::NON_VIRTUAL,
	                      __void__setAllocated__bool,
	                      "",
	                      "");
	I_Method6(void, setAllocated, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __void__setAllocated__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(bool, isAllocated,
	          Properties::NON_VIRTUAL,
	          __bool__isAllocated,
	          "",
	          "");
	I_Method0(bool, isReusable,
	          Properties::NON_VIRTUAL,
	          __bool__isReusable,
	          "",
	          "");
	I_Constructor2(IN, GLuint, id, IN, GLenum, target,
	               ____TextureObject__GLuint__GLenum,
	               "",
	               "");
	I_Constructor8(IN, GLuint, id, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	               ____TextureObject__GLuint__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	               "",
	               "");
	I_Method7(bool, match, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __bool__match__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(void, bind,
	          Properties::NON_VIRTUAL,
	          __void__bind,
	          "",
	          "");
	I_MethodWithDefaults1(void, setAllocated, IN, bool, allocated, true,
	                      Properties::NON_VIRTUAL,
	                      __void__setAllocated__bool,
	                      "",
	                      "");
	I_Method6(void, setAllocated, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __void__setAllocated__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(bool, isAllocated,
	          Properties::NON_VIRTUAL,
	          __bool__isAllocated,
	          "",
	          "");
	I_Method0(bool, isReusable,
	          Properties::NON_VIRTUAL,
	          __bool__isReusable,
	          "",
	          "");
	I_SimpleProperty(bool, Allocated, 
	                 0, 
	                 __void__setAllocated__bool);
	I_PublicMemberProperty(GLuint, _id);
	I_PublicMemberProperty(GLenum, _target);
	I_PublicMemberProperty(GLint, _numMipmapLevels);
	I_PublicMemberProperty(GLenum, _internalFormat);
	I_PublicMemberProperty(GLsizei, _width);
	I_PublicMemberProperty(GLsizei, _height);
	I_PublicMemberProperty(GLsizei, _depth);
	I_PublicMemberProperty(GLint, _border);
	I_PublicMemberProperty(bool, _allocated);
	I_PublicMemberProperty(double, _timeStamp);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Texture::TextureObject)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor2(IN, GLuint, id, IN, GLenum, target,
	               ____TextureObject__GLuint__GLenum,
	               "",
	               "");
	I_Constructor8(IN, GLuint, id, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	               ____TextureObject__GLuint__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	               "",
	               "");
	I_Method7(bool, match, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __bool__match__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(void, bind,
	          Properties::NON_VIRTUAL,
	          __void__bind,
	          "",
	          "");
	I_MethodWithDefaults1(void, setAllocated, IN, bool, allocated, true,
	                      Properties::NON_VIRTUAL,
	                      __void__setAllocated__bool,
	                      "",
	                      "");
	I_Method6(void, setAllocated, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __void__setAllocated__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(bool, isAllocated,
	          Properties::NON_VIRTUAL,
	          __bool__isAllocated,
	          "",
	          "");
	I_Method0(bool, isReusable,
	          Properties::NON_VIRTUAL,
	          __bool__isReusable,
	          "",
	          "");
	I_Constructor2(IN, GLuint, id, IN, GLenum, target,
	               ____TextureObject__GLuint__GLenum,
	               "",
	               "");
	I_Constructor8(IN, GLuint, id, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	               ____TextureObject__GLuint__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	               "",
	               "");
	I_Method7(bool, match, IN, GLenum, target, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __bool__match__GLenum__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(void, bind,
	          Properties::NON_VIRTUAL,
	          __void__bind,
	          "",
	          "");
	I_MethodWithDefaults1(void, setAllocated, IN, bool, allocated, true,
	                      Properties::NON_VIRTUAL,
	                      __void__setAllocated__bool,
	                      "",
	                      "");
	I_Method6(void, setAllocated, IN, GLint, numMipmapLevels, IN, GLenum, internalFormat, IN, GLsizei, width, IN, GLsizei, height, IN, GLsizei, depth, IN, GLint, border,
	          Properties::NON_VIRTUAL,
	          __void__setAllocated__GLint__GLenum__GLsizei__GLsizei__GLsizei__GLint,
	          "",
	          "");
	I_Method0(bool, isAllocated,
	          Properties::NON_VIRTUAL,
	          __bool__isAllocated,
	          "",
	          "");
	I_Method0(bool, isReusable,
	          Properties::NON_VIRTUAL,
	          __bool__isReusable,
	          "",
	          "");
	I_SimpleProperty(bool, Allocated, 
	                 0, 
	                 __void__setAllocated__bool);
	I_PublicMemberProperty(GLuint, _id);
	I_PublicMemberProperty(GLenum, _target);
	I_PublicMemberProperty(GLint, _numMipmapLevels);
	I_PublicMemberProperty(GLenum, _internalFormat);
	I_PublicMemberProperty(GLsizei, _width);
	I_PublicMemberProperty(GLsizei, _height);
	I_PublicMemberProperty(GLsizei, _depth);
	I_PublicMemberProperty(GLint, _border);
	I_PublicMemberProperty(bool, _allocated);
	I_PublicMemberProperty(double, _timeStamp);
END_REFLECTOR

