// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/LightModel>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/Vec4>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osg::LightModel::ColorControl)
	I_EnumLabel(osg::LightModel::SEPARATE_SPECULAR_COLOR);
	I_EnumLabel(osg::LightModel::SINGLE_COLOR);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::LightModel)
	I_BaseType(osg::StateAttribute);
	I_Constructor0();
	I_ConstructorWithDefaults2(IN, const osg::LightModel &, lw, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, libraryName);
	I_Method0(const char *, className);
	I_Method0(osg::StateAttribute::Type, getType);
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa);
	I_Method1(void, setAmbientIntensity, IN, const osg::Vec4 &, ambient);
	I_Method0(const osg::Vec4 &, getAmbientIntensity);
	I_Method1(void, setColorControl, IN, osg::LightModel::ColorControl, cc);
	I_Method0(osg::LightModel::ColorControl, getColorControl);
	I_Method1(void, setLocalViewer, IN, bool, localViewer);
	I_Method0(bool, getLocalViewer);
	I_Method1(void, setTwoSided, IN, bool, twoSided);
	I_Method0(bool, getTwoSided);
	I_Method1(void, apply, IN, osg::State &, state);
	I_Property(const osg::Vec4 &, AmbientIntensity);
	I_Property(osg::LightModel::ColorControl, ColorControl);
	I_Property(bool, LocalViewer);
	I_Property(bool, TwoSided);
	I_ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

