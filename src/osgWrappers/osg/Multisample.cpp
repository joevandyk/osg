// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Multisample>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>

BEGIN_ENUM_REFLECTOR(osg::Multisample::Mode)
	EnumLabel(osg::Multisample::FASTEST);
	EnumLabel(osg::Multisample::NICEST);
	EnumLabel(osg::Multisample::DONT_CARE);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Multisample)
	BaseType(osg::StateAttribute);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Multisample &, trans, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::StateAttribute::Type, getType);
	Method1(int, compare, IN, const osg::StateAttribute &, sa);
	Method2(void, setSampleCoverage, IN, float, coverage, IN, bool, invert);
	Method1(void, setCoverage, IN, float, coverage);
	Method0(float, getCoverage);
	Method1(void, setInvert, IN, bool, invert);
	Method0(bool, getInvert);
	Method1(void, setHint, IN, osg::Multisample::Mode, mode);
	Method0(osg::Multisample::Mode, getHint);
	Method1(void, apply, IN, osg::State &, state);
	Property(float, Coverage);
	Property(osg::Multisample::Mode, Hint);
	Property(bool, Invert);
	ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Multisample::Extensions)
	BaseType(osg::Referenced);
	Constructor1(IN, unsigned int, contextID);
	Constructor1(IN, const osg::Multisample::Extensions &, rhs);
	Method1(void, lowestCommonDenominator, IN, const osg::Multisample::Extensions &, rhs);
	Method1(void, setupGLExtenions, IN, unsigned int, contextID);
	Method1(void, setMultisampleSupported, IN, bool, flag);
	Method1(void, setMultisampleFilterHintSupported, IN, bool, flag);
	Method0(bool, isMultisampleSupported);
	Method0(bool, isMultisampleFilterHintSupported);
	Method1(void, setSampleCoverageProc, IN, void *, ptr);
	Method2(void, glSampleCoverage, IN, GLclampf, value, IN, GLboolean, invert);
	WriteOnlyProperty(bool, MultisampleFilterHintSupported);
	WriteOnlyProperty(bool, MultisampleSupported);
	WriteOnlyProperty(void *, SampleCoverageProc);
	WriteOnlyProperty(unsigned int, upGLExtenions);
END_REFLECTOR

