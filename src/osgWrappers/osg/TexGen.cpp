// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrixd>
#include <osg/Object>
#include <osg/Plane>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/TexGen>

BEGIN_ENUM_REFLECTOR(osg::TexGen::Mode)
	EnumLabel(osg::TexGen::OBJECT_LINEAR);
	EnumLabel(osg::TexGen::EYE_LINEAR);
	EnumLabel(osg::TexGen::SPHERE_MAP);
	EnumLabel(osg::TexGen::NORMAL_MAP);
	EnumLabel(osg::TexGen::REFLECTION_MAP);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osg::TexGen::Coord)
	EnumLabel(osg::TexGen::S);
	EnumLabel(osg::TexGen::T);
	EnumLabel(osg::TexGen::R);
	EnumLabel(osg::TexGen::Q);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::TexGen)
	BaseType(osg::StateAttribute);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::TexGen &, texgen, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::StateAttribute::Type, getType);
	Method0(bool, isTextureAttribute);
	Method1(int, compare, IN, const osg::StateAttribute &, sa);
	Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage);
	Method1(void, apply, IN, osg::State &, state);
	Method1(void, setMode, IN, osg::TexGen::Mode, mode);
	Method0(osg::TexGen::Mode, getMode);
	Method2(void, setPlane, IN, osg::TexGen::Coord, which, IN, const osg::Plane &, plane);
	Method1(osg::Plane &, getPlane, IN, osg::TexGen::Coord, which);
	Method1(const osg::Plane &, getPlane, IN, osg::TexGen::Coord, which);
	Method1(void, setPlanesFromMatrix, IN, const osg::Matrixd &, matrix);
	Property(osg::TexGen::Mode, Mode);
	IndexedProperty1(const osg::Plane &, Plane, osg::TexGen::Coord, which);
	WriteOnlyProperty(const osg::Matrixd &, PlanesFromMatrix);
	ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

