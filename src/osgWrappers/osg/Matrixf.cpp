// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Matrixd>
#include <osg/Matrixf>
#include <osg/Object>
#include <osg/Quat>
#include <osg/Vec3d>
#include <osg/Vec3f>
#include <osg/Vec4d>
#include <osg/Vec4f>

TYPE_NAME_ALIAS(float, osg::Matrixf::value_type);

BEGIN_VALUE_REFLECTOR(osg::Matrixf)
	Constructor0();
	Constructor1(IN, const osg::Matrixf &, mat);
	Constructor1(IN, const osg::Matrixd &, mat);
	Constructor1(IN, float const *const, ptr);
	Constructor1(IN, double const *const, ptr);
	Constructor1(IN, const osg::Quat &, quat);
	Constructor16(IN, osg::Matrixf::value_type, a00, IN, osg::Matrixf::value_type, a01, IN, osg::Matrixf::value_type, a02, IN, osg::Matrixf::value_type, a03, IN, osg::Matrixf::value_type, a10, IN, osg::Matrixf::value_type, a11, IN, osg::Matrixf::value_type, a12, IN, osg::Matrixf::value_type, a13, IN, osg::Matrixf::value_type, a20, IN, osg::Matrixf::value_type, a21, IN, osg::Matrixf::value_type, a22, IN, osg::Matrixf::value_type, a23, IN, osg::Matrixf::value_type, a30, IN, osg::Matrixf::value_type, a31, IN, osg::Matrixf::value_type, a32, IN, osg::Matrixf::value_type, a33);
	Method1(int, compare, IN, const osg::Matrixf &, m);
	Method0(bool, valid);
	Method0(bool, isNaN);
	Method1(void, set, IN, const osg::Matrixf &, rhs);
	Method1(void, set, IN, const osg::Matrixd &, rhs);
	Method1(void, set, IN, float const *const, ptr);
	Method1(void, set, IN, double const *const, ptr);
	Method16(void, set, IN, osg::Matrixf::value_type, a00, IN, osg::Matrixf::value_type, a01, IN, osg::Matrixf::value_type, a02, IN, osg::Matrixf::value_type, a03, IN, osg::Matrixf::value_type, a10, IN, osg::Matrixf::value_type, a11, IN, osg::Matrixf::value_type, a12, IN, osg::Matrixf::value_type, a13, IN, osg::Matrixf::value_type, a20, IN, osg::Matrixf::value_type, a21, IN, osg::Matrixf::value_type, a22, IN, osg::Matrixf::value_type, a23, IN, osg::Matrixf::value_type, a30, IN, osg::Matrixf::value_type, a31, IN, osg::Matrixf::value_type, a32, IN, osg::Matrixf::value_type, a33);
	Method1(void, set, IN, const osg::Quat &, q);
	Method1(void, get, IN, osg::Quat &, q);
	Method0(osg::Matrixf::value_type *, ptr);
	Method0(const osg::Matrixf::value_type *, ptr);
	Method0(void, makeIdentity);
	Method1(void, makeScale, IN, const osg::Vec3f &, x);
	Method1(void, makeScale, IN, const osg::Vec3d &, x);
	Method3(void, makeScale, IN, osg::Matrixf::value_type, x, IN, osg::Matrixf::value_type, x, IN, osg::Matrixf::value_type, x);
	Method1(void, makeTranslate, IN, const osg::Vec3f &, x);
	Method1(void, makeTranslate, IN, const osg::Vec3d &, x);
	Method3(void, makeTranslate, IN, osg::Matrixf::value_type, x, IN, osg::Matrixf::value_type, x, IN, osg::Matrixf::value_type, x);
	Method2(void, makeRotate, IN, const osg::Vec3f &, from, IN, const osg::Vec3f &, to);
	Method2(void, makeRotate, IN, const osg::Vec3d &, from, IN, const osg::Vec3d &, to);
	Method2(void, makeRotate, IN, osg::Matrixf::value_type, angle, IN, const osg::Vec3f &, axis);
	Method2(void, makeRotate, IN, osg::Matrixf::value_type, angle, IN, const osg::Vec3d &, axis);
	Method4(void, makeRotate, IN, osg::Matrixf::value_type, angle, IN, osg::Matrixf::value_type, x, IN, osg::Matrixf::value_type, y, IN, osg::Matrixf::value_type, z);
	Method1(void, makeRotate, IN, const osg::Quat &, x);
	Method6(void, makeRotate, IN, osg::Matrixf::value_type, angle1, IN, const osg::Vec3f &, axis1, IN, osg::Matrixf::value_type, angle2, IN, const osg::Vec3f &, axis2, IN, osg::Matrixf::value_type, angle3, IN, const osg::Vec3f &, axis3);
	Method6(void, makeRotate, IN, osg::Matrixf::value_type, angle1, IN, const osg::Vec3d &, axis1, IN, osg::Matrixf::value_type, angle2, IN, const osg::Vec3d &, axis2, IN, osg::Matrixf::value_type, angle3, IN, const osg::Vec3d &, axis3);
	Method6(void, makeOrtho, IN, double, left, IN, double, right, IN, double, bottom, IN, double, top, IN, double, zNear, IN, double, zFar);
	Method6(bool, getOrtho, IN, double &, left, IN, double &, right, IN, double &, bottom, IN, double &, top, IN, double &, zNear, IN, double &, zFar);
	Method4(void, makeOrtho2D, IN, double, left, IN, double, right, IN, double, bottom, IN, double, top);
	Method6(void, makeFrustum, IN, double, left, IN, double, right, IN, double, bottom, IN, double, top, IN, double, zNear, IN, double, zFar);
	Method6(bool, getFrustum, IN, double &, left, IN, double &, right, IN, double &, bottom, IN, double &, top, IN, double &, zNear, IN, double &, zFar);
	Method4(void, makePerspective, IN, double, fovy, IN, double, aspectRatio, IN, double, zNear, IN, double, zFar);
	Method4(bool, getPerspective, IN, double &, fovy, IN, double &, aspectRatio, IN, double &, zNear, IN, double &, zFar);
	Method3(void, makeLookAt, IN, const osg::Vec3d &, eye, IN, const osg::Vec3d &, center, IN, const osg::Vec3d &, up);
	MethodWithDefaults4(void, getLookAt, IN, osg::Vec3f &, eye, , IN, osg::Vec3f &, center, , IN, osg::Vec3f &, up, , IN, osg::Matrixf::value_type, lookDistance, 1.0f);
	MethodWithDefaults4(void, getLookAt, IN, osg::Vec3d &, eye, , IN, osg::Vec3d &, center, , IN, osg::Vec3d &, up, , IN, osg::Matrixf::value_type, lookDistance, 1.0f);
	Method1(bool, invert, IN, const osg::Matrixf &, rhs);
	Method1(bool, invert_4x4_orig, IN, const osg::Matrixf &, x);
	Method1(bool, invert_4x4_new, IN, const osg::Matrixf &, x);
	Method1(osg::Vec3f, preMult, IN, const osg::Vec3f &, v);
	Method1(osg::Vec3d, preMult, IN, const osg::Vec3d &, v);
	Method1(osg::Vec3f, postMult, IN, const osg::Vec3f &, v);
	Method1(osg::Vec3d, postMult, IN, const osg::Vec3d &, v);
	Method1(osg::Vec4f, preMult, IN, const osg::Vec4f &, v);
	Method1(osg::Vec4d, preMult, IN, const osg::Vec4d &, v);
	Method1(osg::Vec4f, postMult, IN, const osg::Vec4f &, v);
	Method1(osg::Vec4d, postMult, IN, const osg::Vec4d &, v);
	Method3(void, setTrans, IN, osg::Matrixf::value_type, tx, IN, osg::Matrixf::value_type, ty, IN, osg::Matrixf::value_type, tz);
	Method1(void, setTrans, IN, const osg::Vec3f &, v);
	Method1(void, setTrans, IN, const osg::Vec3d &, v);
	Method0(osg::Vec3d, getTrans);
	Method0(osg::Vec3d, getScale);
	Method2(void, mult, IN, const osg::Matrixf &, x, IN, const osg::Matrixf &, x);
	Method1(void, preMult, IN, const osg::Matrixf &, x);
	Method1(void, postMult, IN, const osg::Matrixf &, x);
	WriteOnlyProperty(float const *const, );
	ReadOnlyProperty(osg::Vec3d, Scale);
	ReadOnlyProperty(osg::Vec3d, Trans);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::RefMatrixf)
	BaseType(osg::Object);
	BaseType(osg::Matrixf);
	Constructor0();
	Constructor1(IN, const osg::Matrixf &, other);
	Constructor1(IN, const osg::Matrixd &, other);
	Constructor1(IN, const osg::RefMatrixf &, other);
	Constructor1(IN, osg::Matrixf::value_type const *const, def);
	Constructor16(IN, osg::Matrixf::value_type, a00, IN, osg::Matrixf::value_type, a01, IN, osg::Matrixf::value_type, a02, IN, osg::Matrixf::value_type, a03, IN, osg::Matrixf::value_type, a10, IN, osg::Matrixf::value_type, a11, IN, osg::Matrixf::value_type, a12, IN, osg::Matrixf::value_type, a13, IN, osg::Matrixf::value_type, a20, IN, osg::Matrixf::value_type, a21, IN, osg::Matrixf::value_type, a22, IN, osg::Matrixf::value_type, a23, IN, osg::Matrixf::value_type, a30, IN, osg::Matrixf::value_type, a31, IN, osg::Matrixf::value_type, a32, IN, osg::Matrixf::value_type, a33);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, x);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
END_REFLECTOR

