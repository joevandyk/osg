// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ClusterCullingCallback>
#include <osg/CopyOp>
#include <osg/Drawable>
#include <osg/Matrixd>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/State>
#include <osg/Vec3>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::ClusterCullingCallback)
	I_BaseType(osg::Drawable::CullCallback);
	I_BaseType(osg::NodeCallback);
	I_Constructor0();
	I_Constructor2(IN, const osg::ClusterCullingCallback &, ccc, IN, const osg::CopyOp &, copyop);
	I_Constructor3(IN, const osg::Vec3 &, controlPoint, IN, const osg::Vec3 &, normal, IN, float, deviation);
	I_Constructor1(IN, const osg::Drawable *, drawable);
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, libraryName);
	I_Method0(const char *, className);
	I_Method1(void, computeFrom, IN, const osg::Drawable *, drawable);
	I_Method1(void, transform, IN, const osg::Matrixd &, matrix);
	I_Method4(void, set, IN, const osg::Vec3 &, controlPoint, IN, const osg::Vec3 &, normal, IN, float, deviation, IN, float, radius);
	I_Method1(void, setControlPoint, IN, const osg::Vec3 &, controlPoint);
	I_Method0(const osg::Vec3 &, getControlPoint);
	I_Method1(void, setNormal, IN, const osg::Vec3 &, normal);
	I_Method0(const osg::Vec3 &, getNormal);
	I_Method1(void, setRadius, IN, float, radius);
	I_Method0(float, getRadius);
	I_Method1(void, setDeviation, IN, float, deviation);
	I_Method0(float, getDeviation);
	I_Method3(bool, cull, IN, osg::NodeVisitor *, x, IN, osg::Drawable *, x, IN, osg::State *, x);
	I_Property(const osg::Vec3 &, ControlPoint);
	I_Property(float, Deviation);
	I_Property(const osg::Vec3 &, Normal);
	I_Property(float, Radius);
END_REFLECTOR

