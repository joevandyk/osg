// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/GraphicsContext>
#include <osg/GraphicsThread>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osg::BarrierOperation::PreBlockOp)
	I_EnumLabel(osg::BarrierOperation::NO_OPERATION);
	I_EnumLabel(osg::BarrierOperation::GL_FLUSH);
	I_EnumLabel(osg::BarrierOperation::GL_FINISH);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::BarrierOperation)
	I_BaseType(osg::GraphicsOperation);
	I_ConstructorWithDefaults2(IN, int, numThreads, , IN, osg::BarrierOperation::PreBlockOp, op, osg::BarrierOperation::NO_OPERATION,
	                           ____BarrierOperation__int__PreBlockOp,
	                           "",
	                           "");
	I_Method0(void, release,
	          __void__release,
	          "if this operation is a barrier then release it. ",
	          "");
	I_PublicMemberProperty(osg::BarrierOperation::PreBlockOp, _preBlockOp);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Block)
	I_VirtualBaseType(osg::Referenced);
	I_Constructor0(____Block,
	               "",
	               "");
	I_Method0(void, block,
	          __void__block,
	          "",
	          "");
	I_Method0(void, release,
	          __void__release,
	          "",
	          "");
	I_Method0(void, reset,
	          __void__reset,
	          "",
	          "");
	I_Method1(void, set, IN, bool, doRelease,
	          __void__set__bool,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GraphicsOperation)
	I_VirtualBaseType(osg::Referenced);
	I_Constructor2(IN, const std::string &, name, IN, bool, keep,
	               ____GraphicsOperation__C5_std_string_R1__bool,
	               "",
	               "");
	I_Method1(void, setName, IN, const std::string &, name,
	          __void__setName__C5_std_string_R1,
	          "Set the human readable name of the operation. ",
	          "");
	I_Method0(const std::string &, getName,
	          __C5_std_string_R1__getName,
	          "Get the human readable name of the operation. ",
	          "");
	I_Method1(void, setKeep, IN, bool, keep,
	          __void__setKeep__bool,
	          "Set whether the operation should be kept once its been applied. ",
	          "");
	I_Method0(bool, getKeep,
	          __bool__getKeep,
	          "Get whether the operation should be kept once its been applied. ",
	          "");
	I_Method0(void, release,
	          __void__release,
	          "if this operation is a barrier then release it. ",
	          "");
	I_SimpleProperty(bool, Keep, 
	                 __bool__getKeep, 
	                 __void__setKeep__bool);
	I_SimpleProperty(const std::string &, Name, 
	                 __C5_std_string_R1__getName, 
	                 __void__setName__C5_std_string_R1);
	I_PublicMemberProperty(std::string, _name);
	I_PublicMemberProperty(bool, _keep);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GraphicsThread)
	I_BaseType(osg::Referenced);
	I_Constructor0(____GraphicsThread,
	               "",
	               "");
	I_MethodWithDefaults2(void, add, IN, osg::GraphicsOperation *, operation, , IN, bool, waitForCompletion, false,
	                      __void__add__GraphicsOperation_P1__bool,
	                      "Add operation to end of OperationQueue, this will be executed by the graphics thread once this operation gets to the head of the queue. ",
	                      "");
	I_Method1(void, remove, IN, osg::GraphicsOperation *, operation,
	          __void__remove__GraphicsOperation_P1,
	          "Remove operation from OperationQueue. ",
	          "");
	I_Method1(void, remove, IN, const std::string &, name,
	          __void__remove__C5_std_string_R1,
	          "Remove named operation from OperationQueue. ",
	          "");
	I_Method0(void, removeAllOperations,
	          __void__removeAllOperations,
	          "Remove all operations from OperationQueue. ",
	          "");
	I_Method0(osg::ref_ptr< osg::GraphicsOperation >, getCurrentOperation,
	          __osg_ref_ptrT1_GraphicsOperation___getCurrentOperation,
	          "Get the operation currently being run. ",
	          "");
	I_Method0(void, run,
	          __void__run,
	          "Run does the graphics thread run loop. ",
	          "");
	I_Method1(void, setDone, IN, bool, done,
	          __void__setDone__bool,
	          "",
	          "");
	I_Method0(bool, getDone,
	          __bool__getDone,
	          "",
	          "");
	I_Method0(int, cancel,
	          __int__cancel,
	          "Cancel this graphics thread. ",
	          "");
	I_SimpleProperty(osg::ref_ptr< osg::GraphicsOperation >, CurrentOperation, 
	                 __osg_ref_ptrT1_GraphicsOperation___getCurrentOperation, 
	                 0);
	I_SimpleProperty(bool, Done, 
	                 __bool__getDone, 
	                 __void__setDone__bool);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::ReleaseContext_Block_MakeCurrentOperation)
	I_BaseType(osg::GraphicsOperation);
	I_BaseType(osg::Block);
	I_Constructor0(____ReleaseContext_Block_MakeCurrentOperation,
	               "",
	               "");
	I_Method0(void, release,
	          __void__release,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::SwapBuffersOperation)
	I_BaseType(osg::GraphicsOperation);
	I_Constructor0(____SwapBuffersOperation,
	               "",
	               "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::GraphicsOperation >)
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osg::GraphicsOperation *, ptr,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osg::GraphicsOperation > &, rp,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osg::GraphicsOperation *, get,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osg::GraphicsOperation *, release,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osg::GraphicsOperation > &, rp,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osg::GraphicsOperation *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

