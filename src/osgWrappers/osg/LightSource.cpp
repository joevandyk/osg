// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Light>
#include <osg/LightSource>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/StateAttribute>
#include <osg/StateSet>

BEGIN_ENUM_REFLECTOR(osg::LightSource::ReferenceFrame)
	EnumLabel(osg::LightSource::RELATIVE_RF);
	EnumLabel(osg::LightSource::ABSOLUTE_RF);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::LightSource)
	BaseType(osg::Group);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::LightSource &, ls, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, className);
	Method0(const char *, libraryName);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method1(void, setReferenceFrame, IN, osg::LightSource::ReferenceFrame, rf);
	Method0(osg::LightSource::ReferenceFrame, getReferenceFrame);
	Method1(void, setLight, IN, osg::Light *, light);
	Method0(osg::Light *, getLight);
	Method0(const osg::Light *, getLight);
	Method2(void, setStateSetModes, IN, osg::StateSet &, x, IN, osg::StateAttribute::GLModeValue, x);
	MethodWithDefaults1(void, setLocalStateSetModes, IN, osg::StateAttribute::GLModeValue, value, osg::StateAttribute::ON);
	Property(osg::Light *, Light);
	WriteOnlyProperty(osg::StateAttribute::GLModeValue, LocalStateSetModes);
	Property(osg::LightSource::ReferenceFrame, ReferenceFrame);
END_REFLECTOR

