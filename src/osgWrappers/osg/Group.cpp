// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Group>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/State>

BEGIN_OBJECT_REFLECTOR(osg::Group)
	BaseType(osg::Node);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Group &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, className);
	Method0(const char *, libraryName);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method0(osg::Group *, asGroup);
	Method0(const osg::Group *, asGroup);
	Method1(void, traverse, IN, osg::NodeVisitor &, nv);
	Method1(bool, addChild, IN, osg::Node *, child);
	Method2(bool, insertChild, IN, unsigned int, index, IN, osg::Node *, child);
	Method1(bool, removeChild, IN, osg::Node *, child);
	MethodWithDefaults2(bool, removeChild, IN, unsigned int, pos, , IN, unsigned int, numChildrenToRemove, 1);
	Method2(bool, replaceChild, IN, osg::Node *, origChild, IN, osg::Node *, newChild);
	Method0(unsigned int, getNumChildren);
	Method2(bool, setChild, IN, unsigned int, i, IN, osg::Node *, node);
	Method1(osg::Node *, getChild, IN, unsigned int, i);
	Method1(const osg::Node *, getChild, IN, unsigned int, i);
	Method1(bool, containsNode, IN, const osg::Node *, node);
	Method1(unsigned int, getChildIndex, IN, const osg::Node *, node);
	MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, x, 0);
	ArrayProperty_GSA(osg::Node *, Child, Children, unsigned int, bool);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osg::Node > >, osg::NodeList);

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Node >)
	Constructor0();
	Constructor1(IN, osg::Node *, t);
	Constructor1(IN, const osg::ref_ptr< osg::Node > &, rp);
	Method0(bool, valid);
	Method0(osg::Node *, get);
	Method0(const osg::Node *, get);
	Method0(osg::Node *, take);
	Method0(osg::Node *, release);
	ReadOnlyProperty(osg::Node *, );
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osg::Node > >);

