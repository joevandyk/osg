// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/Array.svn-base>
#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/.svn/text-base/Vec2.svn-base>
#include <osg/.svn/text-base/Vec2b.svn-base>
#include <osg/.svn/text-base/Vec2s.svn-base>
#include <osg/.svn/text-base/Vec3.svn-base>
#include <osg/.svn/text-base/Vec3b.svn-base>
#include <osg/.svn/text-base/Vec3s.svn-base>
#include <osg/.svn/text-base/Vec4.svn-base>
#include <osg/.svn/text-base/Vec4ub.svn-base>
#include <osg/Array>
#include <osg/Vec4b>
#include <osg/Vec4s>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osg::Array::Type)
	I_EnumLabel(osg::Array::ArrayType);
	I_EnumLabel(osg::Array::ByteArrayType);
	I_EnumLabel(osg::Array::ShortArrayType);
	I_EnumLabel(osg::Array::IntArrayType);
	I_EnumLabel(osg::Array::UByteArrayType);
	I_EnumLabel(osg::Array::UShortArrayType);
	I_EnumLabel(osg::Array::UIntArrayType);
	I_EnumLabel(osg::Array::Vec4ubArrayType);
	I_EnumLabel(osg::Array::FloatArrayType);
	I_EnumLabel(osg::Array::Vec2ArrayType);
	I_EnumLabel(osg::Array::Vec3ArrayType);
	I_EnumLabel(osg::Array::Vec4ArrayType);
	I_EnumLabel(osg::Array::Vec2sArrayType);
	I_EnumLabel(osg::Array::Vec3sArrayType);
	I_EnumLabel(osg::Array::Vec4sArrayType);
	I_EnumLabel(osg::Array::Vec2bArrayType);
	I_EnumLabel(osg::Array::Vec3bArrayType);
	I_EnumLabel(osg::Array::Vec4bArrayType);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::Array)
	I_BaseType(osg::Object);
	I_BaseType(osg::Object);
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____Array__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Array__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ArrayVisitor_R1,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ConstArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ConstArrayVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ValueVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ConstValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ConstValueVisitor_R1,
	          "",
	          "");
	I_Method2(int, compare, IN, unsigned int, lhs, IN, unsigned int, rhs,
	          Properties::PURE_VIRTUAL,
	          __int__compare__unsigned_int__unsigned_int,
	          "Return -1 if lhs element is less than rhs element, 0 if equal, 1 if lhs element is greater than rhs element. ",
	          "");
	I_Method0(osg::Array::Type, getType,
	          Properties::NON_VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method0(GLint, getDataSize,
	          Properties::NON_VIRTUAL,
	          __GLint__getDataSize,
	          "",
	          "");
	I_Method0(GLenum, getDataType,
	          Properties::NON_VIRTUAL,
	          __GLenum__getDataType,
	          "",
	          "");
	I_Method0(const GLvoid *, getDataPointer,
	          Properties::PURE_VIRTUAL,
	          __C5_GLvoid_P1__getDataPointer,
	          "",
	          "");
	I_Method0(unsigned int, getTotalDataSize,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getTotalDataSize,
	          "",
	          "");
	I_Method0(unsigned int, getNumElements,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getNumElements,
	          "",
	          "");
	I_Method0(void, trim,
	          Properties::VIRTUAL,
	          __void__trim,
	          "Frees unused space on this vector - i.e. ",
	          "the difference between size() and max_size() of the underlying vector. ");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "Dirty the primitive, which increments the modified count, to force buffer objects to update. ",
	          "");
	I_Method1(void, setModifiedCount, IN, unsigned int, value,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCount__unsigned_int,
	          "Set the modified count value. ",
	          "");
	I_Method0(unsigned int, getModifiedCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getModifiedCount,
	          "Get modified count value. ",
	          "");
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____Array__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Array__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ArrayVisitor_R1,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ConstArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ConstArrayVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ValueVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ConstValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ConstValueVisitor_R1,
	          "",
	          "");
	I_Method2(int, compare, IN, unsigned int, lhs, IN, unsigned int, rhs,
	          Properties::PURE_VIRTUAL,
	          __int__compare__unsigned_int__unsigned_int,
	          "Return -1 if lhs element is less than rhs element, 0 if equal, 1 if lhs element is greater than rhs element. ",
	          "");
	I_Method0(osg::Array::Type, getType,
	          Properties::NON_VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method0(GLint, getDataSize,
	          Properties::NON_VIRTUAL,
	          __GLint__getDataSize,
	          "",
	          "");
	I_Method0(GLenum, getDataType,
	          Properties::NON_VIRTUAL,
	          __GLenum__getDataType,
	          "",
	          "");
	I_Method0(const GLvoid *, getDataPointer,
	          Properties::PURE_VIRTUAL,
	          __C5_GLvoid_P1__getDataPointer,
	          "",
	          "");
	I_Method0(unsigned int, getTotalDataSize,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getTotalDataSize,
	          "",
	          "");
	I_Method0(unsigned int, getNumElements,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getNumElements,
	          "",
	          "");
	I_Method0(void, trim,
	          Properties::VIRTUAL,
	          __void__trim,
	          "Frees unused space on this vector - i.e. ",
	          "the difference between size() and max_size() of the underlying vector. ");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "Dirty the primitive, which increments the modified count, to force buffer objects to update. ",
	          "");
	I_Method1(void, setModifiedCount, IN, unsigned int, value,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCount__unsigned_int,
	          "Set the modified count value. ",
	          "");
	I_Method0(unsigned int, getModifiedCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getModifiedCount,
	          "Get modified count value. ",
	          "");
	I_SimpleProperty(const GLvoid *, DataPointer, 
	                 __C5_GLvoid_P1__getDataPointer, 
	                 0);
	I_SimpleProperty(GLint, DataSize, 
	                 __GLint__getDataSize, 
	                 0);
	I_SimpleProperty(GLenum, DataType, 
	                 __GLenum__getDataType, 
	                 0);
	I_SimpleProperty(unsigned int, ModifiedCount, 
	                 __unsigned_int__getModifiedCount, 
	                 __void__setModifiedCount__unsigned_int);
	I_SimpleProperty(unsigned int, TotalDataSize, 
	                 __unsigned_int__getTotalDataSize, 
	                 0);
	I_SimpleProperty(osg::Array::Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osg::Array::Type)
	I_EnumLabel(osg::Array::ArrayType);
	I_EnumLabel(osg::Array::ByteArrayType);
	I_EnumLabel(osg::Array::ShortArrayType);
	I_EnumLabel(osg::Array::IntArrayType);
	I_EnumLabel(osg::Array::UByteArrayType);
	I_EnumLabel(osg::Array::UShortArrayType);
	I_EnumLabel(osg::Array::UIntArrayType);
	I_EnumLabel(osg::Array::Vec4ubArrayType);
	I_EnumLabel(osg::Array::FloatArrayType);
	I_EnumLabel(osg::Array::Vec2ArrayType);
	I_EnumLabel(osg::Array::Vec3ArrayType);
	I_EnumLabel(osg::Array::Vec4ArrayType);
	I_EnumLabel(osg::Array::Vec2sArrayType);
	I_EnumLabel(osg::Array::Vec3sArrayType);
	I_EnumLabel(osg::Array::Vec4sArrayType);
	I_EnumLabel(osg::Array::Vec2bArrayType);
	I_EnumLabel(osg::Array::Vec3bArrayType);
	I_EnumLabel(osg::Array::Vec4bArrayType);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::Array)
	I_BaseType(osg::Object);
	I_BaseType(osg::Object);
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____Array__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Array__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ArrayVisitor_R1,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ConstArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ConstArrayVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ValueVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ConstValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ConstValueVisitor_R1,
	          "",
	          "");
	I_Method2(int, compare, IN, unsigned int, lhs, IN, unsigned int, rhs,
	          Properties::PURE_VIRTUAL,
	          __int__compare__unsigned_int__unsigned_int,
	          "Return -1 if lhs element is less than rhs element, 0 if equal, 1 if lhs element is greater than rhs element. ",
	          "");
	I_Method0(osg::Array::Type, getType,
	          Properties::NON_VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method0(GLint, getDataSize,
	          Properties::NON_VIRTUAL,
	          __GLint__getDataSize,
	          "",
	          "");
	I_Method0(GLenum, getDataType,
	          Properties::NON_VIRTUAL,
	          __GLenum__getDataType,
	          "",
	          "");
	I_Method0(const GLvoid *, getDataPointer,
	          Properties::PURE_VIRTUAL,
	          __C5_GLvoid_P1__getDataPointer,
	          "",
	          "");
	I_Method0(unsigned int, getTotalDataSize,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getTotalDataSize,
	          "",
	          "");
	I_Method0(unsigned int, getNumElements,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getNumElements,
	          "",
	          "");
	I_Method0(void, trim,
	          Properties::VIRTUAL,
	          __void__trim,
	          "Frees unused space on this vector - i.e. ",
	          "the difference between size() and max_size() of the underlying vector. ");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "Dirty the primitive, which increments the modified count, to force buffer objects to update. ",
	          "");
	I_Method1(void, setModifiedCount, IN, unsigned int, value,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCount__unsigned_int,
	          "Set the modified count value. ",
	          "");
	I_Method0(unsigned int, getModifiedCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getModifiedCount,
	          "Get modified count value. ",
	          "");
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____Array__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Array__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ArrayVisitor_R1,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::ConstArrayVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__ConstArrayVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ValueVisitor_R1,
	          "",
	          "");
	I_Method2(void, accept, IN, unsigned int, index, IN, osg::ConstValueVisitor &, x,
	          Properties::PURE_VIRTUAL,
	          __void__accept__unsigned_int__ConstValueVisitor_R1,
	          "",
	          "");
	I_Method2(int, compare, IN, unsigned int, lhs, IN, unsigned int, rhs,
	          Properties::PURE_VIRTUAL,
	          __int__compare__unsigned_int__unsigned_int,
	          "Return -1 if lhs element is less than rhs element, 0 if equal, 1 if lhs element is greater than rhs element. ",
	          "");
	I_Method0(osg::Array::Type, getType,
	          Properties::NON_VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method0(GLint, getDataSize,
	          Properties::NON_VIRTUAL,
	          __GLint__getDataSize,
	          "",
	          "");
	I_Method0(GLenum, getDataType,
	          Properties::NON_VIRTUAL,
	          __GLenum__getDataType,
	          "",
	          "");
	I_Method0(const GLvoid *, getDataPointer,
	          Properties::PURE_VIRTUAL,
	          __C5_GLvoid_P1__getDataPointer,
	          "",
	          "");
	I_Method0(unsigned int, getTotalDataSize,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getTotalDataSize,
	          "",
	          "");
	I_Method0(unsigned int, getNumElements,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__getNumElements,
	          "",
	          "");
	I_Method0(void, trim,
	          Properties::VIRTUAL,
	          __void__trim,
	          "Frees unused space on this vector - i.e. ",
	          "the difference between size() and max_size() of the underlying vector. ");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "Dirty the primitive, which increments the modified count, to force buffer objects to update. ",
	          "");
	I_Method1(void, setModifiedCount, IN, unsigned int, value,
	          Properties::NON_VIRTUAL,
	          __void__setModifiedCount__unsigned_int,
	          "Set the modified count value. ",
	          "");
	I_Method0(unsigned int, getModifiedCount,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__getModifiedCount,
	          "Get modified count value. ",
	          "");
	I_SimpleProperty(const GLvoid *, DataPointer, 
	                 __C5_GLvoid_P1__getDataPointer, 
	                 0);
	I_SimpleProperty(GLint, DataSize, 
	                 __GLint__getDataSize, 
	                 0);
	I_SimpleProperty(GLenum, DataType, 
	                 __GLenum__getDataType, 
	                 0);
	I_SimpleProperty(unsigned int, ModifiedCount, 
	                 __unsigned_int__getModifiedCount, 
	                 __void__setModifiedCount__unsigned_int);
	I_SimpleProperty(unsigned int, TotalDataSize, 
	                 __unsigned_int__getTotalDataSize, 
	                 0);
	I_SimpleProperty(osg::Array::Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::IndexArray)
	I_BaseType(osg::Array);
	I_BaseType(osg::Array);
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____IndexArray__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____IndexArray__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method1(unsigned int, index, IN, unsigned int, pos,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__index__unsigned_int,
	          "",
	          "");
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____IndexArray__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____IndexArray__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method1(unsigned int, index, IN, unsigned int, pos,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__index__unsigned_int,
	          "",
	          "");
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::IndexArray)
	I_BaseType(osg::Array);
	I_BaseType(osg::Array);
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____IndexArray__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____IndexArray__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method1(unsigned int, index, IN, unsigned int, pos,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__index__unsigned_int,
	          "",
	          "");
	I_ConstructorWithDefaults3(IN, osg::Array::Type, arrayType, osg::Array::ArrayType, IN, GLint, dataSize, 0, IN, GLenum, dataType, 0,
	                           ____IndexArray__Type__GLint__GLenum,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::Array &, array, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____IndexArray__C5_Array_R1__C5_CopyOp_R1,
	                           "",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method1(unsigned int, index, IN, unsigned int, pos,
	          Properties::PURE_VIRTUAL,
	          __unsigned_int__index__unsigned_int,
	          "",
	          "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ValueVisitor)
	I_Constructor0(____ValueVisitor,
	               "",
	               "");
	I_Method1(void, apply, IN, GLbyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLbyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLshort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLshort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLushort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLushort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLubyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLubyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLuint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLuint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLfloat &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLfloat_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4ub &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4ub_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4s_R1,
	          "",
	          "");
	I_Constructor0(____ValueVisitor,
	               "",
	               "");
	I_Method1(void, apply, IN, GLbyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLbyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLshort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLshort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLushort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLushort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLubyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLubyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLuint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLuint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLfloat &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLfloat_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4ub &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4ub_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4s_R1,
	          "",
	          "");
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ValueVisitor)
	I_Constructor0(____ValueVisitor,
	               "",
	               "");
	I_Method1(void, apply, IN, GLbyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLbyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLshort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLshort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLushort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLushort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLubyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLubyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLuint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLuint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLfloat &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLfloat_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4ub &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4ub_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4s_R1,
	          "",
	          "");
	I_Constructor0(____ValueVisitor,
	               "",
	               "");
	I_Method1(void, apply, IN, GLbyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLbyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLshort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLshort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLushort &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLushort_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLubyte &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLubyte_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLuint &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLuint_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, GLfloat &, x,
	          Properties::VIRTUAL,
	          __void__apply__GLfloat_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4 &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4ub &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4ub_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4b &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4b_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec2s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec2s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec3s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec3s_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Vec4s &, x,
	          Properties::VIRTUAL,
	          __void__apply__Vec4s_R1,
	          "",
	          "");
END_REFLECTOR


	STD_VECTOR_REFLECTOR(std::vector<osg::Vec2>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec3>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec4>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec2b>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec3b>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec4b>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec2s>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec3s>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec4s>);
	STD_VECTOR_REFLECTOR(std::vector<osg::Vec4ub>);
	STD_VECTOR_REFLECTOR(std::vector<GLubyte>);
	STD_VECTOR_REFLECTOR(std::vector<GLbyte>);
	STD_VECTOR_REFLECTOR(std::vector<GLushort>);
	STD_VECTOR_REFLECTOR(std::vector<GLshort>);
	STD_VECTOR_REFLECTOR(std::vector<GLuint>);
	STD_VECTOR_REFLECTOR(std::vector<GLint>);
	
