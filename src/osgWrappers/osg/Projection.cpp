// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Matrix.svn-base>
#include <osg/.svn/text-base/NodeVisitor.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/Projection>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::Projection)
	I_BaseType(osg::Group);
	I_BaseType(osg::Group);
	I_Constructor0(____Projection,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Projection &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Projection__C5_Projection_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Constructor1(IN, const osg::Matrix &, matix,
	               Properties::NON_EXPLICIT,
	               ____Projection__C5_Matrix_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setMatrix, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__setMatrix__C5_Matrix_R1,
	          "Set the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getMatrix,
	          "Get the transform's matrix. ",
	          "");
	I_Method1(void, preMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__preMult__C5_Matrix_R1,
	          "preMult transform. ",
	          "");
	I_Method1(void, postMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__postMult__C5_Matrix_R1,
	          "postMult transform. ",
	          "");
	I_Constructor0(____Projection,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Projection &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Projection__C5_Projection_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Constructor1(IN, const osg::Matrix &, matix,
	               Properties::NON_EXPLICIT,
	               ____Projection__C5_Matrix_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setMatrix, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__setMatrix__C5_Matrix_R1,
	          "Set the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getMatrix,
	          "Get the transform's matrix. ",
	          "");
	I_Method1(void, preMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__preMult__C5_Matrix_R1,
	          "preMult transform. ",
	          "");
	I_Method1(void, postMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__postMult__C5_Matrix_R1,
	          "postMult transform. ",
	          "");
	I_SimpleProperty(const osg::Matrix &, Matrix, 
	                 __C5_Matrix_R1__getMatrix, 
	                 __void__setMatrix__C5_Matrix_R1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Projection)
	I_BaseType(osg::Group);
	I_BaseType(osg::Group);
	I_Constructor0(____Projection,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Projection &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Projection__C5_Projection_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Constructor1(IN, const osg::Matrix &, matix,
	               Properties::NON_EXPLICIT,
	               ____Projection__C5_Matrix_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setMatrix, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__setMatrix__C5_Matrix_R1,
	          "Set the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getMatrix,
	          "Get the transform's matrix. ",
	          "");
	I_Method1(void, preMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__preMult__C5_Matrix_R1,
	          "preMult transform. ",
	          "");
	I_Method1(void, postMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__postMult__C5_Matrix_R1,
	          "postMult transform. ",
	          "");
	I_Constructor0(____Projection,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Projection &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Projection__C5_Projection_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Constructor1(IN, const osg::Matrix &, matix,
	               Properties::NON_EXPLICIT,
	               ____Projection__C5_Matrix_R1,
	               "",
	               "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setMatrix, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__setMatrix__C5_Matrix_R1,
	          "Set the transform's matrix. ",
	          "");
	I_Method0(const osg::Matrix &, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_Matrix_R1__getMatrix,
	          "Get the transform's matrix. ",
	          "");
	I_Method1(void, preMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__preMult__C5_Matrix_R1,
	          "preMult transform. ",
	          "");
	I_Method1(void, postMult, IN, const osg::Matrix &, mat,
	          Properties::NON_VIRTUAL,
	          __void__postMult__C5_Matrix_R1,
	          "postMult transform. ",
	          "");
	I_SimpleProperty(const osg::Matrix &, Matrix, 
	                 __C5_Matrix_R1__getMatrix, 
	                 __void__setMatrix__C5_Matrix_R1);
END_REFLECTOR

