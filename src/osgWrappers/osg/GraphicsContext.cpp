// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/GraphicsContext>
#include <osg/GraphicsThread>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::GraphicsContext)
	I_BaseType(osg::Referenced);
	I_Method0(const osg::GraphicsContext::Traits *, getTraits);
	I_Method1(void, setState, IN, osg::State *, state);
	I_Method0(osg::State *, getState);
	I_Method0(const osg::State *, getState);
	I_Method0(bool, realize);
	I_MethodWithDefaults1(void, close, IN, bool, callCloseImplementation, true);
	I_Method0(void, swapBuffers);
	I_Method0(bool, isRealized);
	I_Method0(void, makeCurrent);
	I_Method1(void, makeContextCurrent, IN, osg::GraphicsContext *, readContext);
	I_Method0(void, releaseContext);
	I_Method0(bool, isCurrent);
	I_Method1(void, bindPBufferToTexture, IN, GLenum, buffer);
	I_Method0(void, createGraphicsThread);
	I_Method1(void, setGraphicsThread, IN, osg::GraphicsThread *, gt);
	I_Method0(osg::GraphicsThread *, getGraphicsThread);
	I_Method0(const osg::GraphicsThread *, getGraphicsThread);
	I_Method0(bool, realizeImplementation);
	I_Method0(bool, isRealizedImplementation);
	I_Method0(void, closeImplementation);
	I_Method0(void, makeCurrentImplementation);
	I_Method1(void, makeContextCurrentImplementation, IN, osg::GraphicsContext *, readContext);
	I_Method1(void, bindPBufferToTextureImplementation, IN, GLenum, buffer);
	I_Method0(void, swapBuffersImplementation);
	I_StaticMethod1(void, setCreateGraphicsContextCallback, IN, osg::GraphicsContext::CreateGraphicContextCallback *, callback);
	I_StaticMethod0(osg::GraphicsContext::CreateGraphicContextCallback *, getCreateGraphicsContextCallback);
	I_StaticMethod1(osg::GraphicsContext *, createGraphicsContext, IN, osg::GraphicsContext::Traits *, traits);
	I_StaticMethod0(unsigned int, createNewContextID);
	I_StaticMethod1(void, incrementContextIDUsageCount, IN, unsigned int, contextID);
	I_StaticMethod1(void, decrementContextIDUsageCount, IN, unsigned int, contextID);
	I_Property(osg::GraphicsThread *, GraphicsThread);
	I_Property(osg::State *, State);
	I_ReadOnlyProperty(const osg::GraphicsContext::Traits *, Traits);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::GraphicsContext::CreateGraphicContextCallback)
	I_BaseType(osg::Referenced);
	I_Constructor0();
	I_Method1(osg::GraphicsContext *, createGraphicsContext, IN, osg::GraphicsContext::Traits *, traits);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::GraphicsContext::Traits)
	I_BaseType(osg::Referenced);
	I_Constructor0();
	I_PublicMemberProperty(std::string, _hostName);
	I_PublicMemberProperty(unsigned int, _displayNum);
	I_PublicMemberProperty(unsigned int, _screenNum);
	I_PublicMemberProperty(unsigned int, _x);
	I_PublicMemberProperty(unsigned int, _y);
	I_PublicMemberProperty(unsigned int, _width);
	I_PublicMemberProperty(unsigned int, _height);
	I_PublicMemberProperty(std::string, _windowName);
	I_PublicMemberProperty(bool, _windowDecoration);
	I_PublicMemberProperty(bool, _supportsResize);
	I_PublicMemberProperty(unsigned int, _red);
	I_PublicMemberProperty(unsigned int, _blue);
	I_PublicMemberProperty(unsigned int, _green);
	I_PublicMemberProperty(unsigned int, _alpha);
	I_PublicMemberProperty(unsigned int, _depth);
	I_PublicMemberProperty(unsigned int, _stencil);
	I_PublicMemberProperty(bool, _pbuffer);
	I_PublicMemberProperty(bool, _quadBufferStereo);
	I_PublicMemberProperty(bool, _doubleBuffer);
	I_PublicMemberProperty(GLenum, _target);
	I_PublicMemberProperty(unsigned int, _level);
	I_PublicMemberProperty(unsigned int, _face);
	I_PublicMemberProperty(unsigned int, _mipMapGeneration);
	I_PublicMemberProperty(osg::GraphicsContext *, _sharedContext);
END_REFLECTOR

