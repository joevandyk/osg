// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Array>
#include <osg/CopyOp>
#include <osg/Matrix>
#include <osg/Object>
#include <osg/Quat>
#include <osg/Shape>
#include <osg/Vec3>

BEGIN_OBJECT_REFLECTOR(osg::Box)
	BaseType(osg::Shape);
	Constructor0();
	Constructor2(IN, const osg::Vec3 &, center, IN, float, width);
	Constructor4(IN, const osg::Vec3 &, center, IN, float, lengthX, IN, float, lengthY, IN, float, lengthZ);
	ConstructorWithDefaults2(IN, const osg::Box &, box, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method0(bool, valid);
	Method2(void, set, IN, const osg::Vec3 &, center, IN, const osg::Vec3 &, halfLengths);
	Method1(void, setCenter, IN, const osg::Vec3 &, center);
	Method0(const osg::Vec3 &, getCenter);
	Method1(void, setHalfLengths, IN, const osg::Vec3 &, halfLengths);
	Method0(const osg::Vec3 &, getHalfLengths);
	Method1(void, setRotation, IN, const osg::Quat &, quat);
	Method0(const osg::Quat &, getRotation);
	Method0(osg::Matrix, computeRotationMatrix);
	Method0(bool, zeroRotation);
	Property(const osg::Vec3 &, Center);
	Property(const osg::Vec3 &, HalfLengths);
	Property(const osg::Quat &, Rotation);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Capsule)
	BaseType(osg::Shape);
	Constructor0();
	Constructor3(IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	ConstructorWithDefaults2(IN, const osg::Capsule &, capsule, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method0(bool, valid);
	Method3(void, set, IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	Method1(void, setCenter, IN, const osg::Vec3 &, center);
	Method0(const osg::Vec3 &, getCenter);
	Method1(void, setRadius, IN, float, radius);
	Method0(float, getRadius);
	Method1(void, setHeight, IN, float, height);
	Method0(float, getHeight);
	Method1(void, setRotation, IN, const osg::Quat &, quat);
	Method0(const osg::Quat &, getRotation);
	Method0(osg::Matrix, computeRotationMatrix);
	Method0(bool, zeroRotation);
	Property(const osg::Vec3 &, Center);
	Property(float, Height);
	Property(float, Radius);
	Property(const osg::Quat &, Rotation);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osg::Shape > >, osg::CompositeShape::ChildList);

BEGIN_OBJECT_REFLECTOR(osg::CompositeShape)
	BaseType(osg::Shape);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::CompositeShape &, cs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method1(void, setShape, IN, osg::Shape *, shape);
	Method0(osg::Shape *, getShape);
	Method0(const osg::Shape *, getShape);
	Method0(unsigned int, getNumChildren);
	Method1(osg::Shape *, getChild, IN, unsigned int, i);
	Method1(const osg::Shape *, getChild, IN, unsigned int, i);
	Method1(void, addChild, IN, osg::Shape *, shape);
	Method1(void, removeChild, IN, unsigned int, i);
	Method1(unsigned int, findChildNo, IN, osg::Shape *, shape);
	ArrayProperty_GA(osg::Shape *, Child, Children, unsigned int, void);
	Property(osg::Shape *, Shape);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Cone)
	BaseType(osg::Shape);
	Constructor0();
	Constructor3(IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	ConstructorWithDefaults2(IN, const osg::Cone &, cone, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method0(bool, valid);
	Method3(void, set, IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	Method1(void, setCenter, IN, const osg::Vec3 &, center);
	Method0(const osg::Vec3 &, getCenter);
	Method1(void, setRadius, IN, float, radius);
	Method0(float, getRadius);
	Method1(void, setHeight, IN, float, height);
	Method0(float, getHeight);
	Method1(void, setRotation, IN, const osg::Quat &, quat);
	Method0(const osg::Quat &, getRotation);
	Method0(osg::Matrix, computeRotationMatrix);
	Method0(bool, zeroRotation);
	Method0(float, getBaseOffsetFactor);
	Method0(float, getBaseOffset);
	ReadOnlyProperty(float, BaseOffset);
	ReadOnlyProperty(float, BaseOffsetFactor);
	Property(const osg::Vec3 &, Center);
	Property(float, Height);
	Property(float, Radius);
	Property(const osg::Quat &, Rotation);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ConstShapeVisitor)
	Constructor0();
	Method1(void, apply, IN, const osg::Sphere &, x);
	Method1(void, apply, IN, const osg::Box &, x);
	Method1(void, apply, IN, const osg::Cone &, x);
	Method1(void, apply, IN, const osg::Cylinder &, x);
	Method1(void, apply, IN, const osg::Capsule &, x);
	Method1(void, apply, IN, const osg::InfinitePlane &, x);
	Method1(void, apply, IN, const osg::TriangleMesh &, x);
	Method1(void, apply, IN, const osg::ConvexHull &, x);
	Method1(void, apply, IN, const osg::HeightField &, x);
	Method1(void, apply, IN, const osg::CompositeShape &, x);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::ConvexHull)
	BaseType(osg::TriangleMesh);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::ConvexHull &, hull, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Cylinder)
	BaseType(osg::Shape);
	Constructor0();
	Constructor3(IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	ConstructorWithDefaults2(IN, const osg::Cylinder &, cylinder, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method0(bool, valid);
	Method3(void, set, IN, const osg::Vec3 &, center, IN, float, radius, IN, float, height);
	Method1(void, setCenter, IN, const osg::Vec3 &, center);
	Method0(const osg::Vec3 &, getCenter);
	Method1(void, setRadius, IN, float, radius);
	Method0(float, getRadius);
	Method1(void, setHeight, IN, float, height);
	Method0(float, getHeight);
	Method1(void, setRotation, IN, const osg::Quat &, quat);
	Method0(const osg::Quat &, getRotation);
	Method0(osg::Matrix, computeRotationMatrix);
	Method0(bool, zeroRotation);
	Property(const osg::Vec3 &, Center);
	Property(float, Height);
	Property(float, Radius);
	Property(const osg::Quat &, Rotation);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< float >, osg::HeightField::HeightList);

BEGIN_OBJECT_REFLECTOR(osg::HeightField)
	BaseType(osg::Shape);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::HeightField &, mesh, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method2(void, allocate, IN, unsigned int, numColumns, IN, unsigned int, numRows);
	Method0(unsigned int, getNumColumns);
	Method0(unsigned int, getNumRows);
	Method1(void, setOrigin, IN, const osg::Vec3 &, origin);
	Method0(const osg::Vec3 &, getOrigin);
	Method1(void, setXInterval, IN, float, dx);
	Method0(float, getXInterval);
	Method1(void, setYInterval, IN, float, dy);
	Method0(float, getYInterval);
	Method1(void, setSkirtHeight, IN, float, skirtHeight);
	Method0(float, getSkirtHeight);
	Method1(void, setBorderWidth, IN, unsigned int, borderWidth);
	Method0(unsigned int, getBorderWidth);
	Method1(void, setRotation, IN, const osg::Quat &, quat);
	Method0(const osg::Quat &, getRotation);
	Method0(osg::Matrix, computeRotationMatrix);
	Method0(bool, zeroRotation);
	Method3(void, setHeight, IN, unsigned int, c, IN, unsigned int, r, IN, float, value);
	Method2(float &, getHeight, IN, unsigned int, c, IN, unsigned int, r);
	Method2(float, getHeight, IN, unsigned int, c, IN, unsigned int, r);
	Method0(osg::HeightField::HeightList &, getHeightList);
	Method0(const osg::HeightField::HeightList &, getHeightList);
	Method2(osg::Vec3, getVertex, IN, unsigned int, c, IN, unsigned int, r);
	Method2(osg::Vec3, getNormal, IN, unsigned int, c, IN, unsigned int, r);
	Property(unsigned int, BorderWidth);
	IndexedProperty2(float, Height, unsigned int, c, unsigned int, r);
	ReadOnlyProperty(osg::HeightField::HeightList &, HeightList);
	Property(const osg::Vec3 &, Origin);
	Property(const osg::Quat &, Rotation);
	Property(float, SkirtHeight);
	Property(float, XInterval);
	Property(float, YInterval);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::InfinitePlane)
	BaseType(osg::Shape);
	BaseType(osg::Plane);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::InfinitePlane &, plane, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::Shape)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Shape &, sa, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, x);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, x);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, x);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ShapeVisitor)
	Constructor0();
	Method1(void, apply, IN, osg::Sphere &, x);
	Method1(void, apply, IN, osg::Box &, x);
	Method1(void, apply, IN, osg::Cone &, x);
	Method1(void, apply, IN, osg::Cylinder &, x);
	Method1(void, apply, IN, osg::Capsule &, x);
	Method1(void, apply, IN, osg::InfinitePlane &, x);
	Method1(void, apply, IN, osg::TriangleMesh &, x);
	Method1(void, apply, IN, osg::ConvexHull &, x);
	Method1(void, apply, IN, osg::HeightField &, x);
	Method1(void, apply, IN, osg::CompositeShape &, x);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Sphere)
	BaseType(osg::Shape);
	Constructor0();
	Constructor2(IN, const osg::Vec3 &, center, IN, float, radius);
	ConstructorWithDefaults2(IN, const osg::Sphere &, sphere, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method0(bool, valid);
	Method2(void, set, IN, const osg::Vec3 &, center, IN, float, radius);
	Method1(void, setCenter, IN, const osg::Vec3 &, center);
	Method0(const osg::Vec3 &, getCenter);
	Method1(void, setRadius, IN, float, radius);
	Method0(float, getRadius);
	Property(const osg::Vec3 &, Center);
	Property(float, Radius);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::TriangleMesh)
	BaseType(osg::Shape);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::TriangleMesh &, mesh, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, accept, IN, osg::ShapeVisitor &, sv);
	Method1(void, accept, IN, osg::ConstShapeVisitor &, csv);
	Method1(void, setVertices, IN, osg::Vec3Array *, vertices);
	Method0(osg::Vec3Array *, getVertices);
	Method0(const osg::Vec3Array *, getVertices);
	Method1(void, setIndices, IN, osg::IndexArray *, indices);
	Method0(osg::IndexArray *, getIndices);
	Method0(const osg::IndexArray *, getIndices);
	Property(osg::IndexArray *, Indices);
	Property(osg::Vec3Array *, Vertices);
END_REFLECTOR

TYPE_NAME_ALIAS(osg::HeightField, osg::Grid);

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::Shape >)
	Constructor0();
	Constructor1(IN, osg::Shape *, t);
	Constructor1(IN, const osg::ref_ptr< osg::Shape > &, rp);
	Method0(bool, valid);
	Method0(osg::Shape *, get);
	Method0(const osg::Shape *, get);
	Method0(osg::Shape *, take);
	Method0(osg::Shape *, release);
	ReadOnlyProperty(osg::Shape *, );
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< float >);

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osg::Shape > >);

