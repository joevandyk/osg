// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/TexEnv>
#include <osg/Vec4>

BEGIN_ENUM_REFLECTOR(osg::TexEnv::Mode)
	EnumLabel(osg::TexEnv::DECAL);
	EnumLabel(osg::TexEnv::MODULATE);
	EnumLabel(osg::TexEnv::BLEND);
	EnumLabel(osg::TexEnv::REPLACE);
	EnumLabel(osg::TexEnv::ADD);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::TexEnv)
	BaseType(osg::StateAttribute);
	ConstructorWithDefaults1(IN, osg::TexEnv::Mode, mode, osg::TexEnv::MODULATE);
	ConstructorWithDefaults2(IN, const osg::TexEnv &, texenv, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::StateAttribute::Type, getType);
	Method0(bool, isTextureAttribute);
	Method1(int, compare, IN, const osg::StateAttribute &, sa);
	Method1(void, setMode, IN, osg::TexEnv::Mode, mode);
	Method0(osg::TexEnv::Mode, getMode);
	Method1(void, setColor, IN, const osg::Vec4 &, color);
	Method0(osg::Vec4 &, getColor);
	Method0(const osg::Vec4 &, getColor);
	Method1(void, apply, IN, osg::State &, state);
	Property(const osg::Vec4 &, Color);
	Property(osg::TexEnv::Mode, Mode);
	ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

