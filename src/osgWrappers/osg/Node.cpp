// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BoundingSphere>
#include <osg/CopyOp>
#include <osg/Group>
#include <osg/Node>
#include <osg/NodeCallback>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/StateSet>
#include <osg/Transform>

TYPE_NAME_ALIAS(std::vector< osg::Group * >, osg::Node::ParentList);

TYPE_NAME_ALIAS(unsigned int, osg::Node::NodeMask);

TYPE_NAME_ALIAS(std::vector< std::string >, osg::Node::DescriptionList);

BEGIN_OBJECT_REFLECTOR(osg::Node)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Node &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::Group *, asGroup);
	Method0(const osg::Group *, asGroup);
	Method0(osg::Transform *, asTransform);
	Method0(const osg::Transform *, asTransform);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method1(void, ascend, IN, osg::NodeVisitor &, nv);
	Method1(void, traverse, IN, osg::NodeVisitor &, x);
	Method1(void, setName, IN, const std::string &, name);
	Method1(void, setName, IN, const char *, name);
	Method0(const std::string &, getName);
	Method0(const osg::Node::ParentList &, getParents);
	Method0(osg::Node::ParentList, getParents);
	Method1(osg::Group *, getParent, IN, unsigned int, i);
	Method1(const osg::Group *, getParent, IN, unsigned int, i);
	Method0(unsigned int, getNumParents);
	Method1(void, setUpdateCallback, IN, osg::NodeCallback *, nc);
	Method0(osg::NodeCallback *, getUpdateCallback);
	Method0(const osg::NodeCallback *, getUpdateCallback);
	Method0(unsigned int, getNumChildrenRequiringUpdateTraversal);
	Method1(void, setEventCallback, IN, osg::NodeCallback *, nc);
	Method0(osg::NodeCallback *, getEventCallback);
	Method0(const osg::NodeCallback *, getEventCallback);
	Method0(unsigned int, getNumChildrenRequiringEventTraversal);
	Method1(void, setCullCallback, IN, osg::NodeCallback *, nc);
	Method0(osg::NodeCallback *, getCullCallback);
	Method0(const osg::NodeCallback *, getCullCallback);
	Method1(void, setCullingActive, IN, bool, active);
	Method0(bool, getCullingActive);
	Method0(unsigned int, getNumChildrenWithCullingDisabled);
	Method0(bool, isCullingActive);
	Method0(unsigned int, getNumChildrenWithOccluderNodes);
	Method0(bool, containsOccluderNodes);
	Method1(void, setNodeMask, IN, osg::Node::NodeMask, nm);
	Method0(osg::Node::NodeMask, getNodeMask);
	Method1(void, setDescriptions, IN, const osg::Node::DescriptionList &, descriptions);
	Method0(osg::Node::DescriptionList &, getDescriptions);
	Method0(const osg::Node::DescriptionList &, getDescriptions);
	Method1(const std::string &, getDescription, IN, unsigned int, i);
	Method1(std::string &, getDescription, IN, unsigned int, i);
	Method0(unsigned int, getNumDescriptions);
	Method1(void, addDescription, IN, const std::string &, desc);
	Method1(void, setStateSet, IN, osg::StateSet *, dstate);
	Method0(osg::StateSet *, getOrCreateStateSet);
	Method0(osg::StateSet *, getStateSet);
	Method0(const osg::StateSet *, getStateSet);
	Method0(const osg::BoundingSphere &, getBound);
	Method0(void, dirtyBound);
	ReadOnlyProperty(const osg::BoundingSphere &, Bound);
	Property(osg::NodeCallback *, CullCallback);
	Property(bool, CullingActive);
	ArrayProperty_GA(const std::string &, Description, Descriptions, unsigned int, void);
	Property(const osg::Node::DescriptionList &, Descriptions);
	Property(osg::NodeCallback *, EventCallback);
	Property(const std::string &, Name);
	Property(osg::Node::NodeMask, NodeMask);
	ArrayProperty_G(osg::Group *, Parent, Parents, unsigned int, void);
	ReadOnlyProperty(osg::Node::ParentList, Parents);
	Property(osg::StateSet *, StateSet);
	Property(osg::NodeCallback *, UpdateCallback);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::Node * >, osg::NodePath);

STD_VECTOR_REFLECTOR(std::vector< osg::Group * >);

STD_VECTOR_REFLECTOR(std::vector< std::string >);

