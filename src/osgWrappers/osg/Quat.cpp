// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Matrixd>
#include <osg/Matrixf>
#include <osg/Quat>
#include <osg/Vec3d>
#include <osg/Vec3f>
#include <osg/Vec4d>
#include <osg/Vec4f>

TYPE_NAME_ALIAS(double, osg::Quat::value_type);

BEGIN_VALUE_REFLECTOR(osg::Quat)
	Constructor0();
	Constructor4(IN, osg::Quat::value_type, x, IN, osg::Quat::value_type, y, IN, osg::Quat::value_type, z, IN, osg::Quat::value_type, w);
	Constructor1(IN, const osg::Vec4f &, v);
	Constructor1(IN, const osg::Vec4d &, v);
	Constructor2(IN, osg::Quat::value_type, angle, IN, const osg::Vec3f &, axis);
	Constructor2(IN, osg::Quat::value_type, angle, IN, const osg::Vec3d &, axis);
	Constructor6(IN, osg::Quat::value_type, angle1, IN, const osg::Vec3f &, axis1, IN, osg::Quat::value_type, angle2, IN, const osg::Vec3f &, axis2, IN, osg::Quat::value_type, angle3, IN, const osg::Vec3f &, axis3);
	Constructor6(IN, osg::Quat::value_type, angle1, IN, const osg::Vec3d &, axis1, IN, osg::Quat::value_type, angle2, IN, const osg::Vec3d &, axis2, IN, osg::Quat::value_type, angle3, IN, const osg::Vec3d &, axis3);
	Method0(osg::Vec4d, asVec4);
	Method0(osg::Vec3d, asVec3);
	Method4(void, set, IN, osg::Quat::value_type, x, IN, osg::Quat::value_type, y, IN, osg::Quat::value_type, z, IN, osg::Quat::value_type, w);
	Method1(void, set, IN, const osg::Vec4f &, v);
	Method1(void, set, IN, const osg::Vec4d &, v);
	Method1(void, set, IN, const osg::Matrixf &, matrix);
	Method1(void, set, IN, const osg::Matrixd &, matrix);
	Method1(void, get, IN, osg::Matrixf &, matrix);
	Method1(void, get, IN, osg::Matrixd &, matrix);
	Method0(osg::Quat::value_type &, x);
	Method0(osg::Quat::value_type &, y);
	Method0(osg::Quat::value_type &, z);
	Method0(osg::Quat::value_type &, w);
	Method0(osg::Quat::value_type, x);
	Method0(osg::Quat::value_type, y);
	Method0(osg::Quat::value_type, z);
	Method0(osg::Quat::value_type, w);
	Method0(bool, zeroRotation);
	Method0(osg::Quat::value_type, length);
	Method0(osg::Quat::value_type, length2);
	Method0(osg::Quat, conj);
	Method0(const osg::Quat, inverse);
	Method4(void, makeRotate, IN, osg::Quat::value_type, angle, IN, osg::Quat::value_type, x, IN, osg::Quat::value_type, y, IN, osg::Quat::value_type, z);
	Method2(void, makeRotate, IN, osg::Quat::value_type, angle, IN, const osg::Vec3f &, vec);
	Method2(void, makeRotate, IN, osg::Quat::value_type, angle, IN, const osg::Vec3d &, vec);
	Method6(void, makeRotate, IN, osg::Quat::value_type, angle1, IN, const osg::Vec3f &, axis1, IN, osg::Quat::value_type, angle2, IN, const osg::Vec3f &, axis2, IN, osg::Quat::value_type, angle3, IN, const osg::Vec3f &, axis3);
	Method6(void, makeRotate, IN, osg::Quat::value_type, angle1, IN, const osg::Vec3d &, axis1, IN, osg::Quat::value_type, angle2, IN, const osg::Vec3d &, axis2, IN, osg::Quat::value_type, angle3, IN, const osg::Vec3d &, axis3);
	Method2(void, makeRotate, IN, const osg::Vec3f &, vec1, IN, const osg::Vec3f &, vec2);
	Method2(void, makeRotate, IN, const osg::Vec3d &, vec1, IN, const osg::Vec3d &, vec2);
	Method2(void, makeRotate_original, IN, const osg::Vec3d &, vec1, IN, const osg::Vec3d &, vec2);
	Method4(void, getRotate, IN, osg::Quat::value_type &, angle, IN, osg::Quat::value_type &, x, IN, osg::Quat::value_type &, y, IN, osg::Quat::value_type &, z);
	Method2(void, getRotate, IN, osg::Quat::value_type &, angle, IN, osg::Vec3f &, vec);
	Method2(void, getRotate, IN, osg::Quat::value_type &, angle, IN, osg::Vec3d &, vec);
	Method3(void, slerp, IN, osg::Quat::value_type, t, IN, const osg::Quat &, from, IN, const osg::Quat &, to);
	WriteOnlyProperty(const osg::Vec4f &, );
END_REFLECTOR

