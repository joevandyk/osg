// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BlendColor>
#include <osg/CopyOp>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>
#include <osg/Vec4>

BEGIN_OBJECT_REFLECTOR(osg::BlendColor)
	BaseType(osg::StateAttribute);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::BlendColor &, trans, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::StateAttribute::Type, getType);
	Method1(int, compare, IN, const osg::StateAttribute &, sa);
	Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage);
	Method1(void, setConstantColor, IN, const osg::Vec4 &, color);
	Method0(osg::Vec4, getConstantColor);
	Method1(void, apply, IN, osg::State &, state);
	ReadOnlyProperty(osg::Vec4, ConstantColor);
	ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::BlendColor::Extensions)
	BaseType(osg::Referenced);
	Constructor0();
	Constructor1(IN, const osg::BlendColor::Extensions &, rhs);
	Method1(void, lowestCommonDenominator, IN, const osg::BlendColor::Extensions &, rhs);
	Method0(void, setupGLExtenions);
	Method1(void, setBlendColorSupported, IN, bool, flag);
	Method0(bool, isBlendColorSupported);
	Method1(void, setBlendColorProc, IN, void *, ptr);
	Method4(void, glBlendColor, IN, GLclampf, red, IN, GLclampf, green, IN, GLclampf, blue, IN, GLclampf, alpha);
	WriteOnlyProperty(void *, BlendColorProc);
	WriteOnlyProperty(bool, BlendColorSupported);
END_REFLECTOR

