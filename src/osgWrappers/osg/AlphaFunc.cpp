// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/AlphaFunc.svn-base>
#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/.svn/text-base/StateAttribute.svn-base>
#include <osg/AlphaFunc>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osg::AlphaFunc::ComparisonFunction)
	I_EnumLabel(osg::AlphaFunc::NEVER);
	I_EnumLabel(osg::AlphaFunc::LESS);
	I_EnumLabel(osg::AlphaFunc::EQUAL);
	I_EnumLabel(osg::AlphaFunc::LEQUAL);
	I_EnumLabel(osg::AlphaFunc::GREATER);
	I_EnumLabel(osg::AlphaFunc::NOTEQUAL);
	I_EnumLabel(osg::AlphaFunc::GEQUAL);
	I_EnumLabel(osg::AlphaFunc::ALWAYS);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::AlphaFunc)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____AlphaFunc,
	               "",
	               "");
	I_Constructor2(IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	               ____AlphaFunc__ComparisonFunction__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::AlphaFunc &, af, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AlphaFunc__C5_AlphaFunc_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method2(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction__float,
	          "",
	          "");
	I_Method1(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction,
	          "",
	          "");
	I_Method0(osg::AlphaFunc::ComparisonFunction, getFunction,
	          Properties::NON_VIRTUAL,
	          __ComparisonFunction__getFunction,
	          "",
	          "");
	I_Method1(void, setReferenceValue, IN, float, value,
	          Properties::NON_VIRTUAL,
	          __void__setReferenceValue__float,
	          "",
	          "");
	I_Method0(float, getReferenceValue,
	          Properties::NON_VIRTUAL,
	          __float__getReferenceValue,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____AlphaFunc,
	               "",
	               "");
	I_Constructor2(IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	               ____AlphaFunc__ComparisonFunction__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::AlphaFunc &, af, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AlphaFunc__C5_AlphaFunc_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method2(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction__float,
	          "",
	          "");
	I_Method1(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction,
	          "",
	          "");
	I_Method0(osg::AlphaFunc::ComparisonFunction, getFunction,
	          Properties::NON_VIRTUAL,
	          __ComparisonFunction__getFunction,
	          "",
	          "");
	I_Method1(void, setReferenceValue, IN, float, value,
	          Properties::NON_VIRTUAL,
	          __void__setReferenceValue__float,
	          "",
	          "");
	I_Method0(float, getReferenceValue,
	          Properties::NON_VIRTUAL,
	          __float__getReferenceValue,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_SimpleProperty(osg::AlphaFunc::ComparisonFunction, Function, 
	                 __ComparisonFunction__getFunction, 
	                 __void__setFunction__ComparisonFunction);
	I_SimpleProperty(float, ReferenceValue, 
	                 __float__getReferenceValue, 
	                 __void__setReferenceValue__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osg::AlphaFunc::ComparisonFunction)
	I_EnumLabel(osg::AlphaFunc::NEVER);
	I_EnumLabel(osg::AlphaFunc::LESS);
	I_EnumLabel(osg::AlphaFunc::EQUAL);
	I_EnumLabel(osg::AlphaFunc::LEQUAL);
	I_EnumLabel(osg::AlphaFunc::GREATER);
	I_EnumLabel(osg::AlphaFunc::NOTEQUAL);
	I_EnumLabel(osg::AlphaFunc::GEQUAL);
	I_EnumLabel(osg::AlphaFunc::ALWAYS);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::AlphaFunc)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____AlphaFunc,
	               "",
	               "");
	I_Constructor2(IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	               ____AlphaFunc__ComparisonFunction__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::AlphaFunc &, af, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AlphaFunc__C5_AlphaFunc_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method2(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction__float,
	          "",
	          "");
	I_Method1(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction,
	          "",
	          "");
	I_Method0(osg::AlphaFunc::ComparisonFunction, getFunction,
	          Properties::NON_VIRTUAL,
	          __ComparisonFunction__getFunction,
	          "",
	          "");
	I_Method1(void, setReferenceValue, IN, float, value,
	          Properties::NON_VIRTUAL,
	          __void__setReferenceValue__float,
	          "",
	          "");
	I_Method0(float, getReferenceValue,
	          Properties::NON_VIRTUAL,
	          __float__getReferenceValue,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____AlphaFunc,
	               "",
	               "");
	I_Constructor2(IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	               ____AlphaFunc__ComparisonFunction__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::AlphaFunc &, af, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____AlphaFunc__C5_AlphaFunc_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method2(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func, IN, float, ref,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction__float,
	          "",
	          "");
	I_Method1(void, setFunction, IN, osg::AlphaFunc::ComparisonFunction, func,
	          Properties::NON_VIRTUAL,
	          __void__setFunction__ComparisonFunction,
	          "",
	          "");
	I_Method0(osg::AlphaFunc::ComparisonFunction, getFunction,
	          Properties::NON_VIRTUAL,
	          __ComparisonFunction__getFunction,
	          "",
	          "");
	I_Method1(void, setReferenceValue, IN, float, value,
	          Properties::NON_VIRTUAL,
	          __void__setReferenceValue__float,
	          "",
	          "");
	I_Method0(float, getReferenceValue,
	          Properties::NON_VIRTUAL,
	          __float__getReferenceValue,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_SimpleProperty(osg::AlphaFunc::ComparisonFunction, Function, 
	                 __ComparisonFunction__getFunction, 
	                 __void__setFunction__ComparisonFunction);
	I_SimpleProperty(float, ReferenceValue, 
	                 __float__getReferenceValue, 
	                 __void__setReferenceValue__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

