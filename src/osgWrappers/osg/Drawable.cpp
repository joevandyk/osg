// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BoundingBox>
#include <osg/CopyOp>
#include <osg/Drawable>
#include <osg/Geometry>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/PrimitiveSet>
#include <osg/Shape>
#include <osg/State>
#include <osg/StateSet>
#include <osg/UByte4>
#include <osg/Vec2>
#include <osg/Vec3>
#include <osg/Vec4>

TYPE_NAME_ALIAS(std::vector< osg::Node * >, osg::Drawable::ParentList);

TYPE_NAME_ALIAS(unsigned int, osg::Drawable::AttributeType);

BEGIN_ENUM_REFLECTOR(osg::Drawable::AttributeTypes)
	EnumLabel(osg::Drawable::VERTICES);
	EnumLabel(osg::Drawable::WEIGHTS);
	EnumLabel(osg::Drawable::NORMALS);
	EnumLabel(osg::Drawable::COLORS);
	EnumLabel(osg::Drawable::SECONDARY_COLORS);
	EnumLabel(osg::Drawable::FOG_COORDS);
	EnumLabel(osg::Drawable::ATTIBUTE_6);
	EnumLabel(osg::Drawable::ATTIBUTE_7);
	EnumLabel(osg::Drawable::TEXTURE_COORDS);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_0);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_1);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_2);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_3);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_4);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_5);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_6);
	EnumLabel(osg::Drawable::TEXTURE_COORDS_7);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::Drawable)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::Drawable &, drawable, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method0(osg::Geometry *, asGeometry);
	Method0(const osg::Geometry *, asGeometry);
	Method0(const osg::Drawable::ParentList &, getParents);
	Method0(osg::Drawable::ParentList, getParents);
	Method1(osg::Node *, getParent, IN, unsigned int, i);
	Method1(const osg::Node *, getParent, IN, unsigned int, i);
	Method0(unsigned int, getNumParents);
	Method1(void, setStateSet, IN, osg::StateSet *, stateset);
	Method0(osg::StateSet *, getStateSet);
	Method0(const osg::StateSet *, getStateSet);
	Method0(osg::StateSet *, getOrCreateStateSet);
	Method0(void, dirtyBound);
	Method0(const osg::BoundingBox &, getBound);
	Method1(void, setShape, IN, osg::Shape *, shape);
	Method0(osg::Shape *, getShape);
	Method0(const osg::Shape *, getShape);
	Method1(void, setSupportsDisplayList, IN, bool, flag);
	Method0(bool, getSupportsDisplayList);
	Method1(void, setUseDisplayList, IN, bool, flag);
	Method0(bool, getUseDisplayList);
	Method1(void, setUseVertexBufferObjects, IN, bool, flag);
	Method0(bool, getUseVertexBufferObjects);
	Method0(void, dirtyDisplayList);
	Method0(unsigned int, getGLObjectSizeHint);
	Method1(void, draw, IN, osg::State &, state);
	Method1(void, compileGLObjects, IN, osg::State &, state);
	MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, state, 0);
	Method1(void, setUpdateCallback, IN, osg::Drawable::UpdateCallback *, ac);
	Method0(osg::Drawable::UpdateCallback *, getUpdateCallback);
	Method0(const osg::Drawable::UpdateCallback *, getUpdateCallback);
	Method1(void, setEventCallback, IN, osg::Drawable::EventCallback *, ac);
	Method0(osg::Drawable::EventCallback *, getEventCallback);
	Method0(const osg::Drawable::EventCallback *, getEventCallback);
	Method1(void, setCullCallback, IN, osg::Drawable::CullCallback *, cc);
	Method0(osg::Drawable::CullCallback *, getCullCallback);
	Method0(const osg::Drawable::CullCallback *, getCullCallback);
	Method1(void, setDrawCallback, IN, osg::Drawable::DrawCallback *, dc);
	Method0(osg::Drawable::DrawCallback *, getDrawCallback);
	Method0(const osg::Drawable::DrawCallback *, getDrawCallback);
	Method1(void, drawImplementation, IN, osg::State &, state);
	Method1(bool, supports, IN, const osg::Drawable::AttributeFunctor &, x);
	Method1(void, accept, IN, osg::Drawable::AttributeFunctor &, x);
	Method1(bool, supports, IN, const osg::Drawable::ConstAttributeFunctor &, x);
	Method1(void, accept, IN, osg::Drawable::ConstAttributeFunctor &, x);
	Method1(bool, supports, IN, const osg::PrimitiveFunctor &, x);
	Method1(void, accept, IN, osg::PrimitiveFunctor &, x);
	Method1(bool, supports, IN, const osg::PrimitiveIndexFunctor &, x);
	Method1(void, accept, IN, osg::PrimitiveIndexFunctor &, x);
	ReadOnlyProperty(const osg::BoundingBox &, Bound);
	Property(osg::Drawable::CullCallback *, CullCallback);
	Property(osg::Drawable::DrawCallback *, DrawCallback);
	Property(osg::Drawable::EventCallback *, EventCallback);
	ReadOnlyProperty(unsigned int, GLObjectSizeHint);
	ArrayProperty_G(osg::Node *, Parent, Parents, unsigned int, void);
	ReadOnlyProperty(osg::Drawable::ParentList, Parents);
	Property(osg::Shape *, Shape);
	Property(osg::StateSet *, StateSet);
	Property(bool, SupportsDisplayList);
	Property(osg::Drawable::UpdateCallback *, UpdateCallback);
	Property(bool, UseDisplayList);
	Property(bool, UseVertexBufferObjects);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::AttributeFunctor)
	Constructor0();
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLbyte *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLshort *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLint *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLubyte *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLushort *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, GLuint *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, float *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, osg::Vec2 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, osg::Vec3 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, osg::Vec4 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, unsigned, int, IN, osg::UByte4 *, x);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::ConstAttributeFunctor)
	Constructor0();
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLbyte *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLshort *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLint *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLubyte *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLushort *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const GLuint *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const float *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const osg::Vec2 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const osg::Vec3 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const osg::Vec4 *, x);
	Method3(void, apply, IN, osg::Drawable::AttributeType, x, IN, const unsigned, int, IN, const osg::UByte4 *, x);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::CullCallback)
	VirtualBaseType(osg::Object);
	Constructor0();
	Constructor2(IN, const osg::Drawable::CullCallback &, x, IN, const osg::CopyOp &, x);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method3(bool, cull, IN, osg::NodeVisitor *, x, IN, osg::Drawable *, x, IN, osg::State *, x);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::DrawCallback)
	VirtualBaseType(osg::Object);
	Constructor0();
	Constructor2(IN, const osg::Drawable::DrawCallback &, x, IN, const osg::CopyOp &, x);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method2(void, drawImplementation, IN, osg::State &, x, IN, const osg::Drawable *, x);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::EventCallback)
	VirtualBaseType(osg::Object);
	Constructor0();
	Constructor2(IN, const osg::Drawable::EventCallback &, x, IN, const osg::CopyOp &, x);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method2(void, event, IN, osg::NodeVisitor *, x, IN, osg::Drawable *, x);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Drawable::Extensions)
	BaseType(osg::Referenced);
	Constructor1(IN, unsigned int, contextID);
	Constructor1(IN, const osg::Drawable::Extensions &, rhs);
	Method1(void, lowestCommonDenominator, IN, const osg::Drawable::Extensions &, rhs);
	Method1(void, setupGLExtenions, IN, unsigned int, contextID);
	Method1(void, setVertexProgramSupported, IN, bool, flag);
	Method0(bool, isVertexProgramSupported);
	Method1(void, setSecondaryColorSupported, IN, bool, flag);
	Method0(bool, isSecondaryColorSupported);
	Method1(void, setFogCoordSupported, IN, bool, flag);
	Method0(bool, isFogCoordSupported);
	Method1(void, setMultiTexSupported, IN, bool, flag);
	Method0(bool, isMultiTexSupported);
	Method1(void, setOcclusionQuerySupported, IN, bool, flag);
	Method0(bool, isOcclusionQuerySupported);
	Method1(void, setARBOcclusionQuerySupported, IN, bool, flag);
	Method0(bool, isARBOcclusionQuerySupported);
	Method1(void, glSecondaryColor3ubv, IN, const GLubyte *, coord);
	Method1(void, glSecondaryColor3fv, IN, const GLfloat *, coord);
	Method1(void, glFogCoordfv, IN, const GLfloat *, coord);
	Method2(void, glMultiTexCoord1f, IN, GLenum, target, IN, GLfloat, coord);
	Method2(void, glMultiTexCoord2fv, IN, GLenum, target, IN, const GLfloat *, coord);
	Method2(void, glMultiTexCoord3fv, IN, GLenum, target, IN, const GLfloat *, coord);
	Method2(void, glMultiTexCoord4fv, IN, GLenum, target, IN, const GLfloat *, coord);
	Method2(void, glVertexAttrib1s, IN, unsigned int, index, IN, GLshort, s);
	Method2(void, glVertexAttrib1f, IN, unsigned int, index, IN, GLfloat, f);
	Method2(void, glVertexAttrib2fv, IN, unsigned int, index, IN, const GLfloat *, v);
	Method2(void, glVertexAttrib3fv, IN, unsigned int, index, IN, const GLfloat *, v);
	Method2(void, glVertexAttrib4fv, IN, unsigned int, index, IN, const GLfloat *, v);
	Method2(void, glVertexAttrib4ubv, IN, unsigned int, index, IN, const GLubyte *, v);
	Method2(void, glVertexAttrib4Nubv, IN, unsigned int, index, IN, const GLubyte *, v);
	Method2(void, glGenBuffers, IN, GLsizei, n, IN, GLuint *, buffers);
	Method2(void, glBindBuffer, IN, GLenum, target, IN, GLuint, buffer);
	Method4(void, glBufferData, IN, GLenum, target, IN, GLsizeiptrARB, size, IN, const GLvoid *, data, IN, GLenum, usage);
	Method4(void, glBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, const GLvoid *, data);
	Method2(void, glDeleteBuffers, IN, GLsizei, n, IN, const GLuint *, buffers);
	Method1(GLboolean, glIsBuffer, IN, GLuint, buffer);
	Method4(void, glGetBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, GLvoid *, data);
	Method2(GLvoid *, glMapBuffer, IN, GLenum, target, IN, GLenum, access);
	Method1(GLboolean, glUnmapBuffer, IN, GLenum, target);
	Method3(void, glGetBufferParameteriv, IN, GLenum, target, IN, GLenum, pname, IN, GLint *, params);
	Method3(void, glGetBufferPointerv, IN, GLenum, target, IN, GLenum, pname, IN, GLvoid **, params);
	Method2(void, glGenOcclusionQueries, IN, GLsizei, n, IN, GLuint *, ids);
	Method2(void, glDeleteOcclusionQueries, IN, GLsizei, n, IN, const GLuint *, ids);
	Method1(GLboolean, glIsOcclusionQuery, IN, GLuint, id);
	Method1(void, glBeginOcclusionQuery, IN, GLuint, id);
	Method0(void, glEndOcclusionQuery);
	Method3(void, glGetOcclusionQueryiv, IN, GLuint, id, IN, GLenum, pname, IN, GLint *, params);
	Method3(void, glGetOcclusionQueryuiv, IN, GLuint, id, IN, GLenum, pname, IN, GLuint *, params);
	Method3(void, glGetQueryiv, IN, GLenum, target, IN, GLenum, pname, IN, GLint *, params);
	Method2(void, glGenQueries, IN, GLsizei, n, IN, GLuint *, ids);
	Method2(void, glBeginQuery, IN, GLenum, target, IN, GLuint, id);
	Method1(void, glEndQuery, IN, GLenum, target);
	Method1(GLboolean, glIsQuery, IN, GLuint, id);
	Method3(void, glGetQueryObjectiv, IN, GLuint, id, IN, GLenum, pname, IN, GLint *, params);
	Method3(void, glGetQueryObjectuiv, IN, GLuint, id, IN, GLenum, pname, IN, GLuint *, params);
	WriteOnlyProperty(bool, ARBOcclusionQuerySupported);
	WriteOnlyProperty(bool, FogCoordSupported);
	WriteOnlyProperty(bool, MultiTexSupported);
	WriteOnlyProperty(bool, OcclusionQuerySupported);
	WriteOnlyProperty(bool, SecondaryColorSupported);
	WriteOnlyProperty(bool, VertexProgramSupported);
	WriteOnlyProperty(unsigned int, upGLExtenions);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::Drawable::UpdateCallback)
	VirtualBaseType(osg::Object);
	Constructor0();
	Constructor2(IN, const osg::Drawable::UpdateCallback &, x, IN, const osg::CopyOp &, x);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method2(void, update, IN, osg::NodeVisitor *, x, IN, osg::Drawable *, x);
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::Node * >);

