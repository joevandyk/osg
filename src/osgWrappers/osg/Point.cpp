// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/.svn/text-base/StateAttribute.svn-base>
#include <osg/.svn/text-base/Vec3.svn-base>
#include <osg/Point>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::Point)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____Point,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Point &, point, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Point__C5_Point_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setSize, IN, float, size,
	          Properties::NON_VIRTUAL,
	          __void__setSize__float,
	          "",
	          "");
	I_Method0(float, getSize,
	          Properties::NON_VIRTUAL,
	          __float__getSize,
	          "",
	          "");
	I_Method1(void, setFadeThresholdSize, IN, float, fadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __void__setFadeThresholdSize__float,
	          "",
	          "");
	I_Method0(float, getFadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __float__getFadeThresholdSize,
	          "",
	          "");
	I_Method1(void, setDistanceAttenuation, IN, const osg::Vec3 &, distanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __void__setDistanceAttenuation__C5_Vec3_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getDistanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __C5_Vec3_R1__getDistanceAttenuation,
	          "",
	          "");
	I_Method1(void, setMinSize, IN, float, minSize,
	          Properties::NON_VIRTUAL,
	          __void__setMinSize__float,
	          "",
	          "");
	I_Method0(float, getMinSize,
	          Properties::NON_VIRTUAL,
	          __float__getMinSize,
	          "",
	          "");
	I_Method1(void, setMaxSize, IN, float, maxSize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxSize__float,
	          "",
	          "");
	I_Method0(float, getMaxSize,
	          Properties::NON_VIRTUAL,
	          __float__getMaxSize,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____Point,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Point &, point, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Point__C5_Point_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setSize, IN, float, size,
	          Properties::NON_VIRTUAL,
	          __void__setSize__float,
	          "",
	          "");
	I_Method0(float, getSize,
	          Properties::NON_VIRTUAL,
	          __float__getSize,
	          "",
	          "");
	I_Method1(void, setFadeThresholdSize, IN, float, fadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __void__setFadeThresholdSize__float,
	          "",
	          "");
	I_Method0(float, getFadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __float__getFadeThresholdSize,
	          "",
	          "");
	I_Method1(void, setDistanceAttenuation, IN, const osg::Vec3 &, distanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __void__setDistanceAttenuation__C5_Vec3_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getDistanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __C5_Vec3_R1__getDistanceAttenuation,
	          "",
	          "");
	I_Method1(void, setMinSize, IN, float, minSize,
	          Properties::NON_VIRTUAL,
	          __void__setMinSize__float,
	          "",
	          "");
	I_Method0(float, getMinSize,
	          Properties::NON_VIRTUAL,
	          __float__getMinSize,
	          "",
	          "");
	I_Method1(void, setMaxSize, IN, float, maxSize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxSize__float,
	          "",
	          "");
	I_Method0(float, getMaxSize,
	          Properties::NON_VIRTUAL,
	          __float__getMaxSize,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_StaticMethod2(osg::Point::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Returns the Extensions object for the given context. ",
	                "If createIfNotInitalized is true and the Exentsions object doesn't exist, getExtensions() creates it on the given context. Returns NULL if createIfNotInitalized is false and the Extensions object doesn't exist. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::Point::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions() allows users to override the extensions across graphics contexts. ",
	                "Typically used when you have different extensions supported across graphics pipes, but need to ensure that they all use the same low common denominator extensions. ");
	I_StaticMethod2(osg::Point::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Returns the Extensions object for the given context. ",
	                "If createIfNotInitalized is true and the Exentsions object doesn't exist, getExtensions() creates it on the given context. Returns NULL if createIfNotInitalized is false and the Extensions object doesn't exist. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::Point::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions() allows users to override the extensions across graphics contexts. ",
	                "Typically used when you have different extensions supported across graphics pipes, but need to ensure that they all use the same low common denominator extensions. ");
	I_SimpleProperty(const osg::Vec3 &, DistanceAttenuation, 
	                 __C5_Vec3_R1__getDistanceAttenuation, 
	                 __void__setDistanceAttenuation__C5_Vec3_R1);
	I_SimpleProperty(float, FadeThresholdSize, 
	                 __float__getFadeThresholdSize, 
	                 __void__setFadeThresholdSize__float);
	I_SimpleProperty(float, MaxSize, 
	                 __float__getMaxSize, 
	                 __void__setMaxSize__float);
	I_SimpleProperty(float, MinSize, 
	                 __float__getMinSize, 
	                 __void__setMinSize__float);
	I_SimpleProperty(float, Size, 
	                 __float__getSize, 
	                 __void__setSize__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Point)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____Point,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Point &, point, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Point__C5_Point_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setSize, IN, float, size,
	          Properties::NON_VIRTUAL,
	          __void__setSize__float,
	          "",
	          "");
	I_Method0(float, getSize,
	          Properties::NON_VIRTUAL,
	          __float__getSize,
	          "",
	          "");
	I_Method1(void, setFadeThresholdSize, IN, float, fadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __void__setFadeThresholdSize__float,
	          "",
	          "");
	I_Method0(float, getFadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __float__getFadeThresholdSize,
	          "",
	          "");
	I_Method1(void, setDistanceAttenuation, IN, const osg::Vec3 &, distanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __void__setDistanceAttenuation__C5_Vec3_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getDistanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __C5_Vec3_R1__getDistanceAttenuation,
	          "",
	          "");
	I_Method1(void, setMinSize, IN, float, minSize,
	          Properties::NON_VIRTUAL,
	          __void__setMinSize__float,
	          "",
	          "");
	I_Method0(float, getMinSize,
	          Properties::NON_VIRTUAL,
	          __float__getMinSize,
	          "",
	          "");
	I_Method1(void, setMaxSize, IN, float, maxSize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxSize__float,
	          "",
	          "");
	I_Method0(float, getMaxSize,
	          Properties::NON_VIRTUAL,
	          __float__getMaxSize,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____Point,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::Point &, point, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Point__C5_Point_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setSize, IN, float, size,
	          Properties::NON_VIRTUAL,
	          __void__setSize__float,
	          "",
	          "");
	I_Method0(float, getSize,
	          Properties::NON_VIRTUAL,
	          __float__getSize,
	          "",
	          "");
	I_Method1(void, setFadeThresholdSize, IN, float, fadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __void__setFadeThresholdSize__float,
	          "",
	          "");
	I_Method0(float, getFadeThresholdSize,
	          Properties::NON_VIRTUAL,
	          __float__getFadeThresholdSize,
	          "",
	          "");
	I_Method1(void, setDistanceAttenuation, IN, const osg::Vec3 &, distanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __void__setDistanceAttenuation__C5_Vec3_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getDistanceAttenuation,
	          Properties::NON_VIRTUAL,
	          __C5_Vec3_R1__getDistanceAttenuation,
	          "",
	          "");
	I_Method1(void, setMinSize, IN, float, minSize,
	          Properties::NON_VIRTUAL,
	          __void__setMinSize__float,
	          "",
	          "");
	I_Method0(float, getMinSize,
	          Properties::NON_VIRTUAL,
	          __float__getMinSize,
	          "",
	          "");
	I_Method1(void, setMaxSize, IN, float, maxSize,
	          Properties::NON_VIRTUAL,
	          __void__setMaxSize__float,
	          "",
	          "");
	I_Method0(float, getMaxSize,
	          Properties::NON_VIRTUAL,
	          __float__getMaxSize,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_StaticMethod2(osg::Point::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Returns the Extensions object for the given context. ",
	                "If createIfNotInitalized is true and the Exentsions object doesn't exist, getExtensions() creates it on the given context. Returns NULL if createIfNotInitalized is false and the Extensions object doesn't exist. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::Point::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions() allows users to override the extensions across graphics contexts. ",
	                "Typically used when you have different extensions supported across graphics pipes, but need to ensure that they all use the same low common denominator extensions. ");
	I_StaticMethod2(osg::Point::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Returns the Extensions object for the given context. ",
	                "If createIfNotInitalized is true and the Exentsions object doesn't exist, getExtensions() creates it on the given context. Returns NULL if createIfNotInitalized is false and the Extensions object doesn't exist. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::Point::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions() allows users to override the extensions across graphics contexts. ",
	                "Typically used when you have different extensions supported across graphics pipes, but need to ensure that they all use the same low common denominator extensions. ");
	I_SimpleProperty(const osg::Vec3 &, DistanceAttenuation, 
	                 __C5_Vec3_R1__getDistanceAttenuation, 
	                 __void__setDistanceAttenuation__C5_Vec3_R1);
	I_SimpleProperty(float, FadeThresholdSize, 
	                 __float__getFadeThresholdSize, 
	                 __void__setFadeThresholdSize__float);
	I_SimpleProperty(float, MaxSize, 
	                 __float__getMaxSize, 
	                 __void__setMaxSize__float);
	I_SimpleProperty(float, MinSize, 
	                 __float__getMinSize, 
	                 __void__setMinSize__float);
	I_SimpleProperty(float, Size, 
	                 __float__getSize, 
	                 __void__setSize__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Point::Extensions)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Point::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Point::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtenions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtenions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setPointParametersSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setPointParametersSupported__bool,
	          "",
	          "");
	I_Method0(bool, isPointParametersSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPointParametersSupported,
	          "",
	          "");
	I_Method2(void, glPointParameteri, IN, GLenum, pname, IN, GLint, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameteri__GLenum__GLint,
	          "",
	          "");
	I_Method2(void, glPointParameterf, IN, GLenum, pname, IN, GLfloat, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterf__GLenum__GLfloat,
	          "",
	          "");
	I_Method2(void, glPointParameterfv, IN, GLenum, pname, IN, const GLfloat *, params,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterfv__GLenum__C5_GLfloat_P1,
	          "",
	          "");
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Point::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Point::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtenions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtenions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setPointParametersSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setPointParametersSupported__bool,
	          "",
	          "");
	I_Method0(bool, isPointParametersSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPointParametersSupported,
	          "",
	          "");
	I_Method2(void, glPointParameteri, IN, GLenum, pname, IN, GLint, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameteri__GLenum__GLint,
	          "",
	          "");
	I_Method2(void, glPointParameterf, IN, GLenum, pname, IN, GLfloat, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterf__GLenum__GLfloat,
	          "",
	          "");
	I_Method2(void, glPointParameterfv, IN, GLenum, pname, IN, const GLfloat *, params,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterfv__GLenum__C5_GLfloat_P1,
	          "",
	          "");
	I_SimpleProperty(bool, PointParametersSupported, 
	                 0, 
	                 __void__setPointParametersSupported__bool);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Point::Extensions)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Point::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Point::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtenions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtenions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setPointParametersSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setPointParametersSupported__bool,
	          "",
	          "");
	I_Method0(bool, isPointParametersSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPointParametersSupported,
	          "",
	          "");
	I_Method2(void, glPointParameteri, IN, GLenum, pname, IN, GLint, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameteri__GLenum__GLint,
	          "",
	          "");
	I_Method2(void, glPointParameterf, IN, GLenum, pname, IN, GLfloat, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterf__GLenum__GLfloat,
	          "",
	          "");
	I_Method2(void, glPointParameterfv, IN, GLenum, pname, IN, const GLfloat *, params,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterfv__GLenum__C5_GLfloat_P1,
	          "",
	          "");
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::Point::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::Point::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtenions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtenions__unsigned_int,
	          "",
	          "");
	I_Method1(void, setPointParametersSupported, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setPointParametersSupported__bool,
	          "",
	          "");
	I_Method0(bool, isPointParametersSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPointParametersSupported,
	          "",
	          "");
	I_Method2(void, glPointParameteri, IN, GLenum, pname, IN, GLint, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameteri__GLenum__GLint,
	          "",
	          "");
	I_Method2(void, glPointParameterf, IN, GLenum, pname, IN, GLfloat, param,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterf__GLenum__GLfloat,
	          "",
	          "");
	I_Method2(void, glPointParameterfv, IN, GLenum, pname, IN, const GLfloat *, params,
	          Properties::NON_VIRTUAL,
	          __void__glPointParameterfv__GLenum__C5_GLfloat_P1,
	          "",
	          "");
	I_SimpleProperty(bool, PointParametersSupported, 
	                 0, 
	                 __void__setPointParametersSupported__bool);
END_REFLECTOR

