// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/.svn/text-base/StateAttribute.svn-base>
#include <osg/PolygonOffset>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::PolygonOffset)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____PolygonOffset,
	               "",
	               "");
	I_Constructor2(IN, float, factor, IN, float, units,
	               ____PolygonOffset__float__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::PolygonOffset &, po, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PolygonOffset__C5_PolygonOffset_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setFactor, IN, float, factor,
	          Properties::NON_VIRTUAL,
	          __void__setFactor__float,
	          "",
	          "");
	I_Method0(float, getFactor,
	          Properties::NON_VIRTUAL,
	          __float__getFactor,
	          "",
	          "");
	I_Method1(void, setUnits, IN, float, units,
	          Properties::NON_VIRTUAL,
	          __void__setUnits__float,
	          "",
	          "");
	I_Method0(float, getUnits,
	          Properties::NON_VIRTUAL,
	          __float__getUnits,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____PolygonOffset,
	               "",
	               "");
	I_Constructor2(IN, float, factor, IN, float, units,
	               ____PolygonOffset__float__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::PolygonOffset &, po, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PolygonOffset__C5_PolygonOffset_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setFactor, IN, float, factor,
	          Properties::NON_VIRTUAL,
	          __void__setFactor__float,
	          "",
	          "");
	I_Method0(float, getFactor,
	          Properties::NON_VIRTUAL,
	          __float__getFactor,
	          "",
	          "");
	I_Method1(void, setUnits, IN, float, units,
	          Properties::NON_VIRTUAL,
	          __void__setUnits__float,
	          "",
	          "");
	I_Method0(float, getUnits,
	          Properties::NON_VIRTUAL,
	          __float__getUnits,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_StaticMethod1(void, setFactorMultiplier, IN, float, multiplier,
	                __void__setFactorMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getFactorMultiplier,
	                __float__getFactorMultiplier_S,
	                "",
	                "");
	I_StaticMethod1(void, setUnitsMultiplier, IN, float, multiplier,
	                __void__setUnitsMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getUnitsMultiplier,
	                __float__getUnitsMultiplier_S,
	                "",
	                "");
	I_StaticMethod0(bool, areFactorAndUnitsMultipliersSet,
	                __bool__areFactorAndUnitsMultipliersSet_S,
	                "",
	                "");
	I_StaticMethod0(void, setFactorAndUnitsMultipliersUsingBestGuessForDriver,
	                __void__setFactorAndUnitsMultipliersUsingBestGuessForDriver_S,
	                "Checks with the OpenGL driver to try and pick multiplier approrpriate for the hardware. ",
	                "note, requires a valid graphics context to be current. ");
	I_StaticMethod1(void, setFactorMultiplier, IN, float, multiplier,
	                __void__setFactorMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getFactorMultiplier,
	                __float__getFactorMultiplier_S,
	                "",
	                "");
	I_StaticMethod1(void, setUnitsMultiplier, IN, float, multiplier,
	                __void__setUnitsMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getUnitsMultiplier,
	                __float__getUnitsMultiplier_S,
	                "",
	                "");
	I_StaticMethod0(bool, areFactorAndUnitsMultipliersSet,
	                __bool__areFactorAndUnitsMultipliersSet_S,
	                "",
	                "");
	I_StaticMethod0(void, setFactorAndUnitsMultipliersUsingBestGuessForDriver,
	                __void__setFactorAndUnitsMultipliersUsingBestGuessForDriver_S,
	                "Checks with the OpenGL driver to try and pick multiplier approrpriate for the hardware. ",
	                "note, requires a valid graphics context to be current. ");
	I_SimpleProperty(float, Factor, 
	                 __float__getFactor, 
	                 __void__setFactor__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
	I_SimpleProperty(float, Units, 
	                 __float__getUnits, 
	                 __void__setUnits__float);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::PolygonOffset)
	I_BaseType(osg::StateAttribute);
	I_BaseType(osg::StateAttribute);
	I_Constructor0(____PolygonOffset,
	               "",
	               "");
	I_Constructor2(IN, float, factor, IN, float, units,
	               ____PolygonOffset__float__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::PolygonOffset &, po, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PolygonOffset__C5_PolygonOffset_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setFactor, IN, float, factor,
	          Properties::NON_VIRTUAL,
	          __void__setFactor__float,
	          "",
	          "");
	I_Method0(float, getFactor,
	          Properties::NON_VIRTUAL,
	          __float__getFactor,
	          "",
	          "");
	I_Method1(void, setUnits, IN, float, units,
	          Properties::NON_VIRTUAL,
	          __void__setUnits__float,
	          "",
	          "");
	I_Method0(float, getUnits,
	          Properties::NON_VIRTUAL,
	          __float__getUnits,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_Constructor0(____PolygonOffset,
	               "",
	               "");
	I_Constructor2(IN, float, factor, IN, float, units,
	               ____PolygonOffset__float__float,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::PolygonOffset &, po, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PolygonOffset__C5_PolygonOffset_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(Type, getType,
	          Properties::VIRTUAL,
	          __Type__getType,
	          "",
	          "");
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa,
	          Properties::VIRTUAL,
	          __int__compare__C5_StateAttribute_R1,
	          "return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. ",
	          "");
	I_Method1(bool, getModeUsage, IN, osg::StateAttribute::ModeUsage &, usage,
	          Properties::VIRTUAL,
	          __bool__getModeUsage__ModeUsage_R1,
	          "",
	          "");
	I_Method1(void, setFactor, IN, float, factor,
	          Properties::NON_VIRTUAL,
	          __void__setFactor__float,
	          "",
	          "");
	I_Method0(float, getFactor,
	          Properties::NON_VIRTUAL,
	          __float__getFactor,
	          "",
	          "");
	I_Method1(void, setUnits, IN, float, units,
	          Properties::NON_VIRTUAL,
	          __void__setUnits__float,
	          "",
	          "");
	I_Method0(float, getUnits,
	          Properties::NON_VIRTUAL,
	          __float__getUnits,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__apply__State_R1,
	          "",
	          "");
	I_StaticMethod1(void, setFactorMultiplier, IN, float, multiplier,
	                __void__setFactorMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getFactorMultiplier,
	                __float__getFactorMultiplier_S,
	                "",
	                "");
	I_StaticMethod1(void, setUnitsMultiplier, IN, float, multiplier,
	                __void__setUnitsMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getUnitsMultiplier,
	                __float__getUnitsMultiplier_S,
	                "",
	                "");
	I_StaticMethod0(bool, areFactorAndUnitsMultipliersSet,
	                __bool__areFactorAndUnitsMultipliersSet_S,
	                "",
	                "");
	I_StaticMethod0(void, setFactorAndUnitsMultipliersUsingBestGuessForDriver,
	                __void__setFactorAndUnitsMultipliersUsingBestGuessForDriver_S,
	                "Checks with the OpenGL driver to try and pick multiplier approrpriate for the hardware. ",
	                "note, requires a valid graphics context to be current. ");
	I_StaticMethod1(void, setFactorMultiplier, IN, float, multiplier,
	                __void__setFactorMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getFactorMultiplier,
	                __float__getFactorMultiplier_S,
	                "",
	                "");
	I_StaticMethod1(void, setUnitsMultiplier, IN, float, multiplier,
	                __void__setUnitsMultiplier__float_S,
	                "",
	                "");
	I_StaticMethod0(float, getUnitsMultiplier,
	                __float__getUnitsMultiplier_S,
	                "",
	                "");
	I_StaticMethod0(bool, areFactorAndUnitsMultipliersSet,
	                __bool__areFactorAndUnitsMultipliersSet_S,
	                "",
	                "");
	I_StaticMethod0(void, setFactorAndUnitsMultipliersUsingBestGuessForDriver,
	                __void__setFactorAndUnitsMultipliersUsingBestGuessForDriver_S,
	                "Checks with the OpenGL driver to try and pick multiplier approrpriate for the hardware. ",
	                "note, requires a valid graphics context to be current. ");
	I_SimpleProperty(float, Factor, 
	                 __float__getFactor, 
	                 __void__setFactor__float);
	I_SimpleProperty(Type, Type, 
	                 __Type__getType, 
	                 0);
	I_SimpleProperty(float, Units, 
	                 __float__getUnits, 
	                 __void__setUnits__float);
END_REFLECTOR

