// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ClampColor>
#include <osg/CopyOp>
#include <osg/Object>
#include <osg/State>
#include <osg/StateAttribute>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osg::ClampColor)
	I_BaseType(osg::StateAttribute);
	I_Constructor0();
	I_Constructor3(IN, GLenum, vertexMode, IN, GLenum, fragmentMode, IN, GLenum, readMode);
	I_ConstructorWithDefaults2(IN, const osg::ClampColor &, rhs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, libraryName);
	I_Method0(const char *, className);
	I_Method0(osg::StateAttribute::Type, getType);
	I_Method1(int, compare, IN, const osg::StateAttribute &, sa);
	I_Method1(void, setClampVertexColor, IN, GLenum, mode);
	I_Method0(GLenum, getClampVertexColor);
	I_Method1(void, setClampFragmentColor, IN, GLenum, mode);
	I_Method0(GLenum, getClampFragmentColor);
	I_Method1(void, setClampReadColor, IN, GLenum, mode);
	I_Method0(GLenum, getClampReadColor);
	I_Method1(void, apply, IN, osg::State &, state);
	I_StaticMethod2(osg::ClampColor::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized);
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::ClampColor::Extensions *, extensions);
	I_Property(GLenum, ClampFragmentColor);
	I_Property(GLenum, ClampReadColor);
	I_Property(GLenum, ClampVertexColor);
	I_ReadOnlyProperty(osg::StateAttribute::Type, Type);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::ClampColor::Extensions)
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID);
	I_Constructor1(IN, const osg::ClampColor::Extensions &, rhs);
	I_Method1(void, lowestCommonDenominator, IN, const osg::ClampColor::Extensions &, rhs);
	I_Method1(void, setupGLExtenions, IN, unsigned int, contextID);
	I_Method1(void, setClampColorSupported, IN, bool, flag);
	I_Method0(bool, isClampColorSupported);
	I_Method1(void, setClampColorProc, IN, void *, ptr);
	I_Method2(void, glClampColor, IN, GLenum, target, IN, GLenum, mode);
	I_WriteOnlyProperty(void *, ClampColorProc);
	I_WriteOnlyProperty(bool, ClampColorSupported);
	I_WriteOnlyProperty(unsigned int, upGLExtenions);
END_REFLECTOR

