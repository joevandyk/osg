// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BoundingBox>
#include <osg/BoundingSphere>
#include <osg/ConvexPlanarOccluder>
#include <osg/CullStack>
#include <osg/Matrix>
#include <osg/Node>
#include <osg/Polytope>
#include <osg/ShadowVolumeOccluder>
#include <osg/Vec3>

TYPE_NAME_ALIAS(std::vector< osg::Polytope >, osg::ShadowVolumeOccluder::HoleList);

BEGIN_VALUE_REFLECTOR(osg::ShadowVolumeOccluder)
	Constructor1(IN, const osg::ShadowVolumeOccluder &, svo);
	Constructor0();
	MethodWithDefaults4(bool, computeOccluder, IN, const osg::NodePath &, nodePath, , IN, const osg::ConvexPlanarOccluder &, occluder, , IN, osg::CullStack &, cullStack, , IN, bool, createDrawables, false);
	Method0(void, disableResultMasks);
	Method0(void, pushCurrentMask);
	Method0(void, popCurrentMask);
	Method1(bool, matchProjectionMatrix, IN, const osg::Matrix &, matrix);
	Method1(void, setNodePath, IN, osg::NodePath &, nodePath);
	Method0(osg::NodePath &, getNodePath);
	Method0(const osg::NodePath &, getNodePath);
	Method0(float, getVolume);
	Method0(osg::Polytope &, getOccluder);
	Method0(const osg::Polytope &, getOccluder);
	Method0(osg::ShadowVolumeOccluder::HoleList &, getHoleList);
	Method0(const osg::ShadowVolumeOccluder::HoleList &, getHoleList);
	Method1(bool, contains, IN, const std::vector< osg::Vec3 > &, vertices);
	Method1(bool, contains, IN, const osg::BoundingSphere &, bound);
	Method1(bool, contains, IN, const osg::BoundingBox &, bound);
	Method1(void, transformProvidingInverse, IN, const osg::Matrix &, matrix);
	ReadOnlyProperty(osg::ShadowVolumeOccluder::HoleList &, HoleList);
	Property(osg::NodePath &, NodePath);
	ReadOnlyProperty(osg::Polytope &, Occluder);
	ReadOnlyProperty(float, Volume);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::ShadowVolumeOccluder >, osg::ShadowVolumeOccluderList);

STD_VECTOR_REFLECTOR(std::vector< osg::Polytope >);

