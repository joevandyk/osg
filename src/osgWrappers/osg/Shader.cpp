// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osg/Shader>

BEGIN_ENUM_REFLECTOR(osg::Shader::Type)
	EnumLabel(osg::Shader::VERTEX);
	EnumLabel(osg::Shader::FRAGMENT);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::Shader)
	BaseType(osg::Object);
	ConstructorWithDefaults2(IN, osg::Shader::Type, type, , IN, const char *, sourceText, 0);
	ConstructorWithDefaults2(IN, const osg::Shader &, rhs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(int, compare, IN, const osg::Shader &, rhs);
	Method1(void, setShaderSource, IN, const char *, sourceText);
	Method1(bool, loadShaderSourceFromFile, IN, const char *, fileName);
	Method0(const std::string &, getShaderSource);
	Method0(osg::Shader::Type, getType);
	Method0(const char *, getTypename);
	Method0(void, dirtyShader);
	Method1(void, compileShader, IN, unsigned int, contextID);
	Method2(void, attachShader, IN, unsigned int, contextID, IN, GLuint, program);
	Method2(void, getGlShaderInfoLog, IN, unsigned int, contextID, IN, std::string &, log);
	Method1(void, setName, IN, const std::string &, name);
	Method1(void, setName, IN, const char *, name);
	Method0(const std::string &, getName);
	Property(const std::string &, Name);
	ReadOnlyProperty(const std::string &, ShaderSource);
	ReadOnlyProperty(osg::Shader::Type, Type);
	ReadOnlyProperty(const char *, Typename);
END_REFLECTOR

