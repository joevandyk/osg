// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BufferObject>
#include <osg/CopyOp>
#include <osg/Image>
#include <osg/Object>
#include <osg/State>

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::BufferObject)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osg::BufferObject &, bo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(bool, isBufferObjectSupported, IN, unsigned int, contextID);
	Method1(GLuint &, buffer, IN, unsigned int, contextID);
	Method1(void, bindBuffer, IN, unsigned int, contextID);
	Method1(void, unbindBuffer, IN, unsigned int, contextID);
	Method1(bool, needsCompile, IN, unsigned int, contextID);
	Method1(void, compileBuffer, IN, osg::State &, state);
	Method1(void, releaseBuffer, IN, osg::State *, state);
	Method3(void, flushDeletedBufferObjects, IN, unsigned int, contextID, IN, double, x, IN, double &, availableTime);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::BufferObject::BufferEntry)
	Constructor0();
	Constructor1(IN, const osg::BufferObject::BufferEntry &, be);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::BufferObject::Extensions)
	BaseType(osg::Referenced);
	Constructor1(IN, unsigned int, contextID);
	Constructor1(IN, const osg::BufferObject::Extensions &, rhs);
	Method1(void, lowestCommonDenominator, IN, const osg::BufferObject::Extensions &, rhs);
	Method1(void, setupGLExtenions, IN, unsigned int, contextID);
	Method0(bool, isBufferObjectSupported);
	Method2(void, glGenBuffers, IN, GLsizei, n, IN, GLuint *, buffers);
	Method2(void, glBindBuffer, IN, GLenum, target, IN, GLuint, buffer);
	Method4(void, glBufferData, IN, GLenum, target, IN, GLsizeiptrARB, size, IN, const GLvoid *, data, IN, GLenum, usage);
	Method4(void, glBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, const GLvoid *, data);
	Method2(void, glDeleteBuffers, IN, GLsizei, n, IN, const GLuint *, buffers);
	Method1(GLboolean, glIsBuffer, IN, GLuint, buffer);
	Method4(void, glGetBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, GLvoid *, data);
	Method2(GLvoid *, glMapBuffer, IN, GLenum, target, IN, GLenum, access);
	Method1(GLboolean, glUnmapBuffer, IN, GLenum, target);
	Method3(void, glGetBufferParameteriv, IN, GLenum, target, IN, GLenum, pname, IN, GLint *, params);
	Method3(void, glGetBufferPointerv, IN, GLenum, target, IN, GLenum, pname, IN, GLvoid **, params);
	WriteOnlyProperty(unsigned int, upGLExtenions);
END_REFLECTOR

TYPE_NAME_ALIAS(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Image * >, osg::PixelBufferObject::BufferEntryImagePair);

BEGIN_OBJECT_REFLECTOR(osg::PixelBufferObject)
	BaseType(osg::BufferObject);
	ConstructorWithDefaults1(IN, osg::Image *, image, 0);
	ConstructorWithDefaults2(IN, const osg::PixelBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(void, setImage, IN, osg::Image *, image);
	Method0(osg::Image *, getImage);
	Method0(const osg::Image *, getImage);
	Method0(unsigned int, offset);
	Method1(bool, needsCompile, IN, unsigned int, contextID);
	Method1(void, compileBuffer, IN, osg::State &, state);
	Property(osg::Image *, Image);
END_REFLECTOR

STD_PAIR_REFLECTOR(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Image * >);

