// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Array>
#include <osg/BufferObject>
#include <osg/CopyOp>
#include <osg/Image>
#include <osg/Object>
#include <osg/PrimitiveSet>
#include <osg/State>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osg::BufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Object);
	I_Constructor0(____BufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::BufferObject &, bo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____BufferObject__C5_BufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setUsage, IN, GLenum, usage,
	          Properties::NON_VIRTUAL,
	          __void__setUsage__GLenum,
	          "Set what type of usage the buffer object will have. ",
	          "Options are: GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.");
	I_Method0(GLenum, getUsage,
	          Properties::NON_VIRTUAL,
	          __GLenum__getUsage,
	          "Get the type of usage the buffer object has been set up for. ",
	          "");
	I_Method1(bool, isBufferObjectSupported, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __bool__isBufferObjectSupported__unsigned_int,
	          "",
	          "");
	I_Method1(bool, isPBOSupported, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __bool__isPBOSupported__unsigned_int,
	          "",
	          "");
	I_Method1(GLuint &, buffer, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __GLuint_R1__buffer__unsigned_int,
	          "",
	          "");
	I_Method1(void, bindBuffer, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__bindBuffer__unsigned_int,
	          "",
	          "");
	I_Method1(void, unbindBuffer, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__unbindBuffer__unsigned_int,
	          "",
	          "");
	I_Method0(void, dirty,
	          Properties::NON_VIRTUAL,
	          __void__dirty,
	          "",
	          "");
	I_Method1(bool, isDirty, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __bool__isDirty__unsigned_int,
	          "",
	          "");
	I_Method1(void, compileBuffer, IN, osg::State &, state,
	          Properties::PURE_VIRTUAL,
	          __void__compileBuffer__State_R1,
	          "",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, state, 0,
	                      Properties::VIRTUAL,
	                      __void__releaseGLObjects__State_P1,
	                      "If State is non-zero, this function releases OpenGL objects for the specified graphics context. ",
	                      "Otherwise, releases OpenGL objexts for all graphics contexts. ");
	I_StaticMethod2(void, deleteBufferObject, IN, unsigned int, contextID, IN, GLuint, globj,
	                __void__deleteBufferObject__unsigned_int__GLuint_S,
	                "Use deleteVertexBufferObject instead of glDeleteBuffers to allow OpenGL buffer objects to be cached until they can be deleted by the OpenGL context in which they were created, specified by contextID. ",
	                "");
	I_StaticMethod3(void, flushDeletedBufferObjects, IN, unsigned int, contextID, IN, double, x, IN, double &, availableTime,
	                __void__flushDeletedBufferObjects__unsigned_int__double__double_R1_S,
	                "flush all the cached display list which need to be deleted in the OpenGL context related to contextID. ",
	                "");
	I_StaticMethod2(osg::BufferObject::Extensions *, getExtensions, IN, unsigned int, contextID, IN, bool, createIfNotInitalized,
	                __Extensions_P1__getExtensions__unsigned_int__bool_S,
	                "Function to call to get the extension of a specified context. ",
	                "If the Exentsion object for that context has not yet been created and the 'createIfNotInitalized' flag been set to false then returns NULL. If 'createIfNotInitalized' is true then the Extensions object is automatically created. However, in this case the extension object is only created with the graphics context associated with ContextID.. ");
	I_StaticMethod2(void, setExtensions, IN, unsigned int, contextID, IN, osg::BufferObject::Extensions *, extensions,
	                __void__setExtensions__unsigned_int__Extensions_P1_S,
	                "setExtensions allows users to override the extensions across graphics contexts. ",
	                "typically used when you have different extensions supported across graphics pipes but need to ensure that they all use the same low common denominator extensions. ");
	I_SimpleProperty(GLenum, Usage, 
	                 __GLenum__getUsage, 
	                 __void__setUsage__GLenum);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::BufferObject::BufferEntry)
	I_DeclaringFile("osg/BufferObject");
	I_Constructor0(____BufferEntry,
	               "",
	               "");
	I_Constructor1(IN, const osg::BufferObject::BufferEntry &, be,
	               Properties::NON_EXPLICIT,
	               ____BufferEntry__C5_BufferEntry_R1,
	               "",
	               "");
	I_PublicMemberProperty(osg::buffered_value< unsigned int >, modifiedCount);
	I_PublicMemberProperty(unsigned int, dataSize);
	I_PublicMemberProperty(unsigned int, offset);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osg::BufferObject::Extensions)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::Referenced);
	I_Constructor1(IN, unsigned int, contextID,
	               Properties::NON_EXPLICIT,
	               ____Extensions__unsigned_int,
	               "",
	               "");
	I_Constructor1(IN, const osg::BufferObject::Extensions &, rhs,
	               Properties::NON_EXPLICIT,
	               ____Extensions__C5_Extensions_R1,
	               "",
	               "");
	I_Method1(void, lowestCommonDenominator, IN, const osg::BufferObject::Extensions &, rhs,
	          Properties::NON_VIRTUAL,
	          __void__lowestCommonDenominator__C5_Extensions_R1,
	          "",
	          "");
	I_Method1(void, setupGLExtensions, IN, unsigned int, contextID,
	          Properties::NON_VIRTUAL,
	          __void__setupGLExtensions__unsigned_int,
	          "",
	          "");
	I_Method0(bool, isBufferObjectSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isBufferObjectSupported,
	          "",
	          "");
	I_Method0(bool, isPBOSupported,
	          Properties::NON_VIRTUAL,
	          __bool__isPBOSupported,
	          "",
	          "");
	I_Method2(void, glGenBuffers, IN, GLsizei, n, IN, GLuint *, buffers,
	          Properties::NON_VIRTUAL,
	          __void__glGenBuffers__GLsizei__GLuint_P1,
	          "",
	          "");
	I_Method2(void, glBindBuffer, IN, GLenum, target, IN, GLuint, buffer,
	          Properties::NON_VIRTUAL,
	          __void__glBindBuffer__GLenum__GLuint,
	          "",
	          "");
	I_Method4(void, glBufferData, IN, GLenum, target, IN, GLsizeiptrARB, size, IN, const GLvoid *, data, IN, GLenum, usage,
	          Properties::NON_VIRTUAL,
	          __void__glBufferData__GLenum__GLsizeiptrARB__C5_GLvoid_P1__GLenum,
	          "",
	          "");
	I_Method4(void, glBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, const GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glBufferSubData__GLenum__GLintptrARB__GLsizeiptrARB__C5_GLvoid_P1,
	          "",
	          "");
	I_Method2(void, glDeleteBuffers, IN, GLsizei, n, IN, const GLuint *, buffers,
	          Properties::NON_VIRTUAL,
	          __void__glDeleteBuffers__GLsizei__C5_GLuint_P1,
	          "",
	          "");
	I_Method1(GLboolean, glIsBuffer, IN, GLuint, buffer,
	          Properties::NON_VIRTUAL,
	          __GLboolean__glIsBuffer__GLuint,
	          "",
	          "");
	I_Method4(void, glGetBufferSubData, IN, GLenum, target, IN, GLintptrARB, offset, IN, GLsizeiptrARB, size, IN, GLvoid *, data,
	          Properties::NON_VIRTUAL,
	          __void__glGetBufferSubData__GLenum__GLintptrARB__GLsizeiptrARB__GLvoid_P1,
	          "",
	          "");
	I_Method2(GLvoid *, glMapBuffer, IN, GLenum, target, IN, GLenum, access,
	          Properties::NON_VIRTUAL,
	          __GLvoid_P1__glMapBuffer__GLenum__GLenum,
	          "",
	          "");
	I_Method1(GLboolean, glUnmapBuffer, IN, GLenum, target,
	          Properties::NON_VIRTUAL,
	          __GLboolean__glUnmapBuffer__GLenum,
	          "",
	          "");
	I_Method3(void, glGetBufferParameteriv, IN, GLenum, target, IN, GLenum, pname, IN, GLint *, params,
	          Properties::NON_VIRTUAL,
	          __void__glGetBufferParameteriv__GLenum__GLenum__GLint_P1,
	          "",
	          "");
	I_Method3(void, glGetBufferPointerv, IN, GLenum, target, IN, GLenum, pname, IN, GLvoid **, params,
	          Properties::NON_VIRTUAL,
	          __void__glGetBufferPointerv__GLenum__GLenum__GLvoid_P1P1,
	          "",
	          "");










END_REFLECTOR

TYPE_NAME_ALIAS(std::pair< osg::BufferObject::BufferEntry COMMA  osg::DrawElements * >, osg::ElementBufferObject::BufferEntryDrawElementstPair)

TYPE_NAME_ALIAS(std::vector< osg::ElementBufferObject::BufferEntryDrawElementstPair >, osg::ElementBufferObject::BufferEntryDrawElementsPairs)

BEGIN_OBJECT_REFLECTOR(osg::ElementBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_Constructor0(____ElementBufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::ElementBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ElementBufferObject__C5_ElementBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(unsigned int, addDrawElements, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__addDrawElements__osg_DrawElements_P1,
	          "",
	          "");
	I_Method1(void, removeDrawElements, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __void__removeDrawElements__osg_DrawElements_P1,
	          "",
	          "");
	I_Method2(void, setDrawElements, IN, unsigned int, i, IN, osg::DrawElements *, PrimitiveSet,
	          Properties::NON_VIRTUAL,
	          __void__setDrawElements__unsigned_int__DrawElements_P1,
	          "",
	          "");
	I_Method1(osg::DrawElements *, getDrawElements, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __DrawElements_P1__getDrawElements__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::DrawElements *, getDrawElements, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_DrawElements_P1__getDrawElements__unsigned_int,
	          "",
	          "");
	I_Method1(const GLvoid *, getOffset, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_GLvoid_P1__getOffset__unsigned_int,
	          "",
	          "");
	I_Method1(void, compileBuffer, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__compileBuffer__State_R1,
	          "",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_IndexedProperty(osg::DrawElements *, DrawElements, 
	                  __DrawElements_P1__getDrawElements__unsigned_int, 
	                  __void__setDrawElements__unsigned_int__DrawElements_P1, 
	                  0);
END_REFLECTOR

TYPE_NAME_ALIAS(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Image * >, osg::PixelBufferObject::BufferEntryImagePair)

BEGIN_OBJECT_REFLECTOR(osg::PixelBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_ConstructorWithDefaults1(IN, osg::Image *, image, 0,
	                           Properties::NON_EXPLICIT,
	                           ____PixelBufferObject__osg_Image_P1,
	                           "",
	                           "");
	I_ConstructorWithDefaults2(IN, const osg::PixelBufferObject &, pbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____PixelBufferObject__C5_PixelBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(void, setImage, IN, osg::Image *, image,
	          Properties::NON_VIRTUAL,
	          __void__setImage__osg_Image_P1,
	          "",
	          "");
	I_Method0(osg::Image *, getImage,
	          Properties::NON_VIRTUAL,
	          __Image_P1__getImage,
	          "",
	          "");
	I_Method0(const osg::Image *, getImage,
	          Properties::NON_VIRTUAL,
	          __C5_Image_P1__getImage,
	          "",
	          "");
	I_Method0(unsigned int, offset,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__offset,
	          "",
	          "");
	I_Method1(void, compileBuffer, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__compileBuffer__State_R1,
	          "",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_SimpleProperty(osg::Image *, Image, 
	                 __Image_P1__getImage, 
	                 __void__setImage__osg_Image_P1);
END_REFLECTOR

TYPE_NAME_ALIAS(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Array * >, osg::VertexBufferObject::BufferEntryArrayPair)

TYPE_NAME_ALIAS(std::vector< osg::VertexBufferObject::BufferEntryArrayPair >, osg::VertexBufferObject::BufferEntryArrayPairs)

BEGIN_OBJECT_REFLECTOR(osg::VertexBufferObject)
	I_DeclaringFile("osg/BufferObject");
	I_BaseType(osg::BufferObject);
	I_Constructor0(____VertexBufferObject,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osg::VertexBufferObject &, vbo, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____VertexBufferObject__C5_VertexBufferObject_R1__C5_CopyOp_R1,
	                           "Copy constructor using CopyOp to manage deep vs shallow copy. ",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(unsigned int, addArray, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __unsigned_int__addArray__osg_Array_P1,
	          "",
	          "");
	I_Method1(void, removeArray, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __void__removeArray__osg_Array_P1,
	          "",
	          "");
	I_Method2(void, setArray, IN, unsigned int, i, IN, osg::Array *, array,
	          Properties::NON_VIRTUAL,
	          __void__setArray__unsigned_int__Array_P1,
	          "",
	          "");
	I_Method1(osg::Array *, getArray, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __Array_P1__getArray__unsigned_int,
	          "",
	          "");
	I_Method1(const osg::Array *, getArray, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_Array_P1__getArray__unsigned_int,
	          "",
	          "");
	I_Method1(const GLvoid *, getOffset, IN, unsigned int, i,
	          Properties::NON_VIRTUAL,
	          __C5_GLvoid_P1__getOffset__unsigned_int,
	          "",
	          "");
	I_Method1(void, compileBuffer, IN, osg::State &, state,
	          Properties::VIRTUAL,
	          __void__compileBuffer__State_R1,
	          "",
	          "");
	I_Method1(void, resizeGLObjectBuffers, IN, unsigned int, maxSize,
	          Properties::VIRTUAL,
	          __void__resizeGLObjectBuffers__unsigned_int,
	          "Resize any per context GLObject buffers to specified size. ",
	          "");
	I_IndexedProperty(osg::Array *, Array, 
	                  __Array_P1__getArray__unsigned_int, 
	                  __void__setArray__unsigned_int__Array_P1, 
	                  0);
END_REFLECTOR

STD_PAIR_REFLECTOR(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Array * >)

STD_PAIR_REFLECTOR(std::pair< osg::BufferObject::BufferEntry COMMA  osg::DrawElements * >)

STD_PAIR_REFLECTOR(std::pair< osg::BufferObject::BufferEntry COMMA  osg::Image * >)

STD_VECTOR_REFLECTOR(std::vector< osg::ElementBufferObject::BufferEntryDrawElementstPair >)

STD_VECTOR_REFLECTOR(std::vector< osg::VertexBufferObject::BufferEntryArrayPair >)

