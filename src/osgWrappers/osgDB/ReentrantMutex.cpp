// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgDB/ReentrantMutex>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgDB::ReentrantMutex)
	I_Constructor0(____ReentrantMutex,
	               "",
	               "");
	I_Method0(int, lock,
	          Properties::VIRTUAL,
	          __int__lock,
	          "",
	          "");
	I_Method0(int, unlock,
	          Properties::VIRTUAL,
	          __int__unlock,
	          "",
	          "");
	I_Method0(int, trylock,
	          Properties::VIRTUAL,
	          __int__trylock,
	          "",
	          "");
	I_Constructor0(____ReentrantMutex,
	               "",
	               "");
	I_Method0(int, lock,
	          Properties::VIRTUAL,
	          __int__lock,
	          "",
	          "");
	I_Method0(int, unlock,
	          Properties::VIRTUAL,
	          __int__unlock,
	          "",
	          "");
	I_Method0(int, trylock,
	          Properties::VIRTUAL,
	          __int__trylock,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgDB::ReentrantMutex)
	I_Constructor0(____ReentrantMutex,
	               "",
	               "");
	I_Method0(int, lock,
	          Properties::VIRTUAL,
	          __int__lock,
	          "",
	          "");
	I_Method0(int, unlock,
	          Properties::VIRTUAL,
	          __int__unlock,
	          "",
	          "");
	I_Method0(int, trylock,
	          Properties::VIRTUAL,
	          __int__trylock,
	          "",
	          "");
	I_Constructor0(____ReentrantMutex,
	               "",
	               "");
	I_Method0(int, lock,
	          Properties::VIRTUAL,
	          __int__lock,
	          "",
	          "");
	I_Method0(int, unlock,
	          Properties::VIRTUAL,
	          __int__unlock,
	          "",
	          "");
	I_Method0(int, trylock,
	          Properties::VIRTUAL,
	          __int__trylock,
	          "",
	          "");
END_REFLECTOR

