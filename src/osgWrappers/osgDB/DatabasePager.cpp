// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/FrameStamp>
#include <osg/Group>
#include <osg/Node>
#include <osg/PagedLOD>
#include <osg/State>
#include <osg/StateSet>
#include <osgDB/DatabasePager>

BEGIN_OBJECT_REFLECTOR(osgDB::Block)
	BaseType(osg::Referenced);
	Constructor0();
	Method0(void, block);
	Method0(void, release);
	Method0(void, reset);
	Method1(void, set, IN, bool, doRelease);
	WriteOnlyProperty(bool, );
END_REFLECTOR

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osg::PagedLOD > >, osgDB::DatabasePager::PagedLODList);

TYPE_NAME_ALIAS(std::set< osg::ref_ptr< osg::StateSet > >, osgDB::DatabasePager::StateSetList);

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osg::Drawable > >, osgDB::DatabasePager::DrawableList);

TYPE_NAME_ALIAS(std::pair< osgDB::DatabasePager::StateSetList COMMA  osgDB::DatabasePager::DrawableList >, osgDB::DatabasePager::DataToCompile);

TYPE_NAME_ALIAS(std::map< unsigned int COMMA  osgDB::DatabasePager::DataToCompile >, osgDB::DatabasePager::DataToCompileMap);

TYPE_NAME_ALIAS(std::set< unsigned int >, osgDB::DatabasePager::ActiveGraphicsContexts);

BEGIN_OBJECT_REFLECTOR(osgDB::DatabasePager)
	BaseType(osg::NodeVisitor::DatabaseRequestHandler);
	Constructor0();
	Method4(void, requestNodeFile, IN, const std::string &, fileName, IN, osg::Group *, group, IN, float, priority, IN, const osg::FrameStamp *, framestamp);
	Method0(void, run);
	Method0(int, cancel);
	Method0(void, clear);
	Method1(void, setDatabasePagerThreadPause, IN, bool, pause);
	Method0(bool, getDatabasePagerThreadPause);
	Method1(void, setAcceptNewDatabaseRequests, IN, bool, acceptNewRequests);
	Method0(bool, getAcceptNewDatabaseRequests);
	Method1(void, setUseFrameBlock, IN, bool, useFrameBlock);
	Method0(bool, getUseFrameBlock);
	Method0(osgDB::Block *, getFrameBlock);
	Method1(void, setThreadPriorityDuringFrame, IN, ThreadPriority, duringFrame);
	Method0(ThreadPriority, getThreadPriorityDuringFrame);
	Method1(void, setThreadPriorityOutwithFrame, IN, ThreadPriority, outwithFrame);
	Method0(ThreadPriority, getThreadPriorityOutwithFrame);
	Method0(int, getNumFramesActive);
	Method1(void, signalBeginFrame, IN, const osg::FrameStamp *, framestamp);
	Method0(void, signalEndFrame);
	Method1(void, registerPagedLODs, IN, osg::Node *, subgraph);
	Method1(void, setTargetFrameRate, IN, double, tfr);
	Method0(double, getTargetFrameRate);
	Method1(void, setMinimumTimeAvailableForGLCompileAndDeletePerFrame, IN, double, ta);
	Method0(double, getMinimumTimeAvailableForGLCompileAndDeletePerFrame);
	Method1(void, setMaximumNumOfObjectsToCompilePerFrame, IN, unsigned int, num);
	Method0(unsigned int, getMaximumNumOfObjectsToCompilePerFrame);
	Method1(void, setExpiryDelay, IN, double, expiryDelay);
	Method0(double, getExpiryDelay);
	Method1(void, setDeleteRemovedSubgraphsInDatabaseThread, IN, bool, flag);
	Method0(bool, getDeleteRemovedSubgraphsInDatabaseThread);
	Method2(void, setUnrefImageDataAfterApplyPolicy, IN, bool, changeAutoUnRef, IN, bool, valueAutoUnRef);
	Method2(void, getUnrefImageDataAfterApplyPolicy, IN, bool &, changeAutoUnRef, IN, bool &, valueAutoUnRef);
	Method2(void, setMaxAnisotropyPolicy, IN, bool, changeAnisotropy, IN, float, valueAnisotropy);
	Method2(void, getMaxAnisotropyPolicy, IN, bool &, changeAnisotropy, IN, float &, valueAnisotropy);
	Method0(bool, requiresUpdateSceneGraph);
	Method1(void, updateSceneGraph, IN, double, currentFrameTime);
	Method2(void, setCompileGLObjectsForContextID, IN, unsigned int, contextID, IN, bool, on);
	Method1(bool, getCompileGLObjectsForContextID, IN, unsigned int, contextID);
	Method0(bool, requiresCompileGLObjects);
	Method2(void, compileGLObjects, IN, osg::State &, state, IN, double &, availableTime);
	Property(bool, AcceptNewDatabaseRequests);
	IndexedProperty1(bool, CompileGLObjectsForContextID, unsigned int, contextID);
	Property(bool, DatabasePagerThreadPause);
	Property(bool, DeleteRemovedSubgraphsInDatabaseThread);
	Property(double, ExpiryDelay);
	ReadOnlyProperty(osgDB::Block *, FrameBlock);
	Property(unsigned int, MaximumNumOfObjectsToCompilePerFrame);
	Property(double, MinimumTimeAvailableForGLCompileAndDeletePerFrame);
	Property(double, TargetFrameRate);
	Property(ThreadPriority, ThreadPriorityDuringFrame);
	Property(ThreadPriority, ThreadPriorityOutwithFrame);
	Property(bool, UseFrameBlock);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::PagedLOD >)
	Constructor0();
	Constructor1(IN, osg::PagedLOD *, t);
	Constructor1(IN, const osg::ref_ptr< osg::PagedLOD > &, rp);
	Method0(bool, valid);
	Method0(osg::PagedLOD *, get);
	Method0(const osg::PagedLOD *, get);
	Method0(osg::PagedLOD *, take);
	Method0(osg::PagedLOD *, release);
	ReadOnlyProperty(osg::PagedLOD *, );
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::StateSet >)
	Constructor0();
	Constructor1(IN, osg::StateSet *, t);
	Constructor1(IN, const osg::ref_ptr< osg::StateSet > &, rp);
	Method0(bool, valid);
	Method0(osg::StateSet *, get);
	Method0(const osg::StateSet *, get);
	Method0(osg::StateSet *, take);
	Method0(osg::StateSet *, release);
	ReadOnlyProperty(osg::StateSet *, );
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osg::PagedLOD > >);

STD_MAP_REFLECTOR(std::map< unsigned int COMMA  osgDB::DatabasePager::DataToCompile >);

STD_PAIR_REFLECTOR(std::pair< osgDB::DatabasePager::StateSetList COMMA  osgDB::DatabasePager::DrawableList >);

STD_SET_REFLECTOR(std::set< osg::ref_ptr< osg::StateSet > >);

STD_SET_REFLECTOR(std::set< unsigned int >);

