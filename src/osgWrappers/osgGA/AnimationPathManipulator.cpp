// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/AnimationPath>
#include <osg/ApplicationUsage>
#include <osg/Matrixd>
#include <osgGA/AnimationPathManipulator>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgGA::AnimationPathManipulator)
	I_BaseType(osgGA::MatrixManipulator);
	I_ConstructorWithDefaults1(IN, osg::AnimationPath *, animationPath, 0);
	I_Constructor1(IN, const std::string &, filename);
	I_Method0(const char *, className);
	I_Method1(void, setPrintOutTimingInfo, IN, bool, printOutTiminInfo);
	I_Method0(bool, getPrintOutTimingInfo);
	I_Method1(void, setByMatrix, IN, const osg::Matrixd &, matrix);
	I_Method1(void, setByInverseMatrix, IN, const osg::Matrixd &, matrix);
	I_Method0(osg::Matrixd, getMatrix);
	I_Method0(osg::Matrixd, getInverseMatrix);
	I_Method1(void, setAnimationPath, IN, osg::AnimationPath *, animationPath);
	I_Method0(osg::AnimationPath *, getAnimationPath);
	I_Method0(const osg::AnimationPath *, getAnimationPath);
	I_Method0(bool, valid);
	I_Method2(void, init, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, us);
	I_Method2(void, home, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, us);
	I_Method1(void, home, IN, double, currentTime);
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, us);
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage);
	I_Property(osg::AnimationPath *, AnimationPath);
	I_WriteOnlyProperty(const osg::Matrixd &, ByInverseMatrix);
	I_WriteOnlyProperty(const osg::Matrixd &, ByMatrix);
	I_ReadOnlyProperty(osg::Matrixd, InverseMatrix);
	I_ReadOnlyProperty(osg::Matrixd, Matrix);
	I_Property(bool, PrintOutTimingInfo);
END_REFLECTOR

