// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CameraNode>
#include <osg/Node>
#include <osgDB/DatabasePager>
#include <osgGA/EventQueue>
#include <osgGA/GUIEventHandler>
#include <osgGA/MatrixManipulator>
#include <osgGA/SimpleViewer>
#include <osgUtil/SceneView>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osgGA::GUIEventHandler > >, osgGA::SimpleViewer::EventHandlers);

BEGIN_OBJECT_REFLECTOR(osgGA::SimpleViewer)
	I_BaseType(osgGA::GUIActionAdapter);
	I_BaseType(osg::Referenced);
	I_Constructor0();
	I_Method1(void, setSceneData, IN, osg::Node *, node);
	I_Method0(osg::Node *, getSceneData);
	I_Method0(const osg::Node *, getSceneData);
	I_Method0(osg::CameraNode *, getCamera);
	I_Method0(const osg::CameraNode *, getCamera);
	I_Method1(void, setCameraManipulator, IN, osgGA::MatrixManipulator *, manipulator);
	I_Method0(osgGA::MatrixManipulator *, getCameraManipulator);
	I_Method0(const osgGA::MatrixManipulator *, getCameraManipulator);
	I_Method1(void, addEventHandler, IN, osgGA::GUIEventHandler *, eventHandler);
	I_Method0(osgGA::SimpleViewer::EventHandlers &, getEventHandlers);
	I_Method0(const osgGA::SimpleViewer::EventHandlers &, getEventHandlers);
	I_Method0(osgGA::EventQueue *, getEventQueue);
	I_Method0(const osgGA::EventQueue *, getEventQueue);
	I_Method1(void, setDatabasePager, IN, osgDB::DatabasePager *, dp);
	I_Method0(osgDB::DatabasePager *, getDatabasePager);
	I_Method0(const osgDB::DatabasePager *, getDatabasePager);
	I_Method0(void, frame);
	I_Method0(void, frameAdvance);
	I_Method0(void, frameEventTraversal);
	I_Method0(void, frameUpdateTraversal);
	I_Method0(void, frameCullTraversal);
	I_Method0(void, frameDrawTraversal);
	I_Method0(void, cleanup);
	I_Method0(void, requestRedraw);
	I_MethodWithDefaults1(void, requestContinuousUpdate, IN, bool, x, true);
	I_Method2(void, requestWarpPointer, IN, float, x, IN, float, x);
	I_Method0(osgUtil::SceneView *, getSceneView);
	I_Method0(const osgUtil::SceneView *, getSceneView);
	I_Method0(void, init);
	I_ReadOnlyProperty(osg::CameraNode *, Camera);
	I_Property(osgGA::MatrixManipulator *, CameraManipulator);
	I_Property(osgDB::DatabasePager *, DatabasePager);
	I_ReadOnlyProperty(osgGA::SimpleViewer::EventHandlers &, EventHandlers);
	I_ReadOnlyProperty(osgGA::EventQueue *, EventQueue);
	I_Property(osg::Node *, SceneData);
	I_ReadOnlyProperty(osgUtil::SceneView *, SceneView);
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osgGA::GUIEventHandler > >);

