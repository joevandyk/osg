// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CoordinateSystemNode>
#include <osg/Matrixd>
#include <osg/Node>
#include <osg/Vec3d>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgGA/GUIEventHandlerVisitor>
#include <osgGA/MatrixManipulator>
#include <osgUtil/SceneView>

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgGA::MatrixManipulator)
	BaseType(osgGA::GUIEventHandler);
	Method0(const char *, className);
	Method1(void, setMinimumDistance, IN, float, minimumDistance);
	Method0(float, getMinimumDistance);
	Method1(void, setCoordinateFrameCallback, IN, osgGA::MatrixManipulator::CoordinateFrameCallback *, cb);
	Method0(osgGA::MatrixManipulator::CoordinateFrameCallback *, getCoordinateFrameCallback);
	Method0(const osgGA::MatrixManipulator::CoordinateFrameCallback *, getCoordinateFrameCallback);
	Method1(osg::CoordinateFrame, getCoordinateFrame, IN, const osg::Vec3d &, position);
	Method1(osg::Vec3d, getSideVector, IN, const osg::CoordinateFrame &, cf);
	Method1(osg::Vec3d, getFrontVector, IN, const osg::CoordinateFrame &, cf);
	Method1(osg::Vec3d, getUpVector, IN, const osg::CoordinateFrame &, cf);
	Method1(void, setByMatrix, IN, const osg::Matrixd &, matrix);
	Method1(void, setByInverseMatrix, IN, const osg::Matrixd &, matrix);
	Method0(osg::Matrixd, getMatrix);
	Method0(osg::Matrixd, getInverseMatrix);
	Method0(osgUtil::SceneView::FusionDistanceMode, getFusionDistanceMode);
	Method0(float, getFusionDistanceValue);
	Method1(void, setIntersectTraversalMask, IN, unsigned int, mask);
	Method0(unsigned int, getIntersectTraversalMask);
	Method1(void, setNode, IN, osg::Node *, x);
	Method0(const osg::Node *, getNode);
	Method0(osg::Node *, getNode);
	MethodWithDefaults4(void, setHomePosition, IN, const osg::Vec3d &, eye, , IN, const osg::Vec3d &, center, , IN, const osg::Vec3d &, up, , IN, bool, autoComputeHomePosition, false);
	Method3(void, getHomePosition, IN, osg::Vec3d &, eye, IN, osg::Vec3d &, center, IN, osg::Vec3d &, up);
	Method1(void, setAutoComputeHomePosition, IN, bool, flag);
	Method0(bool, getAutoComputeHomePosition);
	Method0(void, computeHomePosition);
	Method2(void, home, IN, const osgGA::GUIEventAdapter &, x, IN, osgGA::GUIActionAdapter &, x);
	Method1(void, home, IN, double, x);
	Method2(void, init, IN, const osgGA::GUIEventAdapter &, x, IN, osgGA::GUIActionAdapter &, x);
	Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, us);
	Method1(void, accept, IN, osgGA::GUIEventHandlerVisitor &, v);
	Property(bool, AutoComputeHomePosition);
	WriteOnlyProperty(const osg::Matrixd &, ByInverseMatrix);
	WriteOnlyProperty(const osg::Matrixd &, ByMatrix);
	Property(osgGA::MatrixManipulator::CoordinateFrameCallback *, CoordinateFrameCallback);
	ReadOnlyProperty(osgUtil::SceneView::FusionDistanceMode, FusionDistanceMode);
	ReadOnlyProperty(float, FusionDistanceValue);
	Property(unsigned int, IntersectTraversalMask);
	ReadOnlyProperty(osg::Matrixd, InverseMatrix);
	ReadOnlyProperty(osg::Matrixd, Matrix);
	Property(float, MinimumDistance);
	Property(osg::Node *, Node);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgGA::MatrixManipulator::CoordinateFrameCallback)
	BaseType(osg::Referenced);
	Constructor0();
	Method1(osg::CoordinateFrame, getCoordinateFrame, IN, const osg::Vec3d &, position);
END_REFLECTOR

