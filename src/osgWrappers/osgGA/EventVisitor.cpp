// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Billboard>
#include <osg/Geode>
#include <osg/Group>
#include <osg/LOD>
#include <osg/LightSource>
#include <osg/Node>
#include <osg/OccluderNode>
#include <osg/Projection>
#include <osg/Switch>
#include <osg/Transform>
#include <osgGA/EventVisitor>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>

TYPE_NAME_ALIAS(std::list< osg::ref_ptr< osgGA::GUIEventAdapter > >, osgGA::EventVisitor::EventList);

BEGIN_VALUE_REFLECTOR(osgGA::EventVisitor)
	BaseType(osg::NodeVisitor);
	Constructor0();
	Method1(void, setActionAdapter, IN, osgGA::GUIActionAdapter *, actionAdapter);
	Method0(osgGA::GUIActionAdapter *, getActionAdapter);
	Method0(const osgGA::GUIActionAdapter *, getActionAdapter);
	Method1(void, setEventList, IN, const osgGA::EventVisitor::EventList &, events);
	Method0(osgGA::EventVisitor::EventList &, getEventList);
	Method0(const osgGA::EventVisitor::EventList &, getEventList);
	Method1(void, addEvent, IN, osgGA::GUIEventAdapter *, event);
	Method1(void, removeEvent, IN, osgGA::GUIEventAdapter *, event);
	Method0(void, reset);
	Method1(void, apply, IN, osg::Node &, node);
	Method1(void, apply, IN, osg::Geode &, node);
	Method1(void, apply, IN, osg::Billboard &, node);
	Method1(void, apply, IN, osg::LightSource &, node);
	Method1(void, apply, IN, osg::Group &, node);
	Method1(void, apply, IN, osg::Transform &, node);
	Method1(void, apply, IN, osg::Projection &, node);
	Method1(void, apply, IN, osg::Switch &, node);
	Method1(void, apply, IN, osg::LOD &, node);
	Method1(void, apply, IN, osg::OccluderNode &, node);
	Property(osgGA::GUIActionAdapter *, ActionAdapter);
	Property(const osgGA::EventVisitor::EventList &, EventList);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgGA::GUIEventAdapter >)
	Constructor0();
	Constructor1(IN, osgGA::GUIEventAdapter *, t);
	Constructor1(IN, const osg::ref_ptr< osgGA::GUIEventAdapter > &, rp);
	Method0(bool, valid);
	Method0(osgGA::GUIEventAdapter *, get);
	Method0(const osgGA::GUIEventAdapter *, get);
	Method0(osgGA::GUIEventAdapter *, take);
	Method0(osgGA::GUIEventAdapter *, release);
	ReadOnlyProperty(osgGA::GUIEventAdapter *, );
END_REFLECTOR

STD_LIST_REFLECTOR(std::list< osg::ref_ptr< osgGA::GUIEventAdapter > >);

