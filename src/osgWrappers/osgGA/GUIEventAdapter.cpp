// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgGA/GUIEventAdapter>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::MouseButtonMask)
	I_EnumLabel(osgGA::GUIEventAdapter::LEFT_MOUSE_BUTTON);
	I_EnumLabel(osgGA::GUIEventAdapter::MIDDLE_MOUSE_BUTTON);
	I_EnumLabel(osgGA::GUIEventAdapter::RIGHT_MOUSE_BUTTON);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::EventType)
	I_EnumLabel(osgGA::GUIEventAdapter::NONE);
	I_EnumLabel(osgGA::GUIEventAdapter::PUSH);
	I_EnumLabel(osgGA::GUIEventAdapter::RELEASE);
	I_EnumLabel(osgGA::GUIEventAdapter::DOUBLECLICK);
	I_EnumLabel(osgGA::GUIEventAdapter::DRAG);
	I_EnumLabel(osgGA::GUIEventAdapter::MOVE);
	I_EnumLabel(osgGA::GUIEventAdapter::KEYDOWN);
	I_EnumLabel(osgGA::GUIEventAdapter::KEYUP);
	I_EnumLabel(osgGA::GUIEventAdapter::FRAME);
	I_EnumLabel(osgGA::GUIEventAdapter::RESIZE);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL);
	I_EnumLabel(osgGA::GUIEventAdapter::PEN_PRESSURE);
	I_EnumLabel(osgGA::GUIEventAdapter::PEN_PROXIMITY_ENTER);
	I_EnumLabel(osgGA::GUIEventAdapter::PEN_PROXIMITY_LEAVE);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::KeySymbol)
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Space);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_BackSpace);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Tab);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Linefeed);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Clear);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Return);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Pause);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Scroll_Lock);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Sys_Req);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Escape);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Delete);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Home);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Left);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Up);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Right);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Down);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Prior);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Page_Up);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Next);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Page_Down);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_End);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Begin);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Select);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Print);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Execute);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Insert);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Undo);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Redo);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Menu);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Find);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Cancel);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Help);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Break);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Mode_switch);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Script_switch);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Num_Lock);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Space);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Tab);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Enter);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_F1);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_F2);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_F3);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_F4);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Home);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Left);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Up);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Right);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Down);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Prior);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Page_Up);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Next);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Page_Down);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_End);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Begin);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Insert);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Delete);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Equal);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Multiply);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Add);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Separator);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Subtract);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Decimal);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_Divide);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_0);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_1);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_2);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_3);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_4);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_5);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_6);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_7);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_8);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_KP_9);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F1);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F2);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F3);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F4);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F5);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F6);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F7);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F8);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F9);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F10);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F11);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F12);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F13);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F14);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F15);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F16);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F17);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F18);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F19);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F20);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F21);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F22);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F23);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F24);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F25);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F26);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F27);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F28);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F29);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F30);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F31);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F32);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F33);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F34);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_F35);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Shift_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Shift_R);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Control_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Control_R);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Caps_Lock);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Shift_Lock);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Meta_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Meta_R);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Alt_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Alt_R);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Super_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Super_R);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Hyper_L);
	I_EnumLabel(osgGA::GUIEventAdapter::KEY_Hyper_R);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::ModKeyMask)
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_LEFT_SHIFT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_RIGHT_SHIFT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_LEFT_CTRL);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_RIGHT_CTRL);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_LEFT_ALT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_RIGHT_ALT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_LEFT_META);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_RIGHT_META);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_NUM_LOCK);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_CAPS_LOCK);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_CTRL);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_SHIFT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_ALT);
	I_EnumLabel(osgGA::GUIEventAdapter::MODKEY_META);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::MouseYOrientation)
	I_EnumLabel(osgGA::GUIEventAdapter::Y_INCREASING_UPWARDS);
	I_EnumLabel(osgGA::GUIEventAdapter::Y_INCREASING_DOWNWARDS);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::ScrollingMotion)
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_NONE);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_LEFT);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_RIGHT);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_UP);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_DOWN);
	I_EnumLabel(osgGA::GUIEventAdapter::SCROLL_2D);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgGA::GUIEventAdapter::TabletPointerType)
	I_EnumLabel(osgGA::GUIEventAdapter::UNKNOWN);
	I_EnumLabel(osgGA::GUIEventAdapter::PEN);
	I_EnumLabel(osgGA::GUIEventAdapter::PUCK);
	I_EnumLabel(osgGA::GUIEventAdapter::ERASER);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgGA::GUIEventAdapter)
	I_BaseType(osg::Referenced);
	I_Constructor0();
	I_Constructor1(IN, const osgGA::GUIEventAdapter &, rhs);
	I_Method1(void, setEventType, IN, osgGA::GUIEventAdapter::EventType, Type);
	I_Method0(osgGA::GUIEventAdapter::EventType, getEventType);
	I_Method1(void, setTime, IN, double, time);
	I_Method0(double, getTime);
	I_Method0(double, time);
	I_MethodWithDefaults5(void, setWindowRectangle, IN, int, x, , IN, int, y, , IN, unsigned int, width, , IN, unsigned int, height, , IN, bool, updateMouseRange, true);
	I_Method0(int, getWindowX);
	I_Method0(int, getWindowY);
	I_Method0(unsigned int, getWindowWidth);
	I_Method0(unsigned int, getWindowHeight);
	I_Method1(void, setKey, IN, int, key);
	I_Method0(int, getKey);
	I_Method1(void, setButton, IN, int, button);
	I_Method0(int, getButton);
	I_Method4(void, setInputRange, IN, float, Xmin, IN, float, Ymin, IN, float, Xmax, IN, float, Ymax);
	I_Method0(float, getXmin);
	I_Method0(float, getXmax);
	I_Method0(float, getYmin);
	I_Method0(float, getYmax);
	I_Method1(void, setX, IN, float, x);
	I_Method0(float, getX);
	I_Method1(void, setY, IN, float, y);
	I_Method0(float, getY);
	I_Method1(void, setButtonMask, IN, unsigned int, mask);
	I_Method0(unsigned int, getButtonMask);
	I_Method1(void, setModKeyMask, IN, unsigned int, mask);
	I_Method0(unsigned int, getModKeyMask);
	I_Method0(float, getPenPressure);
	I_Method1(void, setPenPressure, IN, float, pressure);
	I_Method0(osgGA::GUIEventAdapter::TabletPointerType, getTabletPointerType);
	I_Method1(void, setTabletPointerType, IN, osgGA::GUIEventAdapter::TabletPointerType, pt);
	I_Method1(void, setScrollingMotion, IN, osgGA::GUIEventAdapter::ScrollingMotion, motion);
	I_Method0(float, getScrollingDeltaX);
	I_Method0(float, getScrollingDeltaY);
	I_Method2(void, setScrollingMotionDelta, IN, float, x, IN, float, y);
	I_Method0(osgGA::GUIEventAdapter::ScrollingMotion, getScrollingMotion);
	I_Method0(float, getXnormalized);
	I_Method0(float, getYnormalized);
	I_Method1(void, setMouseYOrientation, IN, osgGA::GUIEventAdapter::MouseYOrientation, myo);
	I_Method0(osgGA::GUIEventAdapter::MouseYOrientation, getMouseYOrientation);
	I_Property(int, Button);
	I_Property(unsigned int, ButtonMask);
	I_Property(osgGA::GUIEventAdapter::EventType, EventType);
	I_Property(int, Key);
	I_Property(unsigned int, ModKeyMask);
	I_Property(osgGA::GUIEventAdapter::MouseYOrientation, MouseYOrientation);
	I_Property(float, PenPressure);
	I_ReadOnlyProperty(float, ScrollingDeltaX);
	I_ReadOnlyProperty(float, ScrollingDeltaY);
	I_Property(osgGA::GUIEventAdapter::ScrollingMotion, ScrollingMotion);
	I_Property(osgGA::GUIEventAdapter::TabletPointerType, TabletPointerType);
	I_Property(double, Time);
	I_ReadOnlyProperty(unsigned int, WindowHeight);
	I_ReadOnlyProperty(unsigned int, WindowWidth);
	I_ReadOnlyProperty(int, WindowX);
	I_ReadOnlyProperty(int, WindowY);
	I_Property(float, X);
	I_ReadOnlyProperty(float, Xmax);
	I_ReadOnlyProperty(float, Xmin);
	I_ReadOnlyProperty(float, Xnormalized);
	I_Property(float, Y);
	I_ReadOnlyProperty(float, Ymax);
	I_ReadOnlyProperty(float, Ymin);
	I_ReadOnlyProperty(float, Ynormalized);
END_REFLECTOR

