// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osg/CopyOp>
#include <osg/Drawable>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgGA/GUIEventHandler>
#include <osgGA/GUIEventHandlerVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osgGA::GUIEventHandler > >, osgGA::CompositeGUIEventHandler::ChildList);

BEGIN_OBJECT_REFLECTOR(osgGA::CompositeGUIEventHandler)
	I_BaseType(osgGA::GUIEventHandler);
	I_Constructor0();
	I_Method0(const char *, className);
	I_Method0(const osgGA::CompositeGUIEventHandler *, getComposite);
	I_Method0(osgGA::CompositeGUIEventHandler *, getComposite);
	I_Method4(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa, IN, osg::Object *, object, IN, osg::NodeVisitor *, nv);
	I_Method1(void, accept, IN, osgGA::GUIEventHandlerVisitor &, v);
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage);
	I_Method1(bool, addChild, IN, osgGA::GUIEventHandler *, geh);
	I_Method1(bool, removeChild, IN, osgGA::GUIEventHandler *, geh);
	I_Method0(unsigned int, getNumChildren);
	I_Method1(osgGA::GUIEventHandler *, getChild, IN, unsigned int, i);
	I_Method1(const osgGA::GUIEventHandler *, getChild, IN, unsigned int, i);
	I_Method1(bool, containsNode, IN, const osgGA::GUIEventHandler *, node);
	I_Method1(osgGA::CompositeGUIEventHandler::ChildList::iterator, findChild, IN, const osgGA::GUIEventHandler *, node);
	I_ArrayProperty_GA(osgGA::GUIEventHandler *, Child, Children, unsigned int, bool);
	I_ReadOnlyProperty(osgGA::CompositeGUIEventHandler *, Composite);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgGA::GUIEventHandler)
	I_BaseType(osg::NodeCallback);
	I_BaseType(osg::Drawable::EventCallback);
	I_Constructor0();
	I_Constructor2(IN, const osgGA::GUIEventHandler &, x, IN, const osg::CopyOp &, x);
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, libraryName);
	I_Method0(const char *, className);
	I_Method2(void, event, IN, osg::NodeVisitor *, nv, IN, osg::Drawable *, drawable);
	I_Method0(const osgGA::CompositeGUIEventHandler *, getComposite);
	I_Method0(osgGA::CompositeGUIEventHandler *, getComposite);
	I_Method4(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa, IN, osg::Object *, x, IN, osg::NodeVisitor *, x);
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, x, IN, osgGA::GUIActionAdapter &, x);
	I_Method1(void, accept, IN, osgGA::GUIEventHandlerVisitor &, x);
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, x);
	I_ReadOnlyProperty(osgGA::CompositeGUIEventHandler *, Composite);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgGA::GUIEventHandler >)
	I_Constructor0();
	I_Constructor1(IN, osgGA::GUIEventHandler *, ptr);
	I_Constructor1(IN, const osg::ref_ptr< osgGA::GUIEventHandler > &, rp);
	I_Method0(osgGA::GUIEventHandler *, get);
	I_Method0(bool, valid);
	I_Method0(osgGA::GUIEventHandler *, release);
	I_Method1(void, swap, IN, osg::ref_ptr< osgGA::GUIEventHandler > &, rp);
	I_ReadOnlyProperty(osgGA::GUIEventHandler *, );
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osgGA::GUIEventHandler > >);

