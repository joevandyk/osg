// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/Drawable.svn-base>
#include <osg/.svn/text-base/LineSegment.svn-base>
#include <osg/.svn/text-base/Matrix.svn-base>
#include <osg/.svn/text-base/Matrixd.svn-base>
#include <osg/.svn/text-base/Node.svn-base>
#include <osg/.svn/text-base/Vec3.svn-base>
#include <osg/.svn/text-base/Viewport.svn-base>
#include <osg/Camera>
#include <osg/Geode>
#include <osg/Projection>
#include <osgUtil/.svn/text-base/IntersectVisitor.svn-base>
#include <osgUtil/IntersectVisitor>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< int >, osgUtil::Hit::VecIndexList);

BEGIN_VALUE_REFLECTOR(osgUtil::Hit)
	I_Constructor0(____Hit,
	               "Describes a point in space produced by an intersection of a line with a scene. ",
	               "A Hit is always on a surface as rendered by the Open Scene Graph scene (usually a triangle or other primitive, but a special hit handler could return a different value perhaps: a sphere shape might return a Hit on the true sphere rather than the approximate tessellated sphere rendered.");
	I_Constructor1(IN, const osgUtil::Hit &, hit,
	               Properties::NON_EXPLICIT,
	               ____Hit__C5_Hit_R1,
	               "",
	               "");
	I_Method0(const osg::Vec3 &, getLocalIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLocalIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectNormal,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectNormal,
	          "",
	          "");
	I_Method0(float, getRatio,
	          Properties::NON_VIRTUAL,
	          __float__getRatio,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getOriginalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getOriginalLineSegment,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getLocalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getLocalLineSegment,
	          "",
	          "");
	I_Method0(osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(const osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __C5_osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(const osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getMatrix,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getInverseMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getInverseMatrix,
	          "",
	          "");
	I_Method0(const osgUtil::Hit::VecIndexList &, getVecIndexList,
	          Properties::NON_VIRTUAL,
	          __C5_VecIndexList_R1__getVecIndexList,
	          "",
	          "");
	I_Method0(int, getPrimitiveIndex,
	          Properties::NON_VIRTUAL,
	          __int__getPrimitiveIndex,
	          "",
	          "");
	I_Constructor0(____Hit,
	               "Describes a point in space produced by an intersection of a line with a scene. ",
	               "A Hit is always on a surface as rendered by the Open Scene Graph scene (usually a triangle or other primitive, but a special hit handler could return a different value perhaps: a sphere shape might return a Hit on the true sphere rather than the approximate tessellated sphere rendered.");
	I_Constructor1(IN, const osgUtil::Hit &, hit,
	               Properties::NON_EXPLICIT,
	               ____Hit__C5_Hit_R1,
	               "",
	               "");
	I_Method0(const osg::Vec3 &, getLocalIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLocalIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectNormal,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectNormal,
	          "",
	          "");
	I_Method0(float, getRatio,
	          Properties::NON_VIRTUAL,
	          __float__getRatio,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getOriginalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getOriginalLineSegment,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getLocalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getLocalLineSegment,
	          "",
	          "");
	I_Method0(osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(const osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __C5_osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(const osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getMatrix,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getInverseMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getInverseMatrix,
	          "",
	          "");
	I_Method0(const osgUtil::Hit::VecIndexList &, getVecIndexList,
	          Properties::NON_VIRTUAL,
	          __C5_VecIndexList_R1__getVecIndexList,
	          "",
	          "");
	I_Method0(int, getPrimitiveIndex,
	          Properties::NON_VIRTUAL,
	          __int__getPrimitiveIndex,
	          "",
	          "");
	I_SimpleProperty(osg::Drawable *, Drawable, 
	                 __osg_Drawable_P1__getDrawable, 
	                 0);
	I_SimpleProperty(osg::Geode *, Geode, 
	                 __osg_Geode_P1__getGeode, 
	                 0);
	I_SimpleProperty(const osg::RefMatrix *, InverseMatrix, 
	                 __C5_osg_RefMatrix_P1__getInverseMatrix, 
	                 0);
	I_SimpleProperty(const osg::Vec3 &, LocalIntersectNormal, 
	                 __C5_osg_Vec3_R1__getLocalIntersectNormal, 
	                 0);
	I_SimpleProperty(const osg::Vec3 &, LocalIntersectPoint, 
	                 __C5_osg_Vec3_R1__getLocalIntersectPoint, 
	                 0);
	I_SimpleProperty(const osg::LineSegment *, LocalLineSegment, 
	                 __C5_osg_LineSegment_P1__getLocalLineSegment, 
	                 0);
	I_SimpleProperty(const osg::RefMatrix *, Matrix, 
	                 __C5_osg_RefMatrix_P1__getMatrix, 
	                 0);
	I_SimpleProperty(osg::NodePath &, NodePath, 
	                 __osg_NodePath_R1__getNodePath, 
	                 0);
	I_SimpleProperty(const osg::LineSegment *, OriginalLineSegment, 
	                 __C5_osg_LineSegment_P1__getOriginalLineSegment, 
	                 0);
	I_SimpleProperty(int, PrimitiveIndex, 
	                 __int__getPrimitiveIndex, 
	                 0);
	I_SimpleProperty(float, Ratio, 
	                 __float__getRatio, 
	                 0);
	I_SimpleProperty(const osgUtil::Hit::VecIndexList &, VecIndexList, 
	                 __C5_VecIndexList_R1__getVecIndexList, 
	                 0);
	I_SimpleProperty(const osg::Vec3, WorldIntersectNormal, 
	                 __C5_osg_Vec3__getWorldIntersectNormal, 
	                 0);
	I_SimpleProperty(const osg::Vec3, WorldIntersectPoint, 
	                 __C5_osg_Vec3__getWorldIntersectPoint, 
	                 0);
	I_PublicMemberProperty(float, _ratio);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _originalLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _localLineSegment);
	I_PublicMemberProperty(osg::NodePath, _nodePath);
	I_PublicMemberProperty(osg::ref_ptr< osg::Geode >, _geode);
	I_PublicMemberProperty(osg::ref_ptr< osg::Drawable >, _drawable);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _matrix);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _inverse);
	I_PublicMemberProperty(osgUtil::Hit::VecIndexList, _vecIndexList);
	I_PublicMemberProperty(int, _primitiveIndex);
	I_PublicMemberProperty(osg::Vec3, _intersectPoint);
	I_PublicMemberProperty(osg::Vec3, _intersectNormal);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _originalLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _localLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::Geode >, _geode);
	I_PublicMemberProperty(osg::ref_ptr< osg::Drawable >, _drawable);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _matrix);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _inverse);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< int >, osgUtil::Hit::VecIndexList);

BEGIN_VALUE_REFLECTOR(osgUtil::Hit)
	I_Constructor0(____Hit,
	               "Describes a point in space produced by an intersection of a line with a scene. ",
	               "A Hit is always on a surface as rendered by the Open Scene Graph scene (usually a triangle or other primitive, but a special hit handler could return a different value perhaps: a sphere shape might return a Hit on the true sphere rather than the approximate tessellated sphere rendered.");
	I_Constructor1(IN, const osgUtil::Hit &, hit,
	               Properties::NON_EXPLICIT,
	               ____Hit__C5_Hit_R1,
	               "",
	               "");
	I_Method0(const osg::Vec3 &, getLocalIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLocalIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectNormal,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectNormal,
	          "",
	          "");
	I_Method0(float, getRatio,
	          Properties::NON_VIRTUAL,
	          __float__getRatio,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getOriginalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getOriginalLineSegment,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getLocalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getLocalLineSegment,
	          "",
	          "");
	I_Method0(osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(const osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __C5_osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(const osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getMatrix,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getInverseMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getInverseMatrix,
	          "",
	          "");
	I_Method0(const osgUtil::Hit::VecIndexList &, getVecIndexList,
	          Properties::NON_VIRTUAL,
	          __C5_VecIndexList_R1__getVecIndexList,
	          "",
	          "");
	I_Method0(int, getPrimitiveIndex,
	          Properties::NON_VIRTUAL,
	          __int__getPrimitiveIndex,
	          "",
	          "");
	I_Constructor0(____Hit,
	               "Describes a point in space produced by an intersection of a line with a scene. ",
	               "A Hit is always on a surface as rendered by the Open Scene Graph scene (usually a triangle or other primitive, but a special hit handler could return a different value perhaps: a sphere shape might return a Hit on the true sphere rather than the approximate tessellated sphere rendered.");
	I_Constructor1(IN, const osgUtil::Hit &, hit,
	               Properties::NON_EXPLICIT,
	               ____Hit__C5_Hit_R1,
	               "",
	               "");
	I_Method0(const osg::Vec3 &, getLocalIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLocalIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3_R1__getLocalIntersectNormal,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectPoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectPoint,
	          "",
	          "");
	I_Method0(const osg::Vec3, getWorldIntersectNormal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec3__getWorldIntersectNormal,
	          "",
	          "");
	I_Method0(float, getRatio,
	          Properties::NON_VIRTUAL,
	          __float__getRatio,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getOriginalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getOriginalLineSegment,
	          "",
	          "");
	I_Method0(const osg::LineSegment *, getLocalLineSegment,
	          Properties::NON_VIRTUAL,
	          __C5_osg_LineSegment_P1__getLocalLineSegment,
	          "",
	          "");
	I_Method0(osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(const osg::NodePath &, getNodePath,
	          Properties::NON_VIRTUAL,
	          __C5_osg_NodePath_R1__getNodePath,
	          "",
	          "");
	I_Method0(osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(const osg::Geode *, getGeode,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Geode_P1__getGeode,
	          "",
	          "");
	I_Method0(osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::Drawable *, getDrawable,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Drawable_P1__getDrawable,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getMatrix,
	          "",
	          "");
	I_Method0(const osg::RefMatrix *, getInverseMatrix,
	          Properties::NON_VIRTUAL,
	          __C5_osg_RefMatrix_P1__getInverseMatrix,
	          "",
	          "");
	I_Method0(const osgUtil::Hit::VecIndexList &, getVecIndexList,
	          Properties::NON_VIRTUAL,
	          __C5_VecIndexList_R1__getVecIndexList,
	          "",
	          "");
	I_Method0(int, getPrimitiveIndex,
	          Properties::NON_VIRTUAL,
	          __int__getPrimitiveIndex,
	          "",
	          "");
	I_SimpleProperty(osg::Drawable *, Drawable, 
	                 __osg_Drawable_P1__getDrawable, 
	                 0);
	I_SimpleProperty(osg::Geode *, Geode, 
	                 __osg_Geode_P1__getGeode, 
	                 0);
	I_SimpleProperty(const osg::RefMatrix *, InverseMatrix, 
	                 __C5_osg_RefMatrix_P1__getInverseMatrix, 
	                 0);
	I_SimpleProperty(const osg::Vec3 &, LocalIntersectNormal, 
	                 __C5_osg_Vec3_R1__getLocalIntersectNormal, 
	                 0);
	I_SimpleProperty(const osg::Vec3 &, LocalIntersectPoint, 
	                 __C5_osg_Vec3_R1__getLocalIntersectPoint, 
	                 0);
	I_SimpleProperty(const osg::LineSegment *, LocalLineSegment, 
	                 __C5_osg_LineSegment_P1__getLocalLineSegment, 
	                 0);
	I_SimpleProperty(const osg::RefMatrix *, Matrix, 
	                 __C5_osg_RefMatrix_P1__getMatrix, 
	                 0);
	I_SimpleProperty(osg::NodePath &, NodePath, 
	                 __osg_NodePath_R1__getNodePath, 
	                 0);
	I_SimpleProperty(const osg::LineSegment *, OriginalLineSegment, 
	                 __C5_osg_LineSegment_P1__getOriginalLineSegment, 
	                 0);
	I_SimpleProperty(int, PrimitiveIndex, 
	                 __int__getPrimitiveIndex, 
	                 0);
	I_SimpleProperty(float, Ratio, 
	                 __float__getRatio, 
	                 0);
	I_SimpleProperty(const osgUtil::Hit::VecIndexList &, VecIndexList, 
	                 __C5_VecIndexList_R1__getVecIndexList, 
	                 0);
	I_SimpleProperty(const osg::Vec3, WorldIntersectNormal, 
	                 __C5_osg_Vec3__getWorldIntersectNormal, 
	                 0);
	I_SimpleProperty(const osg::Vec3, WorldIntersectPoint, 
	                 __C5_osg_Vec3__getWorldIntersectPoint, 
	                 0);
	I_PublicMemberProperty(float, _ratio);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _originalLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _localLineSegment);
	I_PublicMemberProperty(osg::NodePath, _nodePath);
	I_PublicMemberProperty(osg::ref_ptr< osg::Geode >, _geode);
	I_PublicMemberProperty(osg::ref_ptr< osg::Drawable >, _drawable);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _matrix);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _inverse);
	I_PublicMemberProperty(osgUtil::Hit::VecIndexList, _vecIndexList);
	I_PublicMemberProperty(int, _primitiveIndex);
	I_PublicMemberProperty(osg::Vec3, _intersectPoint);
	I_PublicMemberProperty(osg::Vec3, _intersectNormal);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _originalLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::LineSegment >, _localLineSegment);
	I_PublicMemberProperty(osg::ref_ptr< osg::Geode >, _geode);
	I_PublicMemberProperty(osg::ref_ptr< osg::Drawable >, _drawable);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _matrix);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, _inverse);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgUtil::PickVisitor)
	I_BaseType(osgUtil::IntersectVisitor);
	I_BaseType(osgUtil::IntersectVisitor);
	I_Constructor5(IN, const osg::Viewport *, viewport, IN, const osg::Matrixd &, proj, IN, const osg::Matrixd &, view, IN, float, mx, IN, float, my,
	               ____PickVisitor__C5_osg_Viewport_P1__C5_osg_Matrixd_R1__C5_osg_Matrixd_R1__float__float,
	               "",
	               "");
	I_Method6(void, runNestedPickVisitor, IN, osg::Node &, node, IN, const osg::Viewport *, viewport, IN, const osg::Matrix &, proj, IN, const osg::Matrix &, view, IN, float, mx, IN, float, my,
	          Properties::NON_VIRTUAL,
	          __void__runNestedPickVisitor__osg_Node_R1__C5_osg_Viewport_P1__C5_osg_Matrix_R1__C5_osg_Matrix_R1__float__float,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Projection &, projection,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Projection_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Camera &, camera,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Camera_R1,
	          "",
	          "");
	I_Constructor5(IN, const osg::Viewport *, viewport, IN, const osg::Matrixd &, proj, IN, const osg::Matrixd &, view, IN, float, mx, IN, float, my,
	               ____PickVisitor__C5_osg_Viewport_P1__C5_osg_Matrixd_R1__C5_osg_Matrixd_R1__float__float,
	               "",
	               "");
	I_Method6(void, runNestedPickVisitor, IN, osg::Node &, node, IN, const osg::Viewport *, viewport, IN, const osg::Matrix &, proj, IN, const osg::Matrix &, view, IN, float, mx, IN, float, my,
	          Properties::NON_VIRTUAL,
	          __void__runNestedPickVisitor__osg_Node_R1__C5_osg_Viewport_P1__C5_osg_Matrix_R1__C5_osg_Matrix_R1__float__float,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Projection &, projection,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Projection_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Camera &, camera,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Camera_R1,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgUtil::PickVisitor)
	I_BaseType(osgUtil::IntersectVisitor);
	I_BaseType(osgUtil::IntersectVisitor);
	I_Constructor5(IN, const osg::Viewport *, viewport, IN, const osg::Matrixd &, proj, IN, const osg::Matrixd &, view, IN, float, mx, IN, float, my,
	               ____PickVisitor__C5_osg_Viewport_P1__C5_osg_Matrixd_R1__C5_osg_Matrixd_R1__float__float,
	               "",
	               "");
	I_Method6(void, runNestedPickVisitor, IN, osg::Node &, node, IN, const osg::Viewport *, viewport, IN, const osg::Matrix &, proj, IN, const osg::Matrix &, view, IN, float, mx, IN, float, my,
	          Properties::NON_VIRTUAL,
	          __void__runNestedPickVisitor__osg_Node_R1__C5_osg_Viewport_P1__C5_osg_Matrix_R1__C5_osg_Matrix_R1__float__float,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Projection &, projection,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Projection_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Camera &, camera,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Camera_R1,
	          "",
	          "");
	I_Constructor5(IN, const osg::Viewport *, viewport, IN, const osg::Matrixd &, proj, IN, const osg::Matrixd &, view, IN, float, mx, IN, float, my,
	               ____PickVisitor__C5_osg_Viewport_P1__C5_osg_Matrixd_R1__C5_osg_Matrixd_R1__float__float,
	               "",
	               "");
	I_Method6(void, runNestedPickVisitor, IN, osg::Node &, node, IN, const osg::Viewport *, viewport, IN, const osg::Matrix &, proj, IN, const osg::Matrix &, view, IN, float, mx, IN, float, my,
	          Properties::NON_VIRTUAL,
	          __void__runNestedPickVisitor__osg_Node_R1__C5_osg_Viewport_P1__C5_osg_Matrix_R1__C5_osg_Matrix_R1__float__float,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Projection &, projection,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Projection_R1,
	          "",
	          "");
	I_Method1(void, apply, IN, osg::Camera &, camera,
	          Properties::NON_VIRTUAL,
	          __void__apply__osg_Camera_R1,
	          "",
	          "");
END_REFLECTOR

