// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Drawable>
#include <osg/Node>
#include <osg/Vec3d>
#include <osgUtil/IntersectionVisitor>
#include <osgUtil/LineSegmentIntersector>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::multiset< osgUtil::LineSegmentIntersector::Intersection >, osgUtil::LineSegmentIntersector::Intersections);

BEGIN_OBJECT_REFLECTOR(osgUtil::LineSegmentIntersector)
	I_BaseType(osgUtil::Intersector);
	I_Constructor2(IN, const osg::Vec3d &, start, IN, const osg::Vec3d &, end,
	               ____LineSegmentIntersector__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1,
	               "Construct a LineSegmentIntersector the runs between the secified start and end points in MODEL coordinates. ",
	               "");
	I_Constructor3(IN, osgUtil::Intersector::CoordinateFrame, cf, IN, const osg::Vec3d &, start, IN, const osg::Vec3d &, end,
	               ____LineSegmentIntersector__CoordinateFrame__C5_osg_Vec3d_R1__C5_osg_Vec3d_R1,
	               "Construct a LineSegmentIntersector the runs between the secified start and end points in the specified coordinate frame. ",
	               "");
	I_Constructor3(IN, osgUtil::Intersector::CoordinateFrame, cf, IN, double, x, IN, double, y,
	               ____LineSegmentIntersector__CoordinateFrame__double__double,
	               "Convinience constructor for supporting picking in WINDOW, or PROJECTION coorindates In WINDOW coordinates creates a start value of (x,y,0) and end value of (x,y,1). ",
	               "In PROJECTION coordinates (clip space cube) creates a start value of (x,y,1) and end value of (x,y,-1). In VIEW and MODEL coordinates creates a start value of (x,y,0) and end value of (x,y,1). ");
	I_Method1(void, insertIntersection, IN, const osgUtil::LineSegmentIntersector::Intersection &, intersection,
	          __void__insertIntersection__C5_Intersection_R1,
	          "",
	          "");
	I_Method0(osgUtil::LineSegmentIntersector::Intersections &, getIntersections,
	          __Intersections_R1__getIntersections,
	          "",
	          "");
	I_Method0(osgUtil::LineSegmentIntersector::Intersection, getFirstIntersection,
	          __Intersection__getFirstIntersection,
	          "",
	          "");
	I_Method1(osgUtil::Intersector *, clone, IN, osgUtil::IntersectionVisitor &, iv,
	          __Intersector_P1__clone__osgUtil_IntersectionVisitor_R1,
	          "",
	          "");
	I_Method1(bool, enter, IN, const osg::Node &, node,
	          __bool__enter__C5_osg_Node_R1,
	          "",
	          "");
	I_Method0(void, leave,
	          __void__leave,
	          "",
	          "");
	I_Method2(void, intersect, IN, osgUtil::IntersectionVisitor &, iv, IN, osg::Drawable *, drawable,
	          __void__intersect__osgUtil_IntersectionVisitor_R1__osg_Drawable_P1,
	          "",
	          "");
	I_Method0(void, reset,
	          __void__reset,
	          "",
	          "");
	I_Method0(bool, containsIntersections,
	          __bool__containsIntersections,
	          "",
	          "");
	I_SimpleProperty(osgUtil::LineSegmentIntersector::Intersection, FirstIntersection, 
	                 __Intersection__getFirstIntersection, 
	                 0);
	I_SimpleProperty(osgUtil::LineSegmentIntersector::Intersections &, Intersections, 
	                 __Intersections_R1__getIntersections, 
	                 0);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< unsigned int >, osgUtil::LineSegmentIntersector::Intersection::IndexList);

BEGIN_VALUE_REFLECTOR(osgUtil::LineSegmentIntersector::Intersection)
	I_Constructor0(____Intersection,
	               "",
	               "");
	I_PublicMemberProperty(double, ratio);
	I_PublicMemberProperty(osg::NodePath, nodePath);
	I_PublicMemberProperty(osg::ref_ptr< osg::Drawable >, drawable);
	I_PublicMemberProperty(osg::ref_ptr< osg::RefMatrix >, matrix);
	I_PublicMemberProperty(osg::Vec3d, localIntersectionPoint);
	I_PublicMemberProperty(osg::Vec3, localIntersectionNormal);
	I_PublicMemberProperty(osgUtil::LineSegmentIntersector::Intersection::IndexList, indexList);
	I_PublicMemberProperty(unsigned int, primitiveIndex);
END_REFLECTOR

STD_SET_REFLECTOR(std::multiset< osgUtil::LineSegmentIntersector::Intersection >);

