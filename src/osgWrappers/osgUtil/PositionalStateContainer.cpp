// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Matrix>
#include <osg/Object>
#include <osg/test/CopyOp>
#include <osg/test/State>
#include <osg/test/StateAttribute>
#include <osgUtil/PositionalStateContainer>
#include <osgUtil/RenderLeaf>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::pair< osg::ref_ptr< const osg::StateAttribute > COMMA  osg::ref_ptr< osg::RefMatrix > >, osgUtil::PositionalStateContainer::AttrMatrixPair);

TYPE_NAME_ALIAS(std::vector< osgUtil::PositionalStateContainer::AttrMatrixPair >, osgUtil::PositionalStateContainer::AttrMatrixList);

TYPE_NAME_ALIAS(std::map< unsigned int COMMA  osgUtil::PositionalStateContainer::AttrMatrixList >, osgUtil::PositionalStateContainer::TexUnitAttrMatrixListMap);

BEGIN_OBJECT_REFLECTOR(osgUtil::PositionalStateContainer)
	I_BaseType(osg::Object);
	I_Constructor0();
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, x);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, libraryName);
	I_Method0(const char *, className);
	I_Method0(void, reset);
	I_Method2(void, addPositionedAttribute, IN, osg::RefMatrix *, matrix, IN, const osg::StateAttribute *, attr);
	I_Method3(void, addPositionedTextureAttribute, IN, unsigned int, textureUnit, IN, osg::RefMatrix *, matrix, IN, const osg::StateAttribute *, attr);
	I_MethodWithDefaults3(void, draw, IN, osg::State &, state, , IN, osgUtil::RenderLeaf *&, previous, , IN, const osg::Matrix *, postMultMatrix, 0);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osg::RefMatrix >)
	I_Constructor0();
	I_Constructor1(IN, osg::RefMatrix *, ptr);
	I_Constructor1(IN, const osg::ref_ptr< osg::RefMatrix > &, rp);
	I_Method0(osg::RefMatrix *, get);
	I_Method0(bool, valid);
	I_Method0(osg::RefMatrix *, release);
	I_Method1(void, swap, IN, osg::ref_ptr< osg::RefMatrix > &, rp);
	I_Constructor0();
	I_Constructor1(IN, osg::RefMatrix *, ptr);
	I_Constructor1(IN, const osg::ref_ptr< osg::RefMatrix > &, rp);
	I_Method0(osg::RefMatrix *, get);
	I_Method0(bool, valid);
	I_Method0(osg::RefMatrix *, release);
	I_Method1(void, swap, IN, osg::ref_ptr< osg::RefMatrix > &, rp);
	I_ReadOnlyProperty(osg::RefMatrix *, );
END_REFLECTOR

STD_MAP_REFLECTOR(std::map< unsigned int COMMA  osgUtil::PositionalStateContainer::AttrMatrixList >);

STD_PAIR_REFLECTOR(std::pair< osg::ref_ptr< const osg::StateAttribute > COMMA  osg::ref_ptr< osg::RefMatrix > >);

STD_VECTOR_REFLECTOR(std::vector< osgUtil::PositionalStateContainer::AttrMatrixPair >);

