// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgViewer/ViewerEventHandlers>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgViewer::RecordCameraPathHandler)
	I_BaseType(osgGA::GUIEventHandler);
	I_Constructor0(____RecordCameraPathHandler,
	               "",
	               "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "deprecated, Handle events, return true if handled, false otherwise. ",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgViewer::ThreadingHandler)
	I_BaseType(osgGA::GUIEventHandler);
	I_Constructor0(____ThreadingHandler,
	               "",
	               "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method1(void, setKeyEventChangeThreadingModel, IN, int, key,
	          Properties::NON_VIRTUAL,
	          __void__setKeyEventChangeThreadingModel__int,
	          "",
	          "");
	I_Method0(int, getKeyEventChangeThreadingModel,
	          Properties::NON_VIRTUAL,
	          __int__getKeyEventChangeThreadingModel,
	          "",
	          "");
	I_Method1(void, setChangeThreadingModel, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setChangeThreadingModel__bool,
	          "",
	          "");
	I_Method0(bool, getChangeThreadingModel,
	          Properties::NON_VIRTUAL,
	          __bool__getChangeThreadingModel,
	          "",
	          "");
	I_Method1(void, setKeyEventChangeEndBarrierPosition, IN, int, key,
	          Properties::NON_VIRTUAL,
	          __void__setKeyEventChangeEndBarrierPosition__int,
	          "",
	          "");
	I_Method0(int, getKeyEventChangeEndBarrierPosition,
	          Properties::NON_VIRTUAL,
	          __int__getKeyEventChangeEndBarrierPosition,
	          "",
	          "");
	I_Method1(void, setChangeEndBarrierPosition, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setChangeEndBarrierPosition__bool,
	          "",
	          "");
	I_Method0(bool, getChangeEndBarrierPosition,
	          Properties::NON_VIRTUAL,
	          __bool__getChangeEndBarrierPosition,
	          "",
	          "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "deprecated, Handle events, return true if handled, false otherwise. ",
	          "");
	I_SimpleProperty(bool, ChangeEndBarrierPosition, 
	                 __bool__getChangeEndBarrierPosition, 
	                 __void__setChangeEndBarrierPosition__bool);
	I_SimpleProperty(bool, ChangeThreadingModel, 
	                 __bool__getChangeThreadingModel, 
	                 __void__setChangeThreadingModel__bool);
	I_SimpleProperty(int, KeyEventChangeEndBarrierPosition, 
	                 __int__getKeyEventChangeEndBarrierPosition, 
	                 __void__setKeyEventChangeEndBarrierPosition__int);
	I_SimpleProperty(int, KeyEventChangeThreadingModel, 
	                 __int__getKeyEventChangeThreadingModel, 
	                 __void__setKeyEventChangeThreadingModel__int);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgViewer::WindowSizeHandler)
	I_BaseType(osgGA::GUIEventHandler);
	I_Constructor0(____WindowSizeHandler,
	               "",
	               "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method1(void, setKeyEventToggleFullscreen, IN, int, key,
	          Properties::NON_VIRTUAL,
	          __void__setKeyEventToggleFullscreen__int,
	          "",
	          "");
	I_Method0(int, getKeyEventToggleFullscreen,
	          Properties::NON_VIRTUAL,
	          __int__getKeyEventToggleFullscreen,
	          "",
	          "");
	I_Method1(void, setToggleFullscreen, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setToggleFullscreen__bool,
	          "",
	          "");
	I_Method0(bool, getToggleFullscreen,
	          Properties::NON_VIRTUAL,
	          __bool__getToggleFullscreen,
	          "",
	          "");
	I_Method1(void, setKeyEventWindowedResolutionUp, IN, int, key,
	          Properties::NON_VIRTUAL,
	          __void__setKeyEventWindowedResolutionUp__int,
	          "",
	          "");
	I_Method0(int, getKeyEventWindowedResolutionUp,
	          Properties::NON_VIRTUAL,
	          __int__getKeyEventWindowedResolutionUp,
	          "",
	          "");
	I_Method1(void, setKeyEventWindowedResolutionDown, IN, int, key,
	          Properties::NON_VIRTUAL,
	          __void__setKeyEventWindowedResolutionDown__int,
	          "",
	          "");
	I_Method0(int, getKeyEventWindowedResolutionDown,
	          Properties::NON_VIRTUAL,
	          __int__getKeyEventWindowedResolutionDown,
	          "",
	          "");
	I_Method1(void, setChangeWindowedResolution, IN, bool, flag,
	          Properties::NON_VIRTUAL,
	          __void__setChangeWindowedResolution__bool,
	          "",
	          "");
	I_Method0(bool, getChangeWindowedResolution,
	          Properties::NON_VIRTUAL,
	          __bool__getChangeWindowedResolution,
	          "",
	          "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "deprecated, Handle events, return true if handled, false otherwise. ",
	          "");
	I_ProtectedMethod1(void, toggleFullscreen, IN, osgViewer::GraphicsWindow *, window,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__toggleFullscreen__osgViewer_GraphicsWindow_P1,
	                   "",
	                   "");
	I_ProtectedMethod2(void, changeWindowedResolution, IN, osgViewer::GraphicsWindow *, window, IN, bool, increase,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__changeWindowedResolution__osgViewer_GraphicsWindow_P1__bool,
	                   "",
	                   "");
	I_ProtectedMethod4(unsigned int, getNearestResolution, IN, int, screenWidth, IN, int, screenHeight, IN, int, width, IN, int, height,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __unsigned_int__getNearestResolution__int__int__int__int,
	                   "",
	                   "");
	I_SimpleProperty(bool, ChangeWindowedResolution, 
	                 __bool__getChangeWindowedResolution, 
	                 __void__setChangeWindowedResolution__bool);
	I_SimpleProperty(int, KeyEventToggleFullscreen, 
	                 __int__getKeyEventToggleFullscreen, 
	                 __void__setKeyEventToggleFullscreen__int);
	I_SimpleProperty(int, KeyEventWindowedResolutionDown, 
	                 __int__getKeyEventWindowedResolutionDown, 
	                 __void__setKeyEventWindowedResolutionDown__int);
	I_SimpleProperty(int, KeyEventWindowedResolutionUp, 
	                 __int__getKeyEventWindowedResolutionUp, 
	                 __void__setKeyEventWindowedResolutionUp__int);
	I_SimpleProperty(bool, ToggleFullscreen, 
	                 __bool__getToggleFullscreen, 
	                 __void__setToggleFullscreen__bool);
END_REFLECTOR

