// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgViewer/Viewer>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osg::GraphicsContext * >, osgViewer::Viewer::Contexts);

BEGIN_OBJECT_REFLECTOR(osgViewer::Viewer)
	I_BaseType(osgViewer::View);
	I_Constructor0(____Viewer,
	               "",
	               "");
	I_Method0(void, realize,
	          __void__realize,
	          "set up windows and associated threads. ",
	          "");
	I_Method1(void, setDone, IN, bool, done,
	          __void__setDone__bool,
	          "",
	          "");
	I_Method0(bool, done,
	          __bool__done,
	          "",
	          "");
	I_Method0(void, frame,
	          __void__frame,
	          "Render a complete new frame. ",
	          "Calls frameAdvance(), frameEventTraversal(), frameUpateTraversal(), frameRenderingTraversals(). ");
	I_Method0(void, frameAdvance,
	          __void__frameAdvance,
	          "",
	          "");
	I_Method0(void, frameEventTraversal,
	          __void__frameEventTraversal,
	          "",
	          "");
	I_Method0(void, frameUpdateTraversal,
	          __void__frameUpdateTraversal,
	          "",
	          "");
	I_Method0(void, frameRenderingTraversals,
	          __void__frameRenderingTraversals,
	          "",
	          "");
	I_Method0(void, releaseAllGLObjects,
	          __void__releaseAllGLObjects,
	          "Release all OpenGL objects associated with this viewer's scenegraph. ",
	          "Note, does not deleted the actual OpenGL objects, it just releases them to the pending GL object delete lists which will need flushing once a valid graphics context is obtained. ");
	I_Method0(void, cleanup,
	          __void__cleanup,
	          "Clean up all OpenGL objects associated with this viewer's scenegraph. ",
	          "");
	I_Method0(void, init,
	          __void__init,
	          "",
	          "");
	I_Method1(void, getContexts, IN, osgViewer::Viewer::Contexts &, contexts,
	          __void__getContexts__Contexts_R1,
	          "",
	          "");
	I_SimpleProperty(bool, Done, 
	                 0, 
	                 __void__setDone__bool);
	I_PublicMemberProperty(bool, _firstFrame);
	I_PublicMemberProperty(bool, _done);
	I_PublicMemberProperty(osg::ref_ptr< osg::BarrierOperation >, _startRenderingBarrier);
	I_PublicMemberProperty(osg::ref_ptr< osg::BarrierOperation >, _endRenderingDispatchBarrier);
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::GraphicsContext * >);

