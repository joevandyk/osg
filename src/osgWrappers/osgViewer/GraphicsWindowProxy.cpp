// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/GraphicsContext>
#include <osgViewer/GraphicsWindow>
#include <osgViewer/GraphicsWindowProxy>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgViewer::GraphicsWindowProxy)
	I_BaseType(osgViewer::GraphicsWindow);
	I_Constructor0(____GraphicsWindowProxy,
	               "",
	               "");
	I_Method1(void, setGraphicsWindowImplentation, IN, osgViewer::GraphicsWindow *, gw,
	          __void__setGraphicsWindowImplentation__osgViewer_GraphicsWindow_P1,
	          "",
	          "");
	I_Method0(osgViewer::GraphicsWindow *, getGraphicsWindowImplentation,
	          __osgViewer_GraphicsWindow_P1__getGraphicsWindowImplentation,
	          "",
	          "");
	I_Method0(const osgViewer::GraphicsWindow *, getGraphicsWindowImplentation,
	          __C5_osgViewer_GraphicsWindow_P1__getGraphicsWindowImplentation,
	          "",
	          "");
	I_Method0(bool, realizeImplementation,
	          __bool__realizeImplementation,
	          "Realise the GraphicsContext implementation, Pure virtual - must be implemented by concrate implementations of GraphicsContext. ",
	          "");
	I_Method0(bool, isRealizedImplementation,
	          __bool__isRealizedImplementation,
	          "Return true if the graphics context has been realised, and is ready to use, implementation. ",
	          "Pure virtual - must be implemented by concrate implementations of GraphicsContext. ");
	I_Method0(void, closeImplementation,
	          __void__closeImplementation,
	          "Close the graphics context implementation. ",
	          "Pure virtual - must be implemented by concrate implementations of GraphicsContext. ");
	I_Method0(void, makeCurrentImplementation,
	          __void__makeCurrentImplementation,
	          "Make this graphics context current implementation. ",
	          "Pure virtual - must be implemented by concrate implementations of GraphicsContext. ");
	I_Method1(void, makeContextCurrentImplementation, IN, osg::GraphicsContext *, readContext,
	          __void__makeContextCurrentImplementation__GraphicsContext_P1,
	          "Make this graphics context current with specified read context implementation. ",
	          "Pure virtual - must be implemented by concrate implementations of GraphicsContext. ");
	I_Method1(void, bindPBufferToTextureImplementation, IN, GLenum, buffer,
	          __void__bindPBufferToTextureImplementation__GLenum,
	          "Pure virtual, Bind the graphics context to associated texture implementation. ",
	          "Pure virtual - must be implemented by concrate implementations of GraphicsContext. ");
	I_Method0(void, swapBuffersImplementation,
	          __void__swapBuffersImplementation,
	          "Swap the front and back buffers implementation. ",
	          "Pure virtual - must be implemented by Concrate implementations of GraphicsContext. ");
	I_Method0(void, requestRedraw,
	          __void__requestRedraw,
	          "requestRedraw() requests a single redraw. ",
	          "");
	I_MethodWithDefaults1(void, requestContinuousUpdate, IN, bool, needed, true,
	                      __void__requestContinuousUpdate__bool,
	                      "requestContinousUpdate(bool) is for en/disabling a throw or idle callback to be requested by a GUIEventHandler (typically a MatrixManipulator, though other GUIEventHandler's may also provide functionality). ",
	                      "GUI toolkits can respond to this immediately by registering an idle/timed callback, or can delay setting the callback and update at their own leisure.");
	I_Method2(void, requestWarpPointer, IN, float, x, IN, float, y,
	          __void__requestWarpPointer__float__float,
	          "requestWarpPointer(int,int) is requesting a repositioning of the mouse pointer to a specified x,y location on the window. ",
	          "This is used by some camera manipulators to initialise the mouse pointer when mouse position relative to a controls neutral mouse position is required, i.e when mimicking a aircrafts joystick.");
	I_SimpleProperty(osgViewer::GraphicsWindow *, GraphicsWindowImplentation, 
	                 __osgViewer_GraphicsWindow_P1__getGraphicsWindowImplentation, 
	                 __void__setGraphicsWindowImplentation__osgViewer_GraphicsWindow_P1);
END_REFLECTOR

