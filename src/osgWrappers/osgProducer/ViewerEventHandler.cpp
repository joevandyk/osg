// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osg/State>
#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgProducer/OsgCameraGroup>
#include <osgProducer/ViewerEventHandler>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgProducer::ViewerEventHandler::FrameStatsMode)
	I_EnumLabel(osgProducer::ViewerEventHandler::NO_STATS);
	I_EnumLabel(osgProducer::ViewerEventHandler::FRAME_RATE);
	I_EnumLabel(osgProducer::ViewerEventHandler::CAMERA_STATS);
	I_EnumLabel(osgProducer::ViewerEventHandler::SCENE_STATS);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgProducer::ViewerEventHandler)
	I_BaseType(osgGA::GUIEventHandler);
	I_Constructor1(IN, osgProducer::OsgCameraGroup *, cg,
	               Properties::NON_EXPLICIT,
	               ____ViewerEventHandler__OsgCameraGroup_P1,
	               "",
	               "");
	I_Method2(bool, handle, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	          Properties::VIRTUAL,
	          __bool__handle__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "deprecated, Handle events, return true if handled, false otherwise. ",
	          "");
	I_Method1(void, getUsage, IN, osg::ApplicationUsage &, usage,
	          Properties::VIRTUAL,
	          __void__getUsage__osg_ApplicationUsage_R1,
	          "Get the keyboard and mouse usage of this manipulator. ",
	          "");
	I_Method0(osgProducer::OsgCameraGroup *, getOsgCameraGroup,
	          Properties::NON_VIRTUAL,
	          __OsgCameraGroup_P1__getOsgCameraGroup,
	          "",
	          "");
	I_Method0(const osgProducer::OsgCameraGroup *, getOsgCameraGroup,
	          Properties::NON_VIRTUAL,
	          __C5_OsgCameraGroup_P1__getOsgCameraGroup,
	          "",
	          "");
	I_Method1(void, setWriteNodeFileName, IN, const std::string &, filename,
	          Properties::NON_VIRTUAL,
	          __void__setWriteNodeFileName__C5_std_string_R1,
	          "",
	          "");
	I_Method0(const std::string &, getWriteNodeFileName,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__getWriteNodeFileName,
	          "",
	          "");
	I_Method1(void, setDisplayHelp, IN, bool, displayHelp,
	          Properties::NON_VIRTUAL,
	          __void__setDisplayHelp__bool,
	          "",
	          "");
	I_Method0(bool, getDisplayHelp,
	          Properties::NON_VIRTUAL,
	          __bool__getDisplayHelp,
	          "",
	          "");
	I_Method1(void, setFrameStatsMode, IN, osgProducer::ViewerEventHandler::FrameStatsMode, mode,
	          Properties::NON_VIRTUAL,
	          __void__setFrameStatsMode__FrameStatsMode,
	          "",
	          "");
	I_Method0(osgProducer::ViewerEventHandler::FrameStatsMode, getFrameStatsMode,
	          Properties::NON_VIRTUAL,
	          __FrameStatsMode__getFrameStatsMode,
	          "",
	          "");
	I_Method1(void, setWriteImageOnNextFrame, IN, bool, writeImageOnNextFrame,
	          Properties::NON_VIRTUAL,
	          __void__setWriteImageOnNextFrame__bool,
	          "",
	          "");
	I_Method1(void, setWriteImageFileName, IN, const std::string &, filename,
	          Properties::NON_VIRTUAL,
	          __void__setWriteImageFileName__C5_std_string_R1,
	          "",
	          "");
	I_Method0(const std::string &, getWriteImageFileName,
	          Properties::NON_VIRTUAL,
	          __C5_std_string_R1__getWriteImageFileName,
	          "",
	          "");
	I_MethodWithDefaults1(void, releaseGLObjects, IN, osg::State *, x, 0,
	                      Properties::VIRTUAL,
	                      __void__releaseGLObjects__osg_State_P1,
	                      "release OpenGL objects in specified graphics context if State object is passed, otherwise release OpenGL objexts for all graphics context if State object pointer NULL. ",
	                      "");
	I_SimpleProperty(bool, DisplayHelp, 
	                 __bool__getDisplayHelp, 
	                 __void__setDisplayHelp__bool);
	I_SimpleProperty(osgProducer::ViewerEventHandler::FrameStatsMode, FrameStatsMode, 
	                 __FrameStatsMode__getFrameStatsMode, 
	                 __void__setFrameStatsMode__FrameStatsMode);
	I_SimpleProperty(osgProducer::OsgCameraGroup *, OsgCameraGroup, 
	                 __OsgCameraGroup_P1__getOsgCameraGroup, 
	                 0);
	I_SimpleProperty(const std::string &, WriteImageFileName, 
	                 __C5_std_string_R1__getWriteImageFileName, 
	                 __void__setWriteImageFileName__C5_std_string_R1);
	I_SimpleProperty(bool, WriteImageOnNextFrame, 
	                 0, 
	                 __void__setWriteImageOnNextFrame__bool);
	I_SimpleProperty(const std::string &, WriteNodeFileName, 
	                 __C5_std_string_R1__getWriteNodeFileName, 
	                 __void__setWriteNodeFileName__C5_std_string_R1);
END_REFLECTOR

