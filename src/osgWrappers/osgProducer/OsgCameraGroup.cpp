// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/ApplicationUsage>
#include <osg/ArgumentParser>
#include <osg/CullSettings>
#include <osg/DisplaySettings>
#include <osg/FrameStamp>
#include <osg/Group>
#include <osg/Matrixd>
#include <osg/Node>
#include <osg/StateSet>
#include <osg/Vec4>
#include <osgProducer/OsgCameraGroup>
#include <osgProducer/OsgSceneHandler>
#include <osgUtil/SceneView>

TYPE_NAME_ALIAS(std::vector< Producer::ref_ptr< osgProducer::OsgSceneHandler > >, osgProducer::OsgCameraGroup::SceneHandlerList);

BEGIN_VALUE_REFLECTOR(osgProducer::OsgCameraGroup)
	Constructor0();
	Constructor1(IN, Producer::CameraConfig *, cfg);
	Constructor1(IN, const std::string &, configFile);
	Constructor1(IN, osg::ArgumentParser &, arguments);
	Method1(void, setApplicationUsage, IN, osg::ApplicationUsage *, au);
	Method0(osg::ApplicationUsage *, getApplicationUsage);
	Method0(const osg::ApplicationUsage *, getApplicationUsage);
	Method0(osgProducer::OsgCameraGroup::SceneHandlerList &, getSceneHandlerList);
	Method0(const osgProducer::OsgCameraGroup::SceneHandlerList &, getSceneHandlerList);
	Method1(void, setSceneData, IN, osg::Node *, scene);
	Method0(osg::Node *, getSceneData);
	Method0(const osg::Node *, getSceneData);
	Method1(void, setSceneDecorator, IN, osg::Group *, decorator);
	Method0(osg::Group *, getSceneDecorator);
	Method0(const osg::Group *, getSceneDecorator);
	Method0(osg::Node *, getTopMostSceneData);
	Method0(const osg::Node *, getTopMostSceneData);
	Method0(void, updatedSceneData);
	Method1(void, setDisplaySettings, IN, osg::DisplaySettings *, ds);
	Method0(osg::DisplaySettings *, getDisplaySettings);
	Method0(const osg::DisplaySettings *, getDisplaySettings);
	Method1(void, setCullSettings, IN, const osg::CullSettings &, cs);
	Method0(osg::CullSettings &, getCullSettings);
	Method0(const osg::CullSettings &, getCullSettings);
	Method1(void, setFrameStamp, IN, osg::FrameStamp *, fs);
	Method0(osg::FrameStamp *, getFrameStamp);
	Method0(const osg::FrameStamp *, getFrameStamp);
	Method1(void, setGlobalStateSet, IN, osg::StateSet *, sset);
	Method0(osg::StateSet *, getGlobalStateSet);
	Method0(const osg::StateSet *, getGlobalStateSet);
	Method1(void, setClearColor, IN, const osg::Vec4 &, clearColor);
	Method0(const osg::Vec4 &, getClearColor);
	Method1(void, setLODScale, IN, float, scale);
	Method0(float, getLODScale);
	MethodWithDefaults2(void, setFusionDistance, IN, osgUtil::SceneView::FusionDistanceMode, mode, , IN, float, value, 1.0f);
	Method1(void, setRealizeSceneViewOptions, IN, unsigned int, options);
	Method0(unsigned int, getRealizeSceneViewOptions);
	Method1(void, setRealizeCallback, IN, osgProducer::OsgCameraGroup::RealizeCallback *, cb);
	Method0(osgProducer::OsgCameraGroup::RealizeCallback *, getRealizeCallback);
	Method0(const osgProducer::OsgCameraGroup::RealizeCallback *, getRealizeCallback);
	Method0(void, advance);
	Method1(bool, realize, IN, ThreadingModel, thread_model);
	Method0(bool, realize);
	Method1(void, setView, IN, const osg::Matrixd &, matrix);
	Method0(osg::Matrixd, getViewMatrix);
	Method0(void, sync);
	Method0(void, frame);
	Method0(void, cleanup_frame);
	Property(osg::ApplicationUsage *, ApplicationUsage);
	Property(const osg::Vec4 &, ClearColor);
	Property(const osg::CullSettings &, CullSettings);
	Property(osg::DisplaySettings *, DisplaySettings);
	Property(osg::FrameStamp *, FrameStamp);
	Property(osg::StateSet *, GlobalStateSet);
	Property(float, LODScale);
	Property(osgProducer::OsgCameraGroup::RealizeCallback *, RealizeCallback);
	Property(unsigned int, RealizeSceneViewOptions);
	Property(osg::Node *, SceneData);
	Property(osg::Group *, SceneDecorator);
	ReadOnlyProperty(osgProducer::OsgCameraGroup::SceneHandlerList &, SceneHandlerList);
	ReadOnlyProperty(osg::Node *, TopMostSceneData);
	WriteOnlyProperty(const osg::Matrixd &, View);
	ReadOnlyProperty(osg::Matrixd, ViewMatrix);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgProducer::OsgCameraGroup::RealizeCallback)
	BaseType(osg::Referenced);
	Constructor0();
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< Producer::ref_ptr< osgProducer::OsgSceneHandler > >);

