// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/Matrix.svn-base>
#include <osg/.svn/text-base/Vec2.svn-base>
#include <osgManipulator/.svn/text-base/Command.svn-base>
#include <osgManipulator/Command>
#include <osgManipulator/Constraint>
#include <osgManipulator/Selection>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgManipulator::MotionCommand::Stage)
	I_EnumLabel(osgManipulator::MotionCommand::NONE);
	I_EnumLabel(osgManipulator::MotionCommand::START);
	I_EnumLabel(osgManipulator::MotionCommand::MOVE);
	I_EnumLabel(osgManipulator::MotionCommand::FINISH);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgManipulator::MotionCommand)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor0(____MotionCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::PURE_VIRTUAL,
	          __bool__execute,
	          "Execute the command. ",
	          "");
	I_Method0(bool, unexecute,
	          Properties::PURE_VIRTUAL,
	          __bool__unexecute,
	          "Undo the command. ",
	          "The inverse of this command is executed. ");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::PURE_VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "Apply a constraint to the command. ",
	          "");
	I_Method1(void, addSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__addSelection__Selection_P1,
	          "Add Selection (receiver) to the command. ",
	          "The command will be executed on all the selections.");
	I_Method1(void, removeSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__removeSelection__Selection_P1,
	          "Remove Selection (receiver) from the command. ",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::PURE_VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "Gets the matrix for transforming the Selection. ",
	          "This matrix is in the command's coordinate systems.");
	I_Method2(void, setLocalToWorldAndWorldToLocal, IN, const osg::Matrix &, localToWorld, IN, const osg::Matrix &, worldToLocal,
	          Properties::NON_VIRTUAL,
	          __void__setLocalToWorldAndWorldToLocal__C5_osg_Matrix_R1__C5_osg_Matrix_R1,
	          "Sets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getLocalToWorld,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getLocalToWorld,
	          "Gets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getWorldToLocal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getWorldToLocal,
	          "Gets the matrix for transforming the command's world/object coordinate system to the command's local coordinate system. ",
	          "");
	I_Method1(void, setStage, IN, const osgManipulator::MotionCommand::Stage, s,
	          Properties::NON_VIRTUAL,
	          __void__setStage__C5_Stage,
	          "",
	          "");
	I_Method0(osgManipulator::MotionCommand::Stage, getStage,
	          Properties::NON_VIRTUAL,
	          __Stage__getStage,
	          "",
	          "");
	I_Constructor0(____MotionCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::PURE_VIRTUAL,
	          __bool__execute,
	          "Execute the command. ",
	          "");
	I_Method0(bool, unexecute,
	          Properties::PURE_VIRTUAL,
	          __bool__unexecute,
	          "Undo the command. ",
	          "The inverse of this command is executed. ");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::PURE_VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "Apply a constraint to the command. ",
	          "");
	I_Method1(void, addSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__addSelection__Selection_P1,
	          "Add Selection (receiver) to the command. ",
	          "The command will be executed on all the selections.");
	I_Method1(void, removeSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__removeSelection__Selection_P1,
	          "Remove Selection (receiver) from the command. ",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::PURE_VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "Gets the matrix for transforming the Selection. ",
	          "This matrix is in the command's coordinate systems.");
	I_Method2(void, setLocalToWorldAndWorldToLocal, IN, const osg::Matrix &, localToWorld, IN, const osg::Matrix &, worldToLocal,
	          Properties::NON_VIRTUAL,
	          __void__setLocalToWorldAndWorldToLocal__C5_osg_Matrix_R1__C5_osg_Matrix_R1,
	          "Sets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getLocalToWorld,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getLocalToWorld,
	          "Gets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getWorldToLocal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getWorldToLocal,
	          "Gets the matrix for transforming the command's world/object coordinate system to the command's local coordinate system. ",
	          "");
	I_Method1(void, setStage, IN, const osgManipulator::MotionCommand::Stage, s,
	          Properties::NON_VIRTUAL,
	          __void__setStage__C5_Stage,
	          "",
	          "");
	I_Method0(osgManipulator::MotionCommand::Stage, getStage,
	          Properties::NON_VIRTUAL,
	          __Stage__getStage,
	          "",
	          "");
	I_SimpleProperty(const osg::Matrix &, LocalToWorld, 
	                 __C5_osg_Matrix_R1__getLocalToWorld, 
	                 0);
	I_SimpleProperty(osg::Matrix, MotionMatrix, 
	                 __osg_Matrix__getMotionMatrix, 
	                 0);
	I_SimpleProperty(osgManipulator::MotionCommand::Stage, Stage, 
	                 __Stage__getStage, 
	                 0);
	I_SimpleProperty(const osg::Matrix &, WorldToLocal, 
	                 __C5_osg_Matrix_R1__getWorldToLocal, 
	                 0);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgManipulator::MotionCommand::Stage)
	I_EnumLabel(osgManipulator::MotionCommand::NONE);
	I_EnumLabel(osgManipulator::MotionCommand::START);
	I_EnumLabel(osgManipulator::MotionCommand::MOVE);
	I_EnumLabel(osgManipulator::MotionCommand::FINISH);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgManipulator::MotionCommand)
	I_BaseType(osg::Referenced);
	I_BaseType(osg::Referenced);
	I_Constructor0(____MotionCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::PURE_VIRTUAL,
	          __bool__execute,
	          "Execute the command. ",
	          "");
	I_Method0(bool, unexecute,
	          Properties::PURE_VIRTUAL,
	          __bool__unexecute,
	          "Undo the command. ",
	          "The inverse of this command is executed. ");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::PURE_VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "Apply a constraint to the command. ",
	          "");
	I_Method1(void, addSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__addSelection__Selection_P1,
	          "Add Selection (receiver) to the command. ",
	          "The command will be executed on all the selections.");
	I_Method1(void, removeSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__removeSelection__Selection_P1,
	          "Remove Selection (receiver) from the command. ",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::PURE_VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "Gets the matrix for transforming the Selection. ",
	          "This matrix is in the command's coordinate systems.");
	I_Method2(void, setLocalToWorldAndWorldToLocal, IN, const osg::Matrix &, localToWorld, IN, const osg::Matrix &, worldToLocal,
	          Properties::NON_VIRTUAL,
	          __void__setLocalToWorldAndWorldToLocal__C5_osg_Matrix_R1__C5_osg_Matrix_R1,
	          "Sets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getLocalToWorld,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getLocalToWorld,
	          "Gets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getWorldToLocal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getWorldToLocal,
	          "Gets the matrix for transforming the command's world/object coordinate system to the command's local coordinate system. ",
	          "");
	I_Method1(void, setStage, IN, const osgManipulator::MotionCommand::Stage, s,
	          Properties::NON_VIRTUAL,
	          __void__setStage__C5_Stage,
	          "",
	          "");
	I_Method0(osgManipulator::MotionCommand::Stage, getStage,
	          Properties::NON_VIRTUAL,
	          __Stage__getStage,
	          "",
	          "");
	I_Constructor0(____MotionCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::PURE_VIRTUAL,
	          __bool__execute,
	          "Execute the command. ",
	          "");
	I_Method0(bool, unexecute,
	          Properties::PURE_VIRTUAL,
	          __bool__unexecute,
	          "Undo the command. ",
	          "The inverse of this command is executed. ");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::PURE_VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "Apply a constraint to the command. ",
	          "");
	I_Method1(void, addSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__addSelection__Selection_P1,
	          "Add Selection (receiver) to the command. ",
	          "The command will be executed on all the selections.");
	I_Method1(void, removeSelection, IN, osgManipulator::Selection *, x,
	          Properties::NON_VIRTUAL,
	          __void__removeSelection__Selection_P1,
	          "Remove Selection (receiver) from the command. ",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::PURE_VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "Gets the matrix for transforming the Selection. ",
	          "This matrix is in the command's coordinate systems.");
	I_Method2(void, setLocalToWorldAndWorldToLocal, IN, const osg::Matrix &, localToWorld, IN, const osg::Matrix &, worldToLocal,
	          Properties::NON_VIRTUAL,
	          __void__setLocalToWorldAndWorldToLocal__C5_osg_Matrix_R1__C5_osg_Matrix_R1,
	          "Sets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getLocalToWorld,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getLocalToWorld,
	          "Gets the matrix for transforming the command's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getWorldToLocal,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Matrix_R1__getWorldToLocal,
	          "Gets the matrix for transforming the command's world/object coordinate system to the command's local coordinate system. ",
	          "");
	I_Method1(void, setStage, IN, const osgManipulator::MotionCommand::Stage, s,
	          Properties::NON_VIRTUAL,
	          __void__setStage__C5_Stage,
	          "",
	          "");
	I_Method0(osgManipulator::MotionCommand::Stage, getStage,
	          Properties::NON_VIRTUAL,
	          __Stage__getStage,
	          "",
	          "");
	I_SimpleProperty(const osg::Matrix &, LocalToWorld, 
	                 __C5_osg_Matrix_R1__getLocalToWorld, 
	                 0);
	I_SimpleProperty(osg::Matrix, MotionMatrix, 
	                 __osg_Matrix__getMotionMatrix, 
	                 0);
	I_SimpleProperty(osgManipulator::MotionCommand::Stage, Stage, 
	                 __Stage__getStage, 
	                 0);
	I_SimpleProperty(const osg::Matrix &, WorldToLocal, 
	                 __C5_osg_Matrix_R1__getWorldToLocal, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::Scale2DCommand)
	I_BaseType(osgManipulator::MotionCommand);
	I_BaseType(osgManipulator::MotionCommand);
	I_Constructor0(____Scale2DCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::VIRTUAL,
	          __bool__execute,
	          "",
	          "");
	I_Method0(bool, unexecute,
	          Properties::VIRTUAL,
	          __bool__unexecute,
	          "",
	          "");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "",
	          "");
	I_Method1(void, setScale, IN, const osg::Vec2 &, s,
	          Properties::NON_VIRTUAL,
	          __void__setScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScale,
	          "",
	          "");
	I_Method1(void, setScaleCenter, IN, const osg::Vec2 &, center,
	          Properties::NON_VIRTUAL,
	          __void__setScaleCenter__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScaleCenter,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScaleCenter,
	          "",
	          "");
	I_Method1(void, setReferencePoint, IN, const osg::Vec2 &, rp,
	          Properties::NON_VIRTUAL,
	          __void__setReferencePoint__C5_osg_Vec2_R1,
	          "ReferencePoint is used only for snapping. ",
	          "");
	I_Method0(const osg::Vec2 &, getReferencePoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getReferencePoint,
	          "",
	          "");
	I_Method1(void, setMinScale, IN, const osg::Vec2 &, min,
	          Properties::NON_VIRTUAL,
	          __void__setMinScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getMinScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getMinScale,
	          "",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "",
	          "");
	I_Constructor0(____Scale2DCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::VIRTUAL,
	          __bool__execute,
	          "",
	          "");
	I_Method0(bool, unexecute,
	          Properties::VIRTUAL,
	          __bool__unexecute,
	          "",
	          "");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "",
	          "");
	I_Method1(void, setScale, IN, const osg::Vec2 &, s,
	          Properties::NON_VIRTUAL,
	          __void__setScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScale,
	          "",
	          "");
	I_Method1(void, setScaleCenter, IN, const osg::Vec2 &, center,
	          Properties::NON_VIRTUAL,
	          __void__setScaleCenter__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScaleCenter,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScaleCenter,
	          "",
	          "");
	I_Method1(void, setReferencePoint, IN, const osg::Vec2 &, rp,
	          Properties::NON_VIRTUAL,
	          __void__setReferencePoint__C5_osg_Vec2_R1,
	          "ReferencePoint is used only for snapping. ",
	          "");
	I_Method0(const osg::Vec2 &, getReferencePoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getReferencePoint,
	          "",
	          "");
	I_Method1(void, setMinScale, IN, const osg::Vec2 &, min,
	          Properties::NON_VIRTUAL,
	          __void__setMinScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getMinScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getMinScale,
	          "",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "",
	          "");
	I_SimpleProperty(const osg::Vec2 &, MinScale, 
	                 __C5_osg_Vec2_R1__getMinScale, 
	                 __void__setMinScale__C5_osg_Vec2_R1);
	I_SimpleProperty(osg::Matrix, MotionMatrix, 
	                 __osg_Matrix__getMotionMatrix, 
	                 0);
	I_SimpleProperty(const osg::Vec2 &, ReferencePoint, 
	                 __C5_osg_Vec2_R1__getReferencePoint, 
	                 __void__setReferencePoint__C5_osg_Vec2_R1);
	I_SimpleProperty(const osg::Vec2 &, Scale, 
	                 __C5_osg_Vec2_R1__getScale, 
	                 __void__setScale__C5_osg_Vec2_R1);
	I_SimpleProperty(const osg::Vec2 &, ScaleCenter, 
	                 __C5_osg_Vec2_R1__getScaleCenter, 
	                 __void__setScaleCenter__C5_osg_Vec2_R1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::Scale2DCommand)
	I_BaseType(osgManipulator::MotionCommand);
	I_BaseType(osgManipulator::MotionCommand);
	I_Constructor0(____Scale2DCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::VIRTUAL,
	          __bool__execute,
	          "",
	          "");
	I_Method0(bool, unexecute,
	          Properties::VIRTUAL,
	          __bool__unexecute,
	          "",
	          "");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "",
	          "");
	I_Method1(void, setScale, IN, const osg::Vec2 &, s,
	          Properties::NON_VIRTUAL,
	          __void__setScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScale,
	          "",
	          "");
	I_Method1(void, setScaleCenter, IN, const osg::Vec2 &, center,
	          Properties::NON_VIRTUAL,
	          __void__setScaleCenter__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScaleCenter,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScaleCenter,
	          "",
	          "");
	I_Method1(void, setReferencePoint, IN, const osg::Vec2 &, rp,
	          Properties::NON_VIRTUAL,
	          __void__setReferencePoint__C5_osg_Vec2_R1,
	          "ReferencePoint is used only for snapping. ",
	          "");
	I_Method0(const osg::Vec2 &, getReferencePoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getReferencePoint,
	          "",
	          "");
	I_Method1(void, setMinScale, IN, const osg::Vec2 &, min,
	          Properties::NON_VIRTUAL,
	          __void__setMinScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getMinScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getMinScale,
	          "",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "",
	          "");
	I_Constructor0(____Scale2DCommand,
	               "",
	               "");
	I_Method0(bool, execute,
	          Properties::VIRTUAL,
	          __bool__execute,
	          "",
	          "");
	I_Method0(bool, unexecute,
	          Properties::VIRTUAL,
	          __bool__unexecute,
	          "",
	          "");
	I_Method1(void, applyConstraint, IN, const osgManipulator::Constraint *, x,
	          Properties::VIRTUAL,
	          __void__applyConstraint__C5_Constraint_P1,
	          "",
	          "");
	I_Method1(void, setScale, IN, const osg::Vec2 &, s,
	          Properties::NON_VIRTUAL,
	          __void__setScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScale,
	          "",
	          "");
	I_Method1(void, setScaleCenter, IN, const osg::Vec2 &, center,
	          Properties::NON_VIRTUAL,
	          __void__setScaleCenter__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getScaleCenter,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getScaleCenter,
	          "",
	          "");
	I_Method1(void, setReferencePoint, IN, const osg::Vec2 &, rp,
	          Properties::NON_VIRTUAL,
	          __void__setReferencePoint__C5_osg_Vec2_R1,
	          "ReferencePoint is used only for snapping. ",
	          "");
	I_Method0(const osg::Vec2 &, getReferencePoint,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getReferencePoint,
	          "",
	          "");
	I_Method1(void, setMinScale, IN, const osg::Vec2 &, min,
	          Properties::NON_VIRTUAL,
	          __void__setMinScale__C5_osg_Vec2_R1,
	          "",
	          "");
	I_Method0(const osg::Vec2 &, getMinScale,
	          Properties::NON_VIRTUAL,
	          __C5_osg_Vec2_R1__getMinScale,
	          "",
	          "");
	I_Method0(osg::Matrix, getMotionMatrix,
	          Properties::VIRTUAL,
	          __osg_Matrix__getMotionMatrix,
	          "",
	          "");
	I_SimpleProperty(const osg::Vec2 &, MinScale, 
	                 __C5_osg_Vec2_R1__getMinScale, 
	                 __void__setMinScale__C5_osg_Vec2_R1);
	I_SimpleProperty(osg::Matrix, MotionMatrix, 
	                 __osg_Matrix__getMotionMatrix, 
	                 0);
	I_SimpleProperty(const osg::Vec2 &, ReferencePoint, 
	                 __C5_osg_Vec2_R1__getReferencePoint, 
	                 __void__setReferencePoint__C5_osg_Vec2_R1);
	I_SimpleProperty(const osg::Vec2 &, Scale, 
	                 __C5_osg_Vec2_R1__getScale, 
	                 __void__setScale__C5_osg_Vec2_R1);
	I_SimpleProperty(const osg::Vec2 &, ScaleCenter, 
	                 __C5_osg_Vec2_R1__getScaleCenter, 
	                 __void__setScaleCenter__C5_osg_Vec2_R1);
END_REFLECTOR

