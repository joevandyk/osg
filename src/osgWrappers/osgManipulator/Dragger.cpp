// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osgGA/GUIActionAdapter>
#include <osgGA/GUIEventAdapter>
#include <osgManipulator/CommandManager>
#include <osgManipulator/Dragger>
#include <osgUtil/IntersectVisitor>
#include <osgUtil/SceneView>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osgManipulator::Dragger > >, osgManipulator::CompositeDragger::DraggerList);

BEGIN_OBJECT_REFLECTOR(osgManipulator::CompositeDragger)
	I_BaseType(osgManipulator::Dragger);
	I_Method0(const osgManipulator::CompositeDragger *, getComposite,
	          __C5_CompositeDragger_P1__getComposite,
	          "Returns 0 if this Dragger is not a CompositeDragger. ",
	          "");
	I_Method0(osgManipulator::CompositeDragger *, getComposite,
	          __CompositeDragger_P1__getComposite,
	          "Returns 0 if this Dragger is not a CompositeDragger. ",
	          "");
	I_Method1(void, setCommandManager, IN, osgManipulator::CommandManager *, cm,
	          __void__setCommandManager__CommandManager_P1,
	          "Set/Get the CommandManager. ",
	          "Draggers use CommandManager to dispatch commands. ");
	I_Method1(void, setParentDragger, IN, osgManipulator::Dragger *, parent,
	          __void__setParentDragger__Dragger_P1,
	          "Set/Get parent dragger. ",
	          "For simple draggers parent points to itself. For composite draggers parent points to the parent dragger that uses this dragger.");
	I_Method7(bool, handle, IN, int, pixel_x, IN, int, pixel_y, IN, const osgUtil::SceneView &, sv, IN, const osgUtil::IntersectVisitor::HitList &, hitList, IN, const osgUtil::IntersectVisitor::HitList::iterator &, hitIter, IN, const osgGA::GUIEventAdapter &, ea, IN, osgGA::GUIActionAdapter &, aa,
	          __bool__handle__int__int__C5_osgUtil_SceneView_R1__C5_osgUtil_IntersectVisitor_HitList_R1__C5_osgUtil_IntersectVisitor_HitList_iterator_R1__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "",
	          "");
	I_Method1(bool, addDragger, IN, osgManipulator::Dragger *, dragger,
	          __bool__addDragger__Dragger_P1,
	          "",
	          "");
	I_Method1(bool, removeDragger, IN, osgManipulator::Dragger *, dragger,
	          __bool__removeDragger__Dragger_P1,
	          "",
	          "");
	I_Method0(unsigned int, getNumDraggers,
	          __unsigned_int__getNumDraggers,
	          "",
	          "");
	I_Method1(osgManipulator::Dragger *, getDragger, IN, unsigned int, i,
	          __Dragger_P1__getDragger__unsigned_int,
	          "",
	          "");
	I_Method1(const osgManipulator::Dragger *, getDragger, IN, unsigned int, i,
	          __C5_Dragger_P1__getDragger__unsigned_int,
	          "",
	          "");
	I_Method1(bool, containsDragger, IN, const osgManipulator::Dragger *, dragger,
	          __bool__containsDragger__C5_Dragger_P1,
	          "",
	          "");
	I_Method1(osgManipulator::CompositeDragger::DraggerList::iterator, findDragger, IN, const osgManipulator::Dragger *, dragger,
	          __DraggerList_iterator__findDragger__C5_Dragger_P1,
	          "",
	          "");
	I_SimpleProperty(osgManipulator::CommandManager *, CommandManager, 
	                 0, 
	                 __void__setCommandManager__CommandManager_P1);
	I_SimpleProperty(osgManipulator::CompositeDragger *, Composite, 
	                 __CompositeDragger_P1__getComposite, 
	                 0);
	I_ArrayProperty(osgManipulator::Dragger *, Dragger, 
	                __Dragger_P1__getDragger__unsigned_int, 
	                0, 
	                __unsigned_int__getNumDraggers, 
	                __bool__addDragger__Dragger_P1, 
	                0, 
	                0);
	I_SimpleProperty(osgManipulator::Dragger *, ParentDragger, 
	                 0, 
	                 __void__setParentDragger__Dragger_P1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::Dragger)
	I_BaseType(osgManipulator::Selection);
	I_Method1(void, setCommandManager, IN, osgManipulator::CommandManager *, cm,
	          __void__setCommandManager__CommandManager_P1,
	          "Set/Get the CommandManager. ",
	          "Draggers use CommandManager to dispatch commands. ");
	I_Method0(osgManipulator::CommandManager *, getCommandManager,
	          __CommandManager_P1__getCommandManager,
	          "",
	          "");
	I_Method0(const osgManipulator::CommandManager *, getCommandManager,
	          __C5_CommandManager_P1__getCommandManager,
	          "",
	          "");
	I_Method1(void, setParentDragger, IN, osgManipulator::Dragger *, parent,
	          __void__setParentDragger__Dragger_P1,
	          "Set/Get parent dragger. ",
	          "For simple draggers parent points to itself. For composite draggers parent points to the parent dragger that uses this dragger.");
	I_Method0(osgManipulator::Dragger *, getParentDragger,
	          __Dragger_P1__getParentDragger,
	          "",
	          "");
	I_Method0(const osgManipulator::Dragger *, getParentDragger,
	          __C5_Dragger_P1__getParentDragger,
	          "",
	          "");
	I_Method0(const osgManipulator::CompositeDragger *, getComposite,
	          __C5_CompositeDragger_P1__getComposite,
	          "Returns 0 if this Dragger is not a CompositeDragger. ",
	          "");
	I_Method0(osgManipulator::CompositeDragger *, getComposite,
	          __CompositeDragger_P1__getComposite,
	          "Returns 0 if this Dragger is not a CompositeDragger. ",
	          "");
	I_Method7(bool, handle, IN, int, x, IN, int, x, IN, const osgUtil::SceneView &, x, IN, const osgUtil::IntersectVisitor::HitList &, x, IN, const osgUtil::IntersectVisitor::HitList::iterator &, x, IN, const osgGA::GUIEventAdapter &, x, IN, osgGA::GUIActionAdapter &, x,
	          __bool__handle__int__int__C5_osgUtil_SceneView_R1__C5_osgUtil_IntersectVisitor_HitList_R1__C5_osgUtil_IntersectVisitor_HitList_iterator_R1__C5_osgGA_GUIEventAdapter_R1__osgGA_GUIActionAdapter_R1,
	          "",
	          "");
	I_SimpleProperty(osgManipulator::CommandManager *, CommandManager, 
	                 __CommandManager_P1__getCommandManager, 
	                 __void__setCommandManager__CommandManager_P1);
	I_SimpleProperty(osgManipulator::CompositeDragger *, Composite, 
	                 __CompositeDragger_P1__getComposite, 
	                 0);
	I_SimpleProperty(osgManipulator::Dragger *, ParentDragger, 
	                 __Dragger_P1__getParentDragger, 
	                 __void__setParentDragger__Dragger_P1);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgManipulator::Dragger >)
	I_Constructor0(____ref_ptr,
	               "",
	               "");
	I_Constructor1(IN, osgManipulator::Dragger *, ptr,
	               ____ref_ptr__T_P1,
	               "",
	               "");
	I_Constructor1(IN, const osg::ref_ptr< osgManipulator::Dragger > &, rp,
	               ____ref_ptr__C5_ref_ptr_R1,
	               "",
	               "");
	I_Method0(osgManipulator::Dragger *, get,
	          __T_P1__get,
	          "",
	          "");
	I_Method0(bool, valid,
	          __bool__valid,
	          "",
	          "");
	I_Method0(osgManipulator::Dragger *, release,
	          __T_P1__release,
	          "",
	          "");
	I_Method1(void, swap, IN, osg::ref_ptr< osgManipulator::Dragger > &, rp,
	          __void__swap__ref_ptr_R1,
	          "",
	          "");
	I_SimpleProperty(osgManipulator::Dragger *, , 
	                 __T_P1__get, 
	                 0);
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osgManipulator::Dragger > >);

