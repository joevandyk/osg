// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Matrix>
#include <osg/Plane>
#include <osg/Quat>
#include <osg/Shape>
#include <osg/Vec2>
#include <osg/Vec3>
#include <osgManipulator/Projector>
#include <osgUtil/SceneView>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgManipulator::CylinderPlaneProjector)
	I_BaseType(osgManipulator::CylinderProjector);
	I_Constructor0(____CylinderPlaneProjector,
	               "",
	               "");
	I_Constructor1(IN, osg::Cylinder *, cylinder,
	               ____CylinderPlaneProjector__osg_Cylinder_P1,
	               "",
	               "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given plane. ",
	          "Returns true on successful projection.");
	I_Method0(bool, isProjectionOnCylinder,
	          __bool__isProjectionOnCylinder,
	          "Returns true if the previous projection was on the cylinder and false if the projection was on the plane. ",
	          "");
	I_Method4(osg::Quat, getRotation, IN, const osg::Vec3 &, p1, IN, bool, p1OnCyl, IN, const osg::Vec3 &, p2, IN, bool, p2OnCyl,
	          __osg_Quat__getRotation__C5_osg_Vec3_R1__bool__C5_osg_Vec3_R1__bool,
	          "",
	          "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::CylinderProjector)
	I_BaseType(osgManipulator::Projector);
	I_Constructor0(____CylinderProjector,
	               "",
	               "");
	I_Constructor1(IN, osg::Cylinder *, cylinder,
	               ____CylinderProjector__osg_Cylinder_P1,
	               "",
	               "");
	I_Method1(void, setCylinder, IN, osg::Cylinder *, cylinder,
	          __void__setCylinder__osg_Cylinder_P1,
	          "",
	          "");
	I_Method0(const osg::Cylinder *, getCylinder,
	          __C5_osg_Cylinder_P1__getCylinder,
	          "",
	          "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given plane. ",
	          "Returns true on successful projection.");
	I_Method3(bool, isPointInFront, IN, const osg::Vec3 &, point, IN, const osgUtil::SceneView &, sv, IN, const osg::Matrix &, localToWorld,
	          __bool__isPointInFront__C5_osg_Vec3_R1__C5_osgUtil_SceneView_R1__C5_osg_Matrix_R1,
	          "Returns true is the point is in front of the cylinder given the eye direction. ",
	          "");
	I_Method1(void, setFront, IN, bool, front,
	          __void__setFront__bool,
	          "",
	          "");
	I_SimpleProperty(osg::Cylinder *, Cylinder, 
	                 0, 
	                 __void__setCylinder__osg_Cylinder_P1);
	I_SimpleProperty(bool, Front, 
	                 0, 
	                 __void__setFront__bool);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::LineProjector)
	I_BaseType(osgManipulator::Projector);
	I_Constructor0(____LineProjector,
	               "",
	               "");
	I_Constructor2(IN, const osg::Vec3 &, s, IN, const osg::Vec3 &, e,
	               ____LineProjector__C5_osg_Vec3_R1__C5_osg_Vec3_R1,
	               "",
	               "");
	I_Method2(void, setLine, IN, const osg::Vec3 &, s, IN, const osg::Vec3 &, e,
	          __void__setLine__C5_osg_Vec3_R1__C5_osg_Vec3_R1,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLineStart,
	          __C5_osg_Vec3_R1__getLineStart,
	          "",
	          "");
	I_Method0(osg::Vec3 &, getLineStart,
	          __osg_Vec3_R1__getLineStart,
	          "",
	          "");
	I_Method0(const osg::Vec3 &, getLineEnd,
	          __C5_osg_Vec3_R1__getLineEnd,
	          "",
	          "");
	I_Method0(osg::Vec3 &, getLineEnd,
	          __osg_Vec3_R1__getLineEnd,
	          "",
	          "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given line. ",
	          "Returns true on successful projection.");
	I_SimpleProperty(osg::Vec3 &, LineEnd, 
	                 __osg_Vec3_R1__getLineEnd, 
	                 0);
	I_SimpleProperty(osg::Vec3 &, LineStart, 
	                 __osg_Vec3_R1__getLineStart, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::PlaneProjector)
	I_BaseType(osgManipulator::Projector);
	I_Constructor0(____PlaneProjector,
	               "",
	               "");
	I_Constructor1(IN, const osg::Plane &, plane,
	               ____PlaneProjector__C5_osg_Plane_R1,
	               "",
	               "");
	I_Method1(void, setPlane, IN, const osg::Plane &, plane,
	          __void__setPlane__C5_osg_Plane_R1,
	          "",
	          "");
	I_Method0(const osg::Plane &, getPlane,
	          __C5_osg_Plane_R1__getPlane,
	          "",
	          "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given plane. ",
	          "Returns true on successful projection.");
	I_SimpleProperty(const osg::Plane &, Plane, 
	                 __C5_osg_Plane_R1__getPlane, 
	                 __void__setPlane__C5_osg_Plane_R1);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgManipulator::Projector)
	I_BaseType(osg::Referenced);
	I_Constructor0(____Projector,
	               "",
	               "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object/world coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto some shape or geometry (implemented in derived classes). ",
	          "SceneView in used for i projecting window coordinates into object coordinates and vice versa. Returns true on successful projection.");
	I_Method1(void, setLocalToWorld, IN, const osg::Matrix &, localToWorld,
	          __void__setLocalToWorld__C5_osg_Matrix_R1,
	          "Sets the matrix for transforming the projector's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getLocalToWorld,
	          __C5_osg_Matrix_R1__getLocalToWorld,
	          "Gets the matrix for transforming the projector's local coordinate system to the world/object coordinate system. ",
	          "");
	I_Method0(const osg::Matrix &, getWorldToLocal,
	          __C5_osg_Matrix_R1__getWorldToLocal,
	          "Gets the matrix for transforming the world/object coordinate system to the command's local coordinate system. ",
	          "");
	I_SimpleProperty(const osg::Matrix &, LocalToWorld, 
	                 __C5_osg_Matrix_R1__getLocalToWorld, 
	                 __void__setLocalToWorld__C5_osg_Matrix_R1);
	I_SimpleProperty(const osg::Matrix &, WorldToLocal, 
	                 __C5_osg_Matrix_R1__getWorldToLocal, 
	                 0);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::SpherePlaneProjector)
	I_BaseType(osgManipulator::SphereProjector);
	I_Constructor0(____SpherePlaneProjector,
	               "",
	               "");
	I_Constructor1(IN, osg::Sphere *, sphere,
	               ____SpherePlaneProjector__osg_Sphere_P1,
	               "",
	               "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given sphere. ",
	          "Returns true on successful projection.");
	I_Method0(bool, isProjectionOnSphere,
	          __bool__isProjectionOnSphere,
	          "Returns true if the previous projection was on the sphere and false if the projection was on the plane. ",
	          "");
	I_MethodWithDefaults5(osg::Quat, getRotation, IN, const osg::Vec3 &, p1, , IN, bool, p1OnSphere, , IN, const osg::Vec3 &, p2, , IN, bool, p2OnSphere, , IN, float, radialFactor, 0.0f,
	                      __osg_Quat__getRotation__C5_osg_Vec3_R1__bool__C5_osg_Vec3_R1__bool__float,
	                      "",
	                      "");
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgManipulator::SphereProjector)
	I_BaseType(osgManipulator::Projector);
	I_Constructor0(____SphereProjector,
	               "",
	               "");
	I_Constructor1(IN, osg::Sphere *, sphere,
	               ____SphereProjector__osg_Sphere_P1,
	               "",
	               "");
	I_Method1(void, setSphere, IN, osg::Sphere *, sphere,
	          __void__setSphere__osg_Sphere_P1,
	          "",
	          "");
	I_Method0(const osg::Sphere *, getSphere,
	          __C5_osg_Sphere_P1__getSphere,
	          "",
	          "");
	I_Method3(bool, project, IN, const osg::Vec2 &, pointToProject, IN, const osgUtil::SceneView &, sv, IN, osg::Vec3 &, projectedPoint,
	          __bool__project__C5_osg_Vec2_R1__C5_osgUtil_SceneView_R1__osg_Vec3_R1,
	          "Calculates the object coordinates (projectedPoint) of a window coordinate (pointToProject) when projected onto the given sphere. ",
	          "Returns true on successful projection.");
	I_Method3(bool, isPointInFront, IN, const osg::Vec3 &, point, IN, const osgUtil::SceneView &, sv, IN, const osg::Matrix &, localToWorld,
	          __bool__isPointInFront__C5_osg_Vec3_R1__C5_osgUtil_SceneView_R1__C5_osg_Matrix_R1,
	          "Returns true is the point is in front of the cylinder given the eye direction. ",
	          "");
	I_Method1(void, setFront, IN, bool, front,
	          __void__setFront__bool,
	          "",
	          "");
	I_SimpleProperty(bool, Front, 
	                 0, 
	                 __void__setFront__bool);
	I_SimpleProperty(osg::Sphere *, Sphere, 
	                 0, 
	                 __void__setSphere__osg_Sphere_P1);
END_REFLECTOR

