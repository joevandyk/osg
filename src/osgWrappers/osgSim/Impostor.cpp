// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/BoundingSphere.svn-base>
#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/NodeVisitor.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osg/.svn/text-base/Vec3.svn-base>
#include <osgSim/.svn/text-base/Impostor.svn-base>
#include <osgSim/Impostor>
#include <osgSim/ImpostorSprite>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osgSim::ImpostorSprite > >, osgSim::Impostor::ImpostorSpriteList);

BEGIN_OBJECT_REFLECTOR(osgSim::Impostor)
	I_BaseType(osg::LOD);
	I_BaseType(osg::LOD);
	I_Constructor0(____Impostor,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgSim::Impostor &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Impostor__C5_Impostor_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__traverse__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setImpostorThreshold, IN, float, distance,
	          Properties::NON_VIRTUAL,
	          __void__setImpostorThreshold__float,
	          "Set the Impostor threshold distance. ",
	          "For eye points further than this threshold the Imposter is used if appropriate, otherwise the LOD children as chosen as per a standard LOD node.");
	I_Method0(float, getImpostorThreshold,
	          Properties::NON_VIRTUAL,
	          __float__getImpostorThreshold,
	          "",
	          "");
	I_MethodWithDefaults1(void, setImpostorThresholdToBound, IN, float, ratio, 1.0f,
	                      Properties::NON_VIRTUAL,
	                      __void__setImpostorThresholdToBound__float,
	                      "Set the Impostor threshold distance relative to the node's bounding sphere's radius. ",
	                      "");
	I_Method2(osgSim::ImpostorSprite *, findBestImpostorSprite, IN, unsigned int, contextID, IN, const osg::Vec3 &, currLocalEyePoint,
	          Properties::NON_VIRTUAL,
	          __ImpostorSprite_P1__findBestImpostorSprite__unsigned_int__C5_osg_Vec3_R1,
	          "Find the ImposterSprite which fits the current eye point best. ",
	          "");
	I_Method2(void, addImpostorSprite, IN, unsigned int, contextID, IN, osgSim::ImpostorSprite *, is,
	          Properties::NON_VIRTUAL,
	          __void__addImpostorSprite__unsigned_int__ImpostorSprite_P1,
	          "Add an ImpostorSprite to the Impostor. ",
	          "");
	I_Method1(osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get the list of ImpostorSprites attached to this Impostor. ",
	          "");
	I_Method1(const osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __C5_ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get a const list of ImpostorSprites attached to this const Impostor. ",
	          "");
	I_Method0(osg::BoundingSphere, computeBound,
	          Properties::VIRTUAL,
	          __osg_BoundingSphere__computeBound,
	          "",
	          "");
	I_Constructor0(____Impostor,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgSim::Impostor &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Impostor__C5_Impostor_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__traverse__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setImpostorThreshold, IN, float, distance,
	          Properties::NON_VIRTUAL,
	          __void__setImpostorThreshold__float,
	          "Set the Impostor threshold distance. ",
	          "For eye points further than this threshold the Imposter is used if appropriate, otherwise the LOD children as chosen as per a standard LOD node.");
	I_Method0(float, getImpostorThreshold,
	          Properties::NON_VIRTUAL,
	          __float__getImpostorThreshold,
	          "",
	          "");
	I_MethodWithDefaults1(void, setImpostorThresholdToBound, IN, float, ratio, 1.0f,
	                      Properties::NON_VIRTUAL,
	                      __void__setImpostorThresholdToBound__float,
	                      "Set the Impostor threshold distance relative to the node's bounding sphere's radius. ",
	                      "");
	I_Method2(osgSim::ImpostorSprite *, findBestImpostorSprite, IN, unsigned int, contextID, IN, const osg::Vec3 &, currLocalEyePoint,
	          Properties::NON_VIRTUAL,
	          __ImpostorSprite_P1__findBestImpostorSprite__unsigned_int__C5_osg_Vec3_R1,
	          "Find the ImposterSprite which fits the current eye point best. ",
	          "");
	I_Method2(void, addImpostorSprite, IN, unsigned int, contextID, IN, osgSim::ImpostorSprite *, is,
	          Properties::NON_VIRTUAL,
	          __void__addImpostorSprite__unsigned_int__ImpostorSprite_P1,
	          "Add an ImpostorSprite to the Impostor. ",
	          "");
	I_Method1(osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get the list of ImpostorSprites attached to this Impostor. ",
	          "");
	I_Method1(const osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __C5_ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get a const list of ImpostorSprites attached to this const Impostor. ",
	          "");
	I_Method0(osg::BoundingSphere, computeBound,
	          Properties::VIRTUAL,
	          __osg_BoundingSphere__computeBound,
	          "",
	          "");
	I_SimpleProperty(float, ImpostorThreshold, 
	                 __float__getImpostorThreshold, 
	                 __void__setImpostorThreshold__float);
	I_SimpleProperty(float, ImpostorThresholdToBound, 
	                 0, 
	                 __void__setImpostorThresholdToBound__float);
END_REFLECTOR

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osgSim::ImpostorSprite > >, osgSim::Impostor::ImpostorSpriteList);

BEGIN_OBJECT_REFLECTOR(osgSim::Impostor)
	I_BaseType(osg::LOD);
	I_BaseType(osg::LOD);
	I_Constructor0(____Impostor,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgSim::Impostor &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Impostor__C5_Impostor_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__traverse__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setImpostorThreshold, IN, float, distance,
	          Properties::NON_VIRTUAL,
	          __void__setImpostorThreshold__float,
	          "Set the Impostor threshold distance. ",
	          "For eye points further than this threshold the Imposter is used if appropriate, otherwise the LOD children as chosen as per a standard LOD node.");
	I_Method0(float, getImpostorThreshold,
	          Properties::NON_VIRTUAL,
	          __float__getImpostorThreshold,
	          "",
	          "");
	I_MethodWithDefaults1(void, setImpostorThresholdToBound, IN, float, ratio, 1.0f,
	                      Properties::NON_VIRTUAL,
	                      __void__setImpostorThresholdToBound__float,
	                      "Set the Impostor threshold distance relative to the node's bounding sphere's radius. ",
	                      "");
	I_Method2(osgSim::ImpostorSprite *, findBestImpostorSprite, IN, unsigned int, contextID, IN, const osg::Vec3 &, currLocalEyePoint,
	          Properties::NON_VIRTUAL,
	          __ImpostorSprite_P1__findBestImpostorSprite__unsigned_int__C5_osg_Vec3_R1,
	          "Find the ImposterSprite which fits the current eye point best. ",
	          "");
	I_Method2(void, addImpostorSprite, IN, unsigned int, contextID, IN, osgSim::ImpostorSprite *, is,
	          Properties::NON_VIRTUAL,
	          __void__addImpostorSprite__unsigned_int__ImpostorSprite_P1,
	          "Add an ImpostorSprite to the Impostor. ",
	          "");
	I_Method1(osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get the list of ImpostorSprites attached to this Impostor. ",
	          "");
	I_Method1(const osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __C5_ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get a const list of ImpostorSprites attached to this const Impostor. ",
	          "");
	I_Method0(osg::BoundingSphere, computeBound,
	          Properties::VIRTUAL,
	          __osg_BoundingSphere__computeBound,
	          "",
	          "");
	I_Constructor0(____Impostor,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgSim::Impostor &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____Impostor__C5_Impostor_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__accept__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv,
	          Properties::VIRTUAL,
	          __void__traverse__osg_NodeVisitor_R1,
	          "",
	          "");
	I_Method1(void, setImpostorThreshold, IN, float, distance,
	          Properties::NON_VIRTUAL,
	          __void__setImpostorThreshold__float,
	          "Set the Impostor threshold distance. ",
	          "For eye points further than this threshold the Imposter is used if appropriate, otherwise the LOD children as chosen as per a standard LOD node.");
	I_Method0(float, getImpostorThreshold,
	          Properties::NON_VIRTUAL,
	          __float__getImpostorThreshold,
	          "",
	          "");
	I_MethodWithDefaults1(void, setImpostorThresholdToBound, IN, float, ratio, 1.0f,
	                      Properties::NON_VIRTUAL,
	                      __void__setImpostorThresholdToBound__float,
	                      "Set the Impostor threshold distance relative to the node's bounding sphere's radius. ",
	                      "");
	I_Method2(osgSim::ImpostorSprite *, findBestImpostorSprite, IN, unsigned int, contextID, IN, const osg::Vec3 &, currLocalEyePoint,
	          Properties::NON_VIRTUAL,
	          __ImpostorSprite_P1__findBestImpostorSprite__unsigned_int__C5_osg_Vec3_R1,
	          "Find the ImposterSprite which fits the current eye point best. ",
	          "");
	I_Method2(void, addImpostorSprite, IN, unsigned int, contextID, IN, osgSim::ImpostorSprite *, is,
	          Properties::NON_VIRTUAL,
	          __void__addImpostorSprite__unsigned_int__ImpostorSprite_P1,
	          "Add an ImpostorSprite to the Impostor. ",
	          "");
	I_Method1(osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get the list of ImpostorSprites attached to this Impostor. ",
	          "");
	I_Method1(const osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID,
	          Properties::NON_VIRTUAL,
	          __C5_ImpostorSpriteList_R1__getImpostorSpriteList__unsigned_int,
	          "Get a const list of ImpostorSprites attached to this const Impostor. ",
	          "");
	I_Method0(osg::BoundingSphere, computeBound,
	          Properties::VIRTUAL,
	          __osg_BoundingSphere__computeBound,
	          "",
	          "");
	I_SimpleProperty(float, ImpostorThreshold, 
	                 __float__getImpostorThreshold, 
	                 __void__setImpostorThreshold__float);
	I_SimpleProperty(float, ImpostorThresholdToBound, 
	                 0, 
	                 __void__setImpostorThresholdToBound__float);
END_REFLECTOR

