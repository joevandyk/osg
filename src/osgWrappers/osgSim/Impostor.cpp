// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BoundingSphere>
#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec3>
#include <osgSim/Impostor>
#include <osgSim/ImpostorSprite>

TYPE_NAME_ALIAS(std::vector< osg::ref_ptr< osgSim::ImpostorSprite > >, osgSim::Impostor::ImpostorSpriteList);

BEGIN_OBJECT_REFLECTOR(osgSim::Impostor)
	BaseType(osg::LOD);
	Constructor0();
	ConstructorWithDefaults2(IN, const osgSim::Impostor &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, className);
	Method0(const char *, libraryName);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method1(void, traverse, IN, osg::NodeVisitor &, nv);
	Method1(void, setImpostorThreshold, IN, float, distance);
	Method0(float, getImpostorThreshold);
	MethodWithDefaults1(void, setImpostorThresholdToBound, IN, float, ratio, 1.0f);
	Method2(osgSim::ImpostorSprite *, findBestImpostorSprite, IN, unsigned int, contextID, IN, const osg::Vec3 &, currLocalEyePoint);
	Method2(void, addImpostorSprite, IN, unsigned int, contextID, IN, osgSim::ImpostorSprite *, is);
	Method1(osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID);
	Method1(const osgSim::Impostor::ImpostorSpriteList &, getImpostorSpriteList, IN, unsigned int, contexID);
	Method0(osg::BoundingSphere, computeBound);
	Property(float, ImpostorThreshold);
	WriteOnlyProperty(float, ImpostorThresholdToBound);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osg::ref_ptr< osgSim::ImpostorSprite >)
	Constructor0();
	Constructor1(IN, osgSim::ImpostorSprite *, t);
	Constructor1(IN, const osg::ref_ptr< osgSim::ImpostorSprite > &, rp);
	Method0(bool, valid);
	Method0(osgSim::ImpostorSprite *, get);
	Method0(const osgSim::ImpostorSprite *, get);
	Method0(osgSim::ImpostorSprite *, take);
	Method0(osgSim::ImpostorSprite *, release);
	ReadOnlyProperty(osgSim::ImpostorSprite *, );
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osg::ref_ptr< osgSim::ImpostorSprite > >);

