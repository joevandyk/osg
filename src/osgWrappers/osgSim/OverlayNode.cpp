// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/test/CameraNode>
#include <osg/test/CopyOp>
#include <osg/test/Vec4>
#include <osgSim/OverlayNode>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgSim::OverlayNode)
	I_BaseType(osg::Group);
	I_Constructor0();
	I_ConstructorWithDefaults2(IN, const osgSim::OverlayNode &, es, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	I_Method0(osg::Object *, cloneType);
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	I_Method0(const char *, className);
	I_Method0(const char *, libraryName);
	I_Method1(void, accept, IN, osg::NodeVisitor &, nv);
	I_Method1(void, traverse, IN, osg::NodeVisitor &, nv);
	I_Method1(void, setOverlaySubgraph, IN, osg::Node *, node);
	I_Method0(osg::Node *, getOverlaySubgraph);
	I_Method0(const osg::Node *, getOverlaySubgraph);
	I_Method0(void, dirtyOverlayTexture);
	I_Method1(void, setContinuousUpdate, IN, bool, update);
	I_Method0(bool, getContinuousUpdate);
	I_Method1(void, setOverlayClearColor, IN, const osg::Vec4 &, color);
	I_Method0(const osg::Vec4 &, getOverlayClearColor);
	I_Method1(void, setTexEnvMode, IN, GLenum, mode);
	I_Method0(GLenum, getTexEnvMode);
	I_Method1(void, setOverlayTextureUnit, IN, unsigned int, unit);
	I_Method0(unsigned int, getOverlayTextureUnit);
	I_Method1(void, setOverlayTextureSizeHint, IN, unsigned int, size);
	I_Method0(unsigned int, getOverlayTextureSizeHint);
	I_Method0(osg::CameraNode *, getCamera);
	I_Method0(const osg::CameraNode *, getCamera);
	I_ReadOnlyProperty(osg::CameraNode *, Camera);
	I_Property(bool, ContinuousUpdate);
	I_Property(const osg::Vec4 &, OverlayClearColor);
	I_Property(osg::Node *, OverlaySubgraph);
	I_Property(unsigned int, OverlayTextureSizeHint);
	I_Property(unsigned int, OverlayTextureUnit);
	I_Property(GLenum, TexEnvMode);
END_REFLECTOR

