// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec3>
#include <osg/Vec4>
#include <osgSim/SphereSegment>

BEGIN_ENUM_REFLECTOR(osgSim::SphereSegment::DrawMask)
	EnumLabel(osgSim::SphereSegment::SURFACE);
	EnumLabel(osgSim::SphereSegment::SPOKES);
	EnumLabel(osgSim::SphereSegment::EDGELINE);
	EnumLabel(osgSim::SphereSegment::SIDES);
	EnumLabel(osgSim::SphereSegment::ALL);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgSim::SphereSegment)
	BaseType(osg::Geode);
	Constructor0();
	Constructor7(IN, const osg::Vec3 &, centre, IN, float, radius, IN, float, azMin, IN, float, azMax, IN, float, elevMin, IN, float, elevMax, IN, int, density);
	Constructor6(IN, const osg::Vec3 &, centre, IN, float, radius, IN, const osg::Vec3 &, vec, IN, float, azRange, IN, float, elevRange, IN, int, density);
	Constructor2(IN, const osgSim::SphereSegment &, rhs, IN, const osg::CopyOp &, co);
	Method1(void, setCentre, IN, const osg::Vec3 &, c);
	Method0(const osg::Vec3 &, getCentre);
	Method1(void, setRadius, IN, float, r);
	Method0(float, getRadius);
	Method3(void, setArea, IN, const osg::Vec3 &, v, IN, float, azRange, IN, float, elevRange);
	Method3(void, getArea, IN, osg::Vec3 &, v, IN, float &, azRange, IN, float &, elevRange);
	Method4(void, setArea, IN, float, azMin, IN, float, azMax, IN, float, elevMin, IN, float, elevMax);
	Method4(void, getArea, IN, float &, azMin, IN, float &, azMax, IN, float &, elevMin, IN, float &, elevMax);
	Method1(void, setDensity, IN, int, d);
	Method0(int, getDensity);
	Method1(void, setDrawMask, IN, osgSim::SphereSegment::DrawMask, dm);
	Method0(osgSim::SphereSegment::DrawMask, getDrawMask);
	Method1(void, setSurfaceColor, IN, const osg::Vec4 &, c);
	Method0(osg::Vec4, getSurfaceColor);
	Method1(void, setSpokeColor, IN, const osg::Vec4 &, c);
	Method0(osg::Vec4, getSpokeColor);
	Method1(void, setEdgeLineColor, IN, const osg::Vec4 &, c);
	Method0(osg::Vec4, getEdgeLineColor);
	Method1(void, setSideColor, IN, const osg::Vec4 &, c);
	Method0(osg::Vec4, getSideColor);
	Method1(void, setAllColors, IN, const osg::Vec4 &, c);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, className);
	Method0(const char *, libraryName);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	WriteOnlyProperty(const osg::Vec4 &, AllColors);
	Property(const osg::Vec3 &, Centre);
	Property(int, Density);
	Property(osgSim::SphereSegment::DrawMask, DrawMask);
	ReadOnlyProperty(osg::Vec4, EdgeLineColor);
	Property(float, Radius);
	ReadOnlyProperty(osg::Vec4, SideColor);
	ReadOnlyProperty(osg::Vec4, SpokeColor);
	ReadOnlyProperty(osg::Vec4, SurfaceColor);
END_REFLECTOR

