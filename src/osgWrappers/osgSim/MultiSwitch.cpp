// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Node>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osgSim/MultiSwitch>

TYPE_NAME_ALIAS(std::vector< bool >, osgSim::MultiSwitch::ValueList);

TYPE_NAME_ALIAS(std::vector< osgSim::MultiSwitch::ValueList >, osgSim::MultiSwitch::SwitchSetList);

BEGIN_OBJECT_REFLECTOR(osgSim::MultiSwitch)
	BaseType(osg::Group);
	Constructor0();
	ConstructorWithDefaults2(IN, const osgSim::MultiSwitch &, x, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, className);
	Method0(const char *, libraryName);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method1(void, traverse, IN, osg::NodeVisitor &, nv);
	Method1(void, setNewChildDefaultValue, IN, bool, value);
	Method0(bool, getNewChildDefaultValue);
	Method1(bool, addChild, IN, osg::Node *, child);
	Method2(bool, insertChild, IN, unsigned int, index, IN, osg::Node *, child);
	Method1(bool, removeChild, IN, osg::Node *, child);
	Method3(void, setValue, IN, unsigned int, switchSet, IN, unsigned int, pos, IN, bool, value);
	Method2(bool, getValue, IN, unsigned int, switchSet, IN, unsigned int, pos);
	Method3(void, setChildValue, IN, const osg::Node *, child, IN, unsigned int, switchSet, IN, bool, value);
	Method2(bool, getChildValue, IN, const osg::Node *, child, IN, unsigned int, switchSet);
	Method1(bool, setAllChildrenOff, IN, unsigned int, switchSet);
	Method1(bool, setAllChildrenOn, IN, unsigned int, switchSet);
	Method2(bool, setSingleChildOn, IN, unsigned int, switchSet, IN, unsigned int, pos);
	Method1(void, setActiveSwitchSet, IN, unsigned int, switchSet);
	Method0(unsigned int, getActiveSwitchSet);
	Method1(void, setSwitchSetList, IN, const osgSim::MultiSwitch::SwitchSetList &, switchSetList);
	Method0(const osgSim::MultiSwitch::SwitchSetList &, getSwitchSetList);
	Method2(void, setValueList, IN, unsigned int, switchSet, IN, const osgSim::MultiSwitch::ValueList &, values);
	Method1(const osgSim::MultiSwitch::ValueList &, getValueList, IN, unsigned int, switchSet);
	Property(unsigned int, ActiveSwitchSet);
	WriteOnlyPropertyWithReturnType(unsigned int, AllChildrenOff, bool);
	WriteOnlyPropertyWithReturnType(unsigned int, AllChildrenOn, bool);
	IndexedProperty2(bool, ChildValue, const osg::Node *, child, unsigned int, switchSet);
	Property(bool, NewChildDefaultValue);
	Property(const osgSim::MultiSwitch::SwitchSetList &, SwitchSetList);
	IndexedProperty2(bool, Value, unsigned int, switchSet, unsigned int, pos);
	IndexedProperty1(const osgSim::MultiSwitch::ValueList &, ValueList, unsigned int, switchSet);
END_REFLECTOR

STD_VECTOR_REFLECTOR(std::vector< osgSim::MultiSwitch::ValueList >);

