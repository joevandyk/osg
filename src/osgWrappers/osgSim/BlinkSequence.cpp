// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osg/Vec4>
#include <osgSim/BlinkSequence>

BEGIN_VALUE_REFLECTOR(osgSim::BlinkSequence)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osgSim::BlinkSequence &, bs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method2(void, addPulse, IN, double, length, IN, const osg::Vec4 &, color);
	Method0(int, getNumPulses);
	Method3(void, getPulse, IN, unsigned int, i, IN, double &, length, IN, osg::Vec4 &, color);
	Method0(double, getPulsePeriod);
	Method1(void, setSequenceGroup, IN, osgSim::SequenceGroup *, sg);
	Method0(osgSim::SequenceGroup *, getSequenceGroup);
	Method0(const osgSim::SequenceGroup *, getSequenceGroup);
	Method1(void, setPhaseShift, IN, double, ps);
	Method0(double, getPhaseShift);
	Method1(double, localTime, IN, double, time);
	Method2(osg::Vec4, color, IN, double, time, IN, double, length);
	Property(double, PhaseShift);
	ReadOnlyProperty(double, PulsePeriod);
	Property(osgSim::SequenceGroup *, SequenceGroup);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(osgSim::SequenceGroup)
	BaseType(osg::Object);
	Constructor0();
	ConstructorWithDefaults2(IN, const osgSim::SequenceGroup &, bs, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Constructor1(IN, double, baseTime);
	Method0(osg::Object *, cloneType);
	Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method0(const char *, libraryName);
	Method0(const char *, className);
END_REFLECTOR

