// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/.svn/text-base/CopyOp.svn-base>
#include <osg/.svn/text-base/Object.svn-base>
#include <osgParticle/ConstantRateCounter>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(osgParticle::ConstantRateCounter)
	I_BaseType(osgParticle::Counter);
	I_BaseType(osgParticle::Counter);
	I_Constructor0(____ConstantRateCounter,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgParticle::ConstantRateCounter &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ConstantRateCounter__C5_ConstantRateCounter_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, setMinimumNumberOfParticlesToCreate, IN, int, minNumToCreate,
	          Properties::NON_VIRTUAL,
	          __void__setMinimumNumberOfParticlesToCreate__int,
	          "",
	          "");
	I_Method0(int, getMinimumNumberOfParticlesToCreate,
	          Properties::NON_VIRTUAL,
	          __int__getMinimumNumberOfParticlesToCreate,
	          "",
	          "");
	I_Method1(void, setNumberOfParticlesPerSecondToCreate, IN, double, numPerSecond,
	          Properties::NON_VIRTUAL,
	          __void__setNumberOfParticlesPerSecondToCreate__double,
	          "",
	          "");
	I_Method0(double, getNumberOfParticlesPerSecondToCreate,
	          Properties::NON_VIRTUAL,
	          __double__getNumberOfParticlesPerSecondToCreate,
	          "",
	          "");
	I_Method1(int, numParticlesToCreate, IN, double, dt,
	          Properties::VIRTUAL,
	          __int__numParticlesToCreate__double,
	          "Return the number of particles to be created in this frame. ",
	          "");
	I_Constructor0(____ConstantRateCounter,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgParticle::ConstantRateCounter &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ConstantRateCounter__C5_ConstantRateCounter_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, setMinimumNumberOfParticlesToCreate, IN, int, minNumToCreate,
	          Properties::NON_VIRTUAL,
	          __void__setMinimumNumberOfParticlesToCreate__int,
	          "",
	          "");
	I_Method0(int, getMinimumNumberOfParticlesToCreate,
	          Properties::NON_VIRTUAL,
	          __int__getMinimumNumberOfParticlesToCreate,
	          "",
	          "");
	I_Method1(void, setNumberOfParticlesPerSecondToCreate, IN, double, numPerSecond,
	          Properties::NON_VIRTUAL,
	          __void__setNumberOfParticlesPerSecondToCreate__double,
	          "",
	          "");
	I_Method0(double, getNumberOfParticlesPerSecondToCreate,
	          Properties::NON_VIRTUAL,
	          __double__getNumberOfParticlesPerSecondToCreate,
	          "",
	          "");
	I_Method1(int, numParticlesToCreate, IN, double, dt,
	          Properties::VIRTUAL,
	          __int__numParticlesToCreate__double,
	          "Return the number of particles to be created in this frame. ",
	          "");
	I_SimpleProperty(int, MinimumNumberOfParticlesToCreate, 
	                 __int__getMinimumNumberOfParticlesToCreate, 
	                 __void__setMinimumNumberOfParticlesToCreate__int);
	I_SimpleProperty(double, NumberOfParticlesPerSecondToCreate, 
	                 __double__getNumberOfParticlesPerSecondToCreate, 
	                 __void__setNumberOfParticlesPerSecondToCreate__double);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgParticle::ConstantRateCounter)
	I_BaseType(osgParticle::Counter);
	I_BaseType(osgParticle::Counter);
	I_Constructor0(____ConstantRateCounter,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgParticle::ConstantRateCounter &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ConstantRateCounter__C5_ConstantRateCounter_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, setMinimumNumberOfParticlesToCreate, IN, int, minNumToCreate,
	          Properties::NON_VIRTUAL,
	          __void__setMinimumNumberOfParticlesToCreate__int,
	          "",
	          "");
	I_Method0(int, getMinimumNumberOfParticlesToCreate,
	          Properties::NON_VIRTUAL,
	          __int__getMinimumNumberOfParticlesToCreate,
	          "",
	          "");
	I_Method1(void, setNumberOfParticlesPerSecondToCreate, IN, double, numPerSecond,
	          Properties::NON_VIRTUAL,
	          __void__setNumberOfParticlesPerSecondToCreate__double,
	          "",
	          "");
	I_Method0(double, getNumberOfParticlesPerSecondToCreate,
	          Properties::NON_VIRTUAL,
	          __double__getNumberOfParticlesPerSecondToCreate,
	          "",
	          "");
	I_Method1(int, numParticlesToCreate, IN, double, dt,
	          Properties::VIRTUAL,
	          __int__numParticlesToCreate__double,
	          "Return the number of particles to be created in this frame. ",
	          "");
	I_Constructor0(____ConstantRateCounter,
	               "",
	               "");
	I_ConstructorWithDefaults2(IN, const osgParticle::ConstantRateCounter &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY,
	                           ____ConstantRateCounter__C5_ConstantRateCounter_R1__C5_osg_CopyOp_R1,
	                           "",
	                           "");
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "",
	          "");
	I_Method1(void, setMinimumNumberOfParticlesToCreate, IN, int, minNumToCreate,
	          Properties::NON_VIRTUAL,
	          __void__setMinimumNumberOfParticlesToCreate__int,
	          "",
	          "");
	I_Method0(int, getMinimumNumberOfParticlesToCreate,
	          Properties::NON_VIRTUAL,
	          __int__getMinimumNumberOfParticlesToCreate,
	          "",
	          "");
	I_Method1(void, setNumberOfParticlesPerSecondToCreate, IN, double, numPerSecond,
	          Properties::NON_VIRTUAL,
	          __void__setNumberOfParticlesPerSecondToCreate__double,
	          "",
	          "");
	I_Method0(double, getNumberOfParticlesPerSecondToCreate,
	          Properties::NON_VIRTUAL,
	          __double__getNumberOfParticlesPerSecondToCreate,
	          "",
	          "");
	I_Method1(int, numParticlesToCreate, IN, double, dt,
	          Properties::VIRTUAL,
	          __int__numParticlesToCreate__double,
	          "Return the number of particles to be created in this frame. ",
	          "");
	I_SimpleProperty(int, MinimumNumberOfParticlesToCreate, 
	                 __int__getMinimumNumberOfParticlesToCreate, 
	                 __void__setMinimumNumberOfParticlesToCreate__int);
	I_SimpleProperty(double, NumberOfParticlesPerSecondToCreate, 
	                 __double__getNumberOfParticlesPerSecondToCreate, 
	                 __void__setNumberOfParticlesPerSecondToCreate__double);
END_REFLECTOR

