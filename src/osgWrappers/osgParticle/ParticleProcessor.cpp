// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/BoundingSphere>
#include <osg/CopyOp>
#include <osg/Matrix>
#include <osg/NodeVisitor>
#include <osg/Object>
#include <osg/Vec3>
#include <osgParticle/ParticleProcessor>
#include <osgParticle/ParticleSystem>

BEGIN_ENUM_REFLECTOR(osgParticle::ParticleProcessor::ReferenceFrame)
	EnumLabel(osgParticle::ParticleProcessor::RELATIVE_RF);
	EnumLabel(osgParticle::ParticleProcessor::ABSOLUTE_RF);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(osgParticle::ParticleProcessor)
	BaseType(osg::Node);
	Constructor0();
	ConstructorWithDefaults2(IN, const osgParticle::ParticleProcessor &, copy, , IN, const osg::CopyOp &, copyop, osg::CopyOp::SHALLOW_COPY);
	Method0(const char *, libraryName);
	Method0(const char *, className);
	Method1(bool, isSameKindAs, IN, const osg::Object *, obj);
	Method1(void, accept, IN, osg::NodeVisitor &, nv);
	Method0(osgParticle::ParticleProcessor::ReferenceFrame, getReferenceFrame);
	Method1(void, setReferenceFrame, IN, osgParticle::ParticleProcessor::ReferenceFrame, rf);
	Method0(bool, isEnabled);
	Method1(void, setEnabled, IN, bool, v);
	Method0(osgParticle::ParticleSystem *, getParticleSystem);
	Method0(const osgParticle::ParticleSystem *, getParticleSystem);
	Method1(void, setParticleSystem, IN, osgParticle::ParticleSystem *, ps);
	Method1(void, setEndless, IN, bool, type);
	Method0(bool, isEndless);
	Method1(void, setLifeTime, IN, double, t);
	Method0(double, getLifeTime);
	Method1(void, setStartTime, IN, double, t);
	Method0(double, getStartTime);
	Method1(void, setCurrentTime, IN, double, t);
	Method0(double, getCurrentTime);
	Method1(void, setResetTime, IN, double, t);
	Method0(double, getResetTime);
	Method0(bool, isAlive);
	Method1(void, traverse, IN, osg::NodeVisitor &, nv);
	Method0(const osg::Matrix &, getLocalToWorldMatrix);
	Method0(const osg::Matrix &, getWorldToLocalMatrix);
	Method1(osg::Vec3, transformLocalToWorld, IN, const osg::Vec3 &, P);
	Method1(osg::Vec3, rotateLocalToWorld, IN, const osg::Vec3 &, P);
	Method1(osg::Vec3, transformWorldToLocal, IN, const osg::Vec3 &, P);
	Method1(osg::Vec3, rotateWorldToLocal, IN, const osg::Vec3 &, P);
	Method0(osg::BoundingSphere, computeBound);
	Property(double, CurrentTime);
	WriteOnlyProperty(bool, Enabled);
	WriteOnlyProperty(bool, Endless);
	Property(double, LifeTime);
	ReadOnlyProperty(const osg::Matrix &, LocalToWorldMatrix);
	Property(osgParticle::ParticleSystem *, ParticleSystem);
	Property(osgParticle::ParticleProcessor::ReferenceFrame, ReferenceFrame);
	Property(double, ResetTime);
	Property(double, StartTime);
	ReadOnlyProperty(const osg::Matrix &, WorldToLocalMatrix);
END_REFLECTOR

