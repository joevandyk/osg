// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <osg/CopyOp>
#include <osg/Object>
#include <osgWidget/Frame>
#include <osgWidget/Types>
#include <osgWidget/Window>
#include <osgWidget/WindowManager>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(osgWidget::Frame::CORNER)
	I_DeclaringFile("osgWidget/Frame");
	I_EnumLabel(osgWidget::Frame::CORNER_LOWER_LEFT);
	I_EnumLabel(osgWidget::Frame::CORNER_LOWER_RIGHT);
	I_EnumLabel(osgWidget::Frame::CORNER_UPPER_LEFT);
	I_EnumLabel(osgWidget::Frame::CORNER_UPPER_RIGHT);
END_REFLECTOR

BEGIN_ENUM_REFLECTOR(osgWidget::Frame::BORDER)
	I_DeclaringFile("osgWidget/Frame");
	I_EnumLabel(osgWidget::Frame::BORDER_LEFT);
	I_EnumLabel(osgWidget::Frame::BORDER_RIGHT);
	I_EnumLabel(osgWidget::Frame::BORDER_TOP);
	I_EnumLabel(osgWidget::Frame::BORDER_BOTTOM);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgWidget::Frame)
	I_DeclaringFile("osgWidget/Frame");
	I_BaseType(osgWidget::Table);
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "clone an object of the same type as the node. ",
	          "");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "return a clone of a node, with Object* return type. ",
	          "");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "return true if this and obj are of the same kind of object. ",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the node's library. ",
	          "");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the node's class type. ",
	          "");
	I_Method1(, META_UIObject, IN, osgWidget::Frame, x,
	          Properties::NON_VIRTUAL,
	          ____META_UIObject__Frame,
	          "",
	          "");
	I_ConstructorWithDefaults1(IN, const std::string &, x, "",
	                           Properties::NON_EXPLICIT,
	                           ____Frame__C5_std_string_R1,
	                           "",
	                           "");
	I_Constructor2(IN, const osgWidget::Frame &, x, IN, const osg::CopyOp &, x,
	               ____Frame__C5_Frame_R1__C5_osg_CopyOp_R1,
	               "",
	               "");
	I_Method1(void, managed, IN, osgWidget::WindowManager *, x,
	          Properties::VIRTUAL,
	          __void__managed__WindowManager_P1,
	          "",
	          "");
	I_Method4(void, createSimpleFrame, IN, osgWidget::point_type, cw, IN, osgWidget::point_type, ch, IN, osgWidget::point_type, w, IN, osgWidget::point_type, h,
	          Properties::NON_VIRTUAL,
	          __void__createSimpleFrame__point_type__point_type__point_type__point_type,
	          "",
	          "");
	I_Method7(void, createSimpleFrameWithSingleTexture, IN, const std::string &, tex, IN, osgWidget::point_type, tw, IN, osgWidget::point_type, th, IN, osgWidget::point_type, cw, IN, osgWidget::point_type, ch, IN, osgWidget::point_type, w, IN, osgWidget::point_type, h,
	          Properties::NON_VIRTUAL,
	          __void__createSimpleFrameWithSingleTexture__C5_std_string_R1__point_type__point_type__point_type__point_type__point_type__point_type,
	          "",
	          "");
	I_Method1(bool, setWindow, IN, osgWidget::Window *, x,
	          Properties::NON_VIRTUAL,
	          __bool__setWindow__Window_P1,
	          "",
	          "");
	I_Method0(osgWidget::Window::EmbeddedWindow *, getEmbeddedWindow,
	          Properties::NON_VIRTUAL,
	          __EmbeddedWindow_P1__getEmbeddedWindow,
	          "",
	          "");
	I_Method0(const osgWidget::Window::EmbeddedWindow *, getEmbeddedWindow,
	          Properties::NON_VIRTUAL,
	          __C5_EmbeddedWindow_P1__getEmbeddedWindow,
	          "",
	          "");
	I_Method1(osgWidget::Frame::Corner *, getCorner, IN, osgWidget::Frame::CORNER, c,
	          Properties::NON_VIRTUAL,
	          __Corner_P1__getCorner__CORNER,
	          "",
	          "");
	I_Method1(const osgWidget::Frame::Corner *, getCorner, IN, osgWidget::Frame::CORNER, c,
	          Properties::NON_VIRTUAL,
	          __C5_Corner_P1__getCorner__CORNER,
	          "",
	          "");
	I_Method1(osgWidget::Frame::Border *, getBorder, IN, osgWidget::Frame::BORDER, b,
	          Properties::NON_VIRTUAL,
	          __Border_P1__getBorder__BORDER,
	          "",
	          "");
	I_Method1(const osgWidget::Frame::Border *, getBorder, IN, osgWidget::Frame::BORDER, b,
	          Properties::NON_VIRTUAL,
	          __C5_Border_P1__getBorder__BORDER,
	          "",
	          "");
	I_StaticMethod1(std::string, cornerToString, IN, osgWidget::Frame::CORNER, x,
	                __std_string__cornerToString__CORNER_S,
	                "",
	                "");
	I_StaticMethod1(std::string, borderToString, IN, osgWidget::Frame::BORDER, x,
	                __std_string__borderToString__BORDER_S,
	                "",
	                "");
	I_StaticMethodWithDefaults6(osgWidget::Frame *, createSimpleFrame, IN, const std::string &, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::Frame *, x, 0,
	                            __Frame_P1__createSimpleFrame__C5_std_string_R1__point_type__point_type__point_type__point_type__Frame_P1_S,
	                            "",
	                            "");
	I_StaticMethodWithDefaults9(osgWidget::Frame *, createSimpleFrameWithSingleTexture, IN, const std::string &, x, , IN, const std::string &, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::point_type, x, , IN, osgWidget::Frame *, x, 0,
	                            __Frame_P1__createSimpleFrameWithSingleTexture__C5_std_string_R1__C5_std_string_R1__point_type__point_type__point_type__point_type__point_type__point_type__Frame_P1_S,
	                            "",
	                            "");
	I_ProtectedMethod1(osgWidget::Widget *, _getCorner, IN, osgWidget::Frame::CORNER, x,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __Widget_P1___getCorner__CORNER,
	                   "",
	                   "");
	I_ProtectedMethod1(osgWidget::Widget *, _getBorder, IN, osgWidget::Frame::BORDER, x,
	                   Properties::NON_VIRTUAL,
	                   Properties::CONST,
	                   __Widget_P1___getBorder__BORDER,
	                   "",
	                   "");
	I_SimpleProperty(osgWidget::Window::EmbeddedWindow *, EmbeddedWindow, 
	                 __EmbeddedWindow_P1__getEmbeddedWindow, 
	                 0);
	I_SimpleProperty(osgWidget::Window *, Window, 
	                 0, 
	                 __bool__setWindow__Window_P1);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgWidget::Frame::Border)
	I_DeclaringFile("osgWidget/Frame");
	I_BaseType(osgWidget::Widget);
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(, META_UIObject, IN, osgWidget::Frame::Border, x,
	          Properties::NON_VIRTUAL,
	          ____META_UIObject__Border,
	          "",
	          "");
	I_ConstructorWithDefaults3(IN, osgWidget::Frame::BORDER, x, osgWidget::Frame::BORDER_LEFT, IN, osgWidget::point_type, x, 0.0f, IN, osgWidget::point_type, x, 0.0f,
	                           ____Border__BORDER__point_type__point_type,
	                           "",
	                           "");
	I_Constructor2(IN, const osgWidget::Frame::Border &, x, IN, const osg::CopyOp &, x,
	               ____Border__C5_Border_R1__C5_osg_CopyOp_R1,
	               "",
	               "");
	I_Method3(bool, mouseDrag, IN, double, x, IN, double, x, IN, osgWidget::WindowManager *, x,
	          Properties::VIRTUAL,
	          __bool__mouseDrag__double__double__WindowManager_P1,
	          "",
	          "");
	I_Method0(osgWidget::Frame::BORDER, getBorder,
	          Properties::NON_VIRTUAL,
	          __BORDER__getBorder,
	          "",
	          "");
	I_Method1(void, setBorder, IN, osgWidget::Frame::BORDER, border,
	          Properties::NON_VIRTUAL,
	          __void__setBorder__BORDER,
	          "",
	          "");
	I_Method1(void, setBorderAndName, IN, osgWidget::Frame::BORDER, border,
	          Properties::NON_VIRTUAL,
	          __void__setBorderAndName__BORDER,
	          "",
	          "");
	I_SimpleProperty(osgWidget::Frame::BORDER, Border, 
	                 __BORDER__getBorder, 
	                 __void__setBorder__BORDER);
	I_SimpleProperty(osgWidget::Frame::BORDER, BorderAndName, 
	                 0, 
	                 __void__setBorderAndName__BORDER);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(osgWidget::Frame::Corner)
	I_DeclaringFile("osgWidget/Frame");
	I_BaseType(osgWidget::Widget);
	I_Method0(osg::Object *, cloneType,
	          Properties::VIRTUAL,
	          __osg_Object_P1__cloneType,
	          "Clone the type of an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(osg::Object *, clone, IN, const osg::CopyOp &, copyop,
	          Properties::VIRTUAL,
	          __osg_Object_P1__clone__C5_osg_CopyOp_R1,
	          "Clone an object, with Object* return type. ",
	          "Must be defined by derived classes. ");
	I_Method1(bool, isSameKindAs, IN, const osg::Object *, obj,
	          Properties::VIRTUAL,
	          __bool__isSameKindAs__C5_osg_Object_P1,
	          "",
	          "");
	I_Method0(const char *, libraryName,
	          Properties::VIRTUAL,
	          __C5_char_P1__libraryName,
	          "return the name of the object's library. ",
	          "Must be defined by derived classes. The OpenSceneGraph convention is that the namespace of a library is the same as the library name. ");
	I_Method0(const char *, className,
	          Properties::VIRTUAL,
	          __C5_char_P1__className,
	          "return the name of the object's class type. ",
	          "Must be defined by derived classes. ");
	I_Method1(, META_UIObject, IN, osgWidget::Frame::Corner, x,
	          Properties::NON_VIRTUAL,
	          ____META_UIObject__Corner,
	          "",
	          "");
	I_ConstructorWithDefaults3(IN, osgWidget::Frame::CORNER, x, osgWidget::Frame::CORNER_LOWER_LEFT, IN, osgWidget::point_type, x, 0.0f, IN, osgWidget::point_type, x, 0.0f,
	                           ____Corner__CORNER__point_type__point_type,
	                           "",
	                           "");
	I_Constructor2(IN, const osgWidget::Frame::Corner &, x, IN, const osg::CopyOp &, x,
	               ____Corner__C5_Corner_R1__C5_osg_CopyOp_R1,
	               "",
	               "");
	I_Method3(bool, mouseDrag, IN, double, x, IN, double, x, IN, osgWidget::WindowManager *, x,
	          Properties::VIRTUAL,
	          __bool__mouseDrag__double__double__WindowManager_P1,
	          "",
	          "");
	I_Method0(osgWidget::Frame::CORNER, getCorner,
	          Properties::NON_VIRTUAL,
	          __CORNER__getCorner,
	          "",
	          "");
	I_Method1(void, setCorner, IN, osgWidget::Frame::CORNER, corner,
	          Properties::NON_VIRTUAL,
	          __void__setCorner__CORNER,
	          "",
	          "");
	I_Method1(void, setCornerAndName, IN, osgWidget::Frame::CORNER, corner,
	          Properties::NON_VIRTUAL,
	          __void__setCornerAndName__CORNER,
	          "",
	          "");
	I_SimpleProperty(osgWidget::Frame::CORNER, Corner, 
	                 __CORNER__getCorner, 
	                 __void__setCorner__CORNER);
	I_SimpleProperty(osgWidget::Frame::CORNER, CornerAndName, 
	                 0, 
	                 __void__setCornerAndName__CORNER);
END_REFLECTOR

